import{_ as t,c as a,o as n,a2 as i}from"./chunks/framework.B8WFj13S.js";const u=JSON.parse('{"title":"Changing Api","description":"","frontmatter":{"github_repo":"https://github.com/gardener/etcd-druid","github_subdir":"docs/development","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/other-components/etcd-druid/changing-api.md","to":"changing-api.md"},"persona":"Developers","title":"Changing Api","prev":false,"next":false},"headers":[],"relativePath":"docs/other-components/etcd-druid/changing-api/index.md","filePath":"docs/other-components/etcd-druid/changing-api.md","lastUpdated":null}'),o={name:"docs/other-components/etcd-druid/changing-api/index.md"};function r(d,e,s,h,l,c){return n(),a("div",null,e[0]||(e[0]=[i('<h1 id="change-the-api" tabindex="-1">Change the API <a class="header-anchor" href="#change-the-api" aria-label="Permalink to &quot;Change the API&quot;">​</a></h1><p>This guide provides detailed information on what needs to be done when the API needs to be changed.</p><p><code>etcd-druid</code> API follows the same API conventions and guidelines which Kubernetes defines and adopts. The Kubernetes <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md" target="_blank" rel="noreferrer">API Conventions</a> as well as <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api_changes.md" target="_blank" rel="noreferrer">Changing the API</a> topics already provide a good overview and general explanation of the basic concepts behind it. We adhere to the principles laid down by Kubernetes.</p><h2 id="etcd-druid-api" tabindex="-1">Etcd Druid API <a class="header-anchor" href="#etcd-druid-api" aria-label="Permalink to &quot;Etcd Druid API&quot;">​</a></h2><p>The etcd-druid API is defined <a href="https://github.com/gardener/etcd-druid/tree/3383e0219a6c21c6ef1d5610db964cc3524807c8/api" target="_blank" rel="noreferrer">here</a>.</p><p>!!! info The current version of the API is <code>v1alpha1</code>. We are currently working on migration to <code>v1beta1</code> API.</p><h3 id="changing-the-api" tabindex="-1">Changing the API <a class="header-anchor" href="#changing-the-api" aria-label="Permalink to &quot;Changing the API&quot;">​</a></h3><p>If there is a need to make changes to the API, then one should do the following:</p><ul><li>If new fields are added then ensure that these are added as <code>optional</code> fields. They should have the <code>+optional</code> comment and an <code>omitempty</code> JSON tag should be added against the field.</li><li>Ensure that all new fields or changing the existing fields are well documented with doc-strings.</li><li>Care should be taken that incompatible API changes should not be made in the same version of the API. If there is a real necessity to introduce a backward incompatible change then a newer version of the API should be created and an <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definition-versioning/#webhook-conversion" target="_blank" rel="noreferrer">API conversion webhook</a> should be put in place to support more than one version of the API.</li><li>After the changes to the API are finalized, run <code>make generate</code> to ensure that the changes are also reflected in the CRD.</li><li>If necessary, implement or adapt the validation for the API.</li><li>If necessary, adapt the <a href="https://github.com/gardener/etcd-druid/tree/master/examples" target="_blank" rel="noreferrer">examples</a> YAML manifests.</li><li>When opening a pull-request, always add a release note informing the end-users of the changes that are coming in.</li></ul><h3 id="removing-a-field" tabindex="-1">Removing a Field <a class="header-anchor" href="#removing-a-field" aria-label="Permalink to &quot;Removing a Field&quot;">​</a></h3><p>If field(s) needs to be removed permanently from the API, then one should ensure the following:</p><ul><li>Field should not be directly removed, instead first a deprecation notice should be put which should follow a well-defined deprecation period. Ensure that the release note in the pull-request is properly categorized so that this is easily visible to the end-users and clearly mentiones which field(s) have been deprecated. Clearly suggest a way in which clients need to adapt.</li><li>To allow sufficient time to the end-users to adapt to the API changes, deprecated field(s) should only be removed once the deprecation period is over. It is generally recommended that this be done in 2 stages: <ul><li><em>First stage:</em> Remove the code that refers to the deprecated fields. This ensures that the code no longer has dependency on the deprecated field(s).</li><li><em>Second Stage:</em> Remove the field from the API.</li></ul></li></ul>',12)]))}const g=t(o,[["render",r]]);export{u as __pageData,g as default};
