import{_ as o,c as t,o as s,a2 as a}from"./chunks/framework.B8WFj13S.js";const p=JSON.parse('{"title":"Shoot Webhooks","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/extensions","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/extensions/shoot-webhooks.md","to":"shoot-webhooks.md"},"title":"Shoot Webhooks","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/extensions/shoot-webhooks/index.md","filePath":"docs/gardener/extensions/shoot-webhooks.md","lastUpdated":null}'),r={name:"docs/gardener/extensions/shoot-webhooks/index.md"};function n(h,e,i,d,c,u){return s(),t("div",null,e[0]||(e[0]=[a('<h1 id="shoot-resource-customization-webhooks" tabindex="-1">Shoot Resource Customization Webhooks <a class="header-anchor" href="#shoot-resource-customization-webhooks" aria-label="Permalink to &quot;Shoot Resource Customization Webhooks&quot;">​</a></h1><p>Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the <code>kube-proxy</code>), others are optional addons (like the <code>kubernetes-dashboard</code> or the <code>nginx-ingress-controller</code>). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.</p><h2 id="what-s-the-approach-to-implement-such-mutations" tabindex="-1">What&#39;s the approach to implement such mutations? <a class="header-anchor" href="#what-s-the-approach-to-implement-such-mutations" aria-label="Permalink to &quot;What&#39;s the approach to implement such mutations?&quot;">​</a></h2><p>Similar to how <a href="documentation/pr-preview/pr-2/docs/gardener/extensions/controlplane-webhooks/">control plane components in the seed</a> are modified, we are using <code>MutatingWebhookConfiguration</code>s to achieve the same for resources in the shoot. Both the provider extension and the kube-apiserver of the shoot cluster are running in the same seed. Consequently, the kube-apiserver can talk cluster-internally to the provider extension webhook, which makes such operations even faster.</p><h2 id="how-is-the-mutatingwebhookconfiguration-object-created-in-the-shoot" tabindex="-1">How is the <code>MutatingWebhookConfiguration</code> object created in the shoot? <a class="header-anchor" href="#how-is-the-mutatingwebhookconfiguration-object-created-in-the-shoot" aria-label="Permalink to &quot;How is the `MutatingWebhookConfiguration` object created in the shoot?&quot;">​</a></h2><p>The preferred approach is to use a <code>ManagedResource</code> (see also <a href="documentation/pr-preview/pr-2/docs/gardener/extensions/managedresources/">Deploy Resources to the Shoot Cluster</a>) in the seed cluster. This way the <code>gardener-resource-manager</code> ensures that end-users cannot delete/modify the webhook configuration. The provider extension doesn&#39;t need to care about the same.</p><h2 id="what-else-is-needed" tabindex="-1">What else is needed? <a class="header-anchor" href="#what-else-is-needed" aria-label="Permalink to &quot;What else is needed?&quot;">​</a></h2><p>The shoot&#39;s kube-apiserver must be allowed to talk to the provider extension. To achieve this, you need to make sure that the relevant <code>NetworkPolicy</code> get created for allowing the network traffic. Please refer to <a href="documentation/pr-preview/pr-2/docs/gardener/network_policies/#webhook-servers">this guide</a> for more information.</p><h2 id="autonomous-shoot-clusters" tabindex="-1">Autonomous Shoot Clusters <a class="header-anchor" href="#autonomous-shoot-clusters" aria-label="Permalink to &quot;Autonomous Shoot Clusters&quot;">​</a></h2><p>If running in an autonomous shoot cluster, the shoot webhooks should be merged into the seed webhooks. You can do so by setting the <code>mergeShootWebhooksIntoSeedWebhooks</code> to <code>true</code> in the <code>extensions/pkg/webhook/cmd.AddToManager</code> function. Take a look at <a href="documentation/pr-preview/pr-2/docs/gardener/extensions/registration/#helm-values">this document</a> in order to determine whether the extension runs in an autonomous shoot cluster.</p>',10)]))}const m=o(r,[["render",n]]);export{p as __pageData,m as default};
