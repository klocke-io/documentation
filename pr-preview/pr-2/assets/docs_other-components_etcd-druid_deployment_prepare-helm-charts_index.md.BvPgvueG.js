import{_ as t,c as a,o as r,a2 as o}from"./chunks/framework.B8WFj13S.js";const u=JSON.parse('{"title":"Prepare Helm Charts","description":"","frontmatter":{"github_repo":"https://github.com/gardener/etcd-druid","github_subdir":"docs/deployment","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/other-components/etcd-druid/deployment/prepare-helm-charts.md","to":"prepare-helm-charts.md"},"title":"Prepare Helm Charts","prev":false,"next":false},"headers":[],"relativePath":"docs/other-components/etcd-druid/deployment/prepare-helm-charts/index.md","filePath":"docs/other-components/etcd-druid/deployment/prepare-helm-charts.md","lastUpdated":null}'),s={name:"docs/other-components/etcd-druid/deployment/prepare-helm-charts/index.md"};function i(n,e,d,l,c,h){return r(),a("div",null,e[0]||(e[0]=[o(`<h1 id="prepare-etcd-druid-helm-charts" tabindex="-1">Prepare etcd-druid Helm charts <a class="header-anchor" href="#prepare-etcd-druid-helm-charts" aria-label="Permalink to &quot;Prepare etcd-druid Helm charts&quot;">​</a></h1><p><code>etcd-druid</code> operator can be deployed via <a href="https://helm.sh/" target="_blank" rel="noreferrer">helm charts</a>. The charts can be found <a href="https://github.com/gardener/etcd-druid/tree/master/charts/" target="_blank" rel="noreferrer">here</a>. All <code>Makefile</code> <code>deploy*</code> targets employ <a href="https://skaffold.dev/" target="_blank" rel="noreferrer">skaffold</a> which internally uses the same helm charts to deploy all resources to setup etcd-druid. In the following sections you will learn on the prerequisites, generated/copied resources and kubernetes resources that are deployed via helm charts to setup etcd-druid.</p><h2 id="prerequisite" tabindex="-1">Prerequisite <a class="header-anchor" href="#prerequisite" aria-label="Permalink to &quot;Prerequisite&quot;">​</a></h2><h3 id="installing-helm" tabindex="-1">Installing Helm <a class="header-anchor" href="#installing-helm" aria-label="Permalink to &quot;Installing Helm&quot;">​</a></h3><p>If you wish to directly use helm charts then please ensure that helm is already installed.</p><p>On macOS, you can install via <code>brew</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm</span></span></code></pre></div><p>For all other OS please check <a href="https://helm.sh/docs/intro/install/" target="_blank" rel="noreferrer">Helm installation instructions</a>.</p><h3 id="installing-openssl" tabindex="-1">Installing OpenSSL <a class="header-anchor" href="#installing-openssl" aria-label="Permalink to &quot;Installing OpenSSL&quot;">​</a></h3><p><a href="https://www.openssl.org/" target="_blank" rel="noreferrer">OpenSSL</a> is used to generate PKI resources that are used to configure TLS connectivity with the webhook(s). On macOS, you can install via brew:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span></span></code></pre></div><p>For all other OS please check <a href="https://github.com/openssl/openssl?tab=readme-ov-file#download" target="_blank" rel="noreferrer">OpenSSL download instructions</a>.</p><blockquote><p>NOTE: On linux, the library is available via native package managers like <code>apt</code>, <code>yum</code> etc. On Windows, you can get the installer <a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noreferrer">here</a>.</p></blockquote><h2 id="generated-copied-resources" tabindex="-1">Generated/Copied resources <a class="header-anchor" href="#generated-copied-resources" aria-label="Permalink to &quot;Generated/Copied resources&quot;">​</a></h2><p>To leverage etcd-druid helm charts you need to ensure that the charts contains the required CRD yaml files and PKI resources.</p><h3 id="crds" tabindex="-1">CRDs <a class="header-anchor" href="#crds" aria-label="Permalink to &quot;CRDs&quot;">​</a></h3><p><a href="https://helm.sh/docs/topics/charts/#custom-resource-definitions-crds" target="_blank" rel="noreferrer">Heml-3</a> provides special status to CRDs. CRD YAML files should be placed in <code>crds/</code> directory inside of a chart. Helm will attempt to load all the files in this directory. We now generate the CRDs and keep these at <code>etcd-druid/api/core/v1alpha1/crds</code> which serves as a single source of truth for all custom resource specifications under etcd-druid operator. These CRDs needs to be copied to <code>etcd-druid/charts/crds</code>.</p><h3 id="pki-resources" tabindex="-1">PKI resources <a class="header-anchor" href="#pki-resources" aria-label="Permalink to &quot;PKI resources&quot;">​</a></h3><p>Webhooks communicate over TLS with the kube-apiserver. It is therefore essential to generate PKI resources (CA certificate, Server certificate and Server key) to be used to configure Webhook configuration and mount it to the etcd-druid operator <code>Deployment</code>.</p><h2 id="kubernetes-resources" tabindex="-1">Kubernetes Resources <a class="header-anchor" href="#kubernetes-resources" aria-label="Permalink to &quot;Kubernetes Resources&quot;">​</a></h2><p>etcd-druid helm charts creates the following kubernetes resources:</p><table tabindex="0"><thead><tr><th>Resource</th><th>Description</th></tr></thead><tbody><tr><td>ApiVersion: apps/v1<br>Kind: Deployment</td><td>This is the etcd-druid Deployment which runs etcd-druid operator. All reconcilers run as part of this operator.</td></tr><tr><td>ApiVersion: rbac.authorization.k8s.io/v1<br>Kind: ClusterRole</td><td>etcd-druid manages <code>Etcd</code> resources deployed across namespaces. A cluster role provides required roles to etcd-druid operator for all the resources that are created for an etcd cluster.</td></tr><tr><td>ApiVersion: v1<br>Kind: ServiceAccount</td><td>It defines a system user with which etcd-druid operator will function. The service account name will be configured in the Deployment at <code>spec.template.spec.serviceAccountName</code></td></tr><tr><td>ApiVersion:rbac.authorization.k8s.io/v1<br>Kind: ClusterRoleBinding</td><td>Binds the cluster roles to the <code>ServiceAccount</code> thus associating all cluster roles to the system user with which etcd-druid operator will be run.</td></tr><tr><td>ApiVersion: v1<br>Kind: Service</td><td>ClusterIP service which will provide a logical endpoint to reach any etcd-druid pods.</td></tr><tr><td>ApiVersion: v1<br>Kind: Secret</td><td>A secret containing the webhook server certificate and key will be created and mounted onto the Deployment.</td></tr><tr><td>ApiVersion: admissionregistration.k8s.io/v1<br>Kind: ValidatingWebhookConfiguration</td><td>It is the validation webhook configuration. Currently there is only one webhook <code>etcdcomponents</code> . For more details see <a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/concepts/etcd-cluster-resource-protection/">here</a>.</td></tr></tbody></table><h2 id="chart-values" tabindex="-1">Chart Values <a class="header-anchor" href="#chart-values" aria-label="Permalink to &quot;Chart Values&quot;">​</a></h2><p>A <a href="https://github.com/gardener/etcd-druid/blob/master/charts//values.yaml" target="_blank" rel="noreferrer">values.yaml</a> is defined which contains the default set of values for all configurable properties. You can change the values as per your needs. A few properties of note:</p><h3 id="image" tabindex="-1">image <a class="header-anchor" href="#image" aria-label="Permalink to &quot;image&quot;">​</a></h3><p>Points to the image URL that will be configured in etcd-druid <code>Deployment</code>. If you are building the image on your own and pushing it to the repository of your choice then ensure that you change the value accordingly.</p><h3 id="webhookpki" tabindex="-1">webhookPKI <a class="header-anchor" href="#webhookpki" aria-label="Permalink to &quot;webhookPKI&quot;">​</a></h3><p>This YAML map contains paths to required PKI artifacts. If you are generating these on your own then ensure that you provide correct paths to these resources.</p><h3 id="etcdcomponentprotection" tabindex="-1">etcdComponentProtection <a class="header-anchor" href="#etcdcomponentprotection" aria-label="Permalink to &quot;etcdComponentProtection&quot;">​</a></h3><p>By default, this webhook is enabled. This is a good default for production environments. However, while you are actively developing then you can choose to disable this webhook.</p><p>If you have switched to using <code>OperatorConfiguration</code> then you must set <code>enabledOperatorConfig</code> to true (for backward compatibility reasons it is defaulted to false) and then control the enablement of <code>EtcdComponentProctection</code> webhook via <code>operatorConfig.webhooks.etcdComponentProtection.enabled</code> property.</p><p>If you have not yet switched to using <code>OperatorConfiguration</code> then you can control the enablement of this webhook via <code>webhooks.etcdComponentProtection.enabled</code> property.</p><h2 id="makefile-target" tabindex="-1">Makefile target <a class="header-anchor" href="#makefile-target" aria-label="Permalink to &quot;Makefile target&quot;">​</a></h2><p>A convenience Makefile target <code>make prepare-helm-charts</code> is provided which leverages <code>OpenSSL</code> to generate the required PKI artifacts. If you wish to deploy <code>etcd-druid</code> in a specific namespace then prior to running this Makefile target you can run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NAMESPACE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">namespace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>!!! info Specifying a namespace other than <code>default</code> will result in additional SAN being added in the webhook server certificate.</p><p>By default, the certificates generated have an expiry of 12h. If you wish to have a different expiry then prior to running this Makefile target you can run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CERT_EXPIRY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">duration-of-your-choice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># example: export CERT_EXPIRY=6h</span></span></code></pre></div><p>!!! note</p><p>​ If you are using <code>make deploy*</code> targets directly which leverages <a href="https://skaffold.dev/" target="_blank" rel="noreferrer">skaffold</a> then Makefile target <code>prepare-helm-charts</code> will be invoked automatically.</p>`,40)]))}const b=t(s,[["render",i]]);export{u as __pageData,b as default};
