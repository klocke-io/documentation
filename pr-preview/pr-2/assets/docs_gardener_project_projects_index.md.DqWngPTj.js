import{_ as s,c as a,o as t,a2 as i}from"./chunks/framework.B8WFj13S.js";const k=JSON.parse('{"title":"Projects","description":"Project operations and roles. Four-Eyes-Principle for resource deletion","frontmatter":{"aliases":["/docs/gardener/projects/"],"description":"Project operations and roles. Four-Eyes-Principle for resource deletion","github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/usage/project","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/project/projects.md","to":"projects.md"},"persona":"Users","title":"Projects","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/project/projects/index.md","filePath":"docs/gardener/project/projects.md","lastUpdated":null}'),o={name:"docs/gardener/project/projects/index.md"};function n(r,e,c,d,l,p){return t(),a("div",null,e[0]||(e[0]=[i(`<h1 id="projects" tabindex="-1">Projects <a class="header-anchor" href="#projects" aria-label="Permalink to &quot;Projects&quot;">â€‹</a></h1><p>The Gardener API server supports a cluster-scoped <code>Project</code> resource which is used for data isolation between individual Gardener consumers. For example, each development team has its own project to manage its own shoot clusters.</p><p>Each <code>Project</code> is backed by a Kubernetes <code>Namespace</code> that contains the actual related Kubernetes resources, like <code>Secret</code>s or <code>Shoot</code>s.</p><p><strong>Example resource:</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">core.gardener.cloud/v1beta1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Project</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dev</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">garden-dev</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is my first project&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Experimenting with Gardener&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  owner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    apiGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">User</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">john.doe@example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  members</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">User</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">alice.doe@example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">admin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # roles:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # - viewer </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # - uam</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # - serviceaccountmanager</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # - extension:foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rbac.authorization.k8s.io</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">User</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bob.doe@example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">viewer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># tolerations:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   defaults:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   - key: &lt;some-key&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   whitelist:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   - key: &lt;some-key&gt;</span></span></code></pre></div><p>The <code>.spec.namespace</code> field is optional and is initialized if unset. The name of the resulting namespace will be determined based on the <code>Project</code> name and UID, e.g., <code>garden-dev-5aef3</code>. It&#39;s also possible to adopt existing namespaces by labeling them <code>gardener.cloud/role=project</code> and <code>project.gardener.cloud/name=dev</code> beforehand (otherwise, they cannot be adopted).</p><p>When deleting a Project resource, the corresponding namespace is also deleted. To keep a namespace after project deletion, an administrator/operator (not Project members!) can annotate the project-namespace with <code>namespace.gardener.cloud/keep-after-project-deletion</code>.</p><p>The <code>spec.description</code> and <code>.spec.purpose</code> fields can be used to describe to fellow team members and Gardener operators what this project is used for.</p><p>Each project has one dedicated owner, configured in <code>.spec.owner</code> using the <code>rbac.authorization.k8s.io/v1.Subject</code> type. The owner is the main contact person for Gardener operators. Please note that the <code>.spec.owner</code> field is deprecated and will be removed in future API versions in favor of the <code>owner</code> role, see below.</p><p>The list of members (again a list in <code>.spec.members[]</code> using the <code>rbac.authorization.k8s.io/v1.Subject</code> type) contains all the people that are associated with the project in any way. Each project member must have at least one role (currently described in <code>.spec.members[].role</code>, additional roles can be added to <code>.spec.members[].roles[]</code>). The following roles exist:</p><ul><li><code>admin</code>: This allows to fully manage resources inside the project (e.g., secrets, shoots, configmaps, and similar). Mind that the <code>admin</code> role has read only access to service accounts.</li><li><code>serviceaccountmanager</code>: This allows to fully manage service accounts inside the project namespace and request tokens for them. The permissions of the created service accounts are instead managed by the <code>admin</code> role. Please refer to <a href="documentation/pr-preview/pr-2/docs/gardener/project/service-account-manager/">Service Account Manager</a>.</li><li><code>uam</code>: This allows to add/modify/remove human users or groups to/from the project member list.</li><li><code>viewer</code>: This allows to read all resources inside the project except secrets.</li><li><code>owner</code>: This combines the <code>admin</code>, <code>uam</code>, and <code>serviceaccountmanager</code> roles.</li><li>Extension roles (prefixed with <code>extension:</code>): Please refer to <a href="documentation/pr-preview/pr-2/docs/gardener/extensions/project-roles/">Extending Project Roles</a>.</li></ul><p>The <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/controller-manager/#project-controller">project controller</a> inside the Gardener Controller Manager is managing RBAC resources that grant the described privileges to the respective members.</p><p>There are three central <code>ClusterRole</code>s <code>gardener.cloud:system:project-member</code>, <code>gardener.cloud:system:project-viewer</code>, and <code>gardener.cloud:system:project-serviceaccountmanager</code> that grant the permissions for namespaced resources (e.g., <code>Secret</code>s, <code>Shoot</code>s, <code>ServiceAccount</code>s). Via referring <code>RoleBinding</code>s created in the respective namespace the project members get bound to these <code>ClusterRole</code>s and, thus, the needed permissions. There are also project-specific <code>ClusterRole</code>s granting the permissions for cluster-scoped resources, e.g., the <code>Namespace</code> or <code>Project</code> itself.<br> For each role, the following <code>ClusterRole</code>s, <code>ClusterRoleBinding</code>s, and <code>RoleBinding</code>s are created:</p><table tabindex="0"><thead><tr><th>Role</th><th><code>ClusterRole</code></th><th><code>ClusterRoleBinding</code></th><th><code>RoleBinding</code></th></tr></thead><tbody><tr><td><code>admin</code></td><td><code>gardener.cloud:system:project-member:&lt;projectName&gt;</code></td><td><code>gardener.cloud:system:project-member:&lt;projectName&gt;</code></td><td><code>gardener.cloud:system:project-member</code></td></tr><tr><td><code>serviceaccountmanager</code></td><td></td><td></td><td><code>gardener.cloud:system:project-serviceaccountmanager</code></td></tr><tr><td><code>uam</code></td><td><code>gardener.cloud:system:project-uam:&lt;projectName&gt;</code></td><td><code>gardener.cloud:system:project-uam:&lt;projectName&gt;</code></td><td></td></tr><tr><td><code>viewer</code></td><td><code>gardener.cloud:system:project-viewer:&lt;projectName&gt;</code></td><td><code>gardener.cloud:system:project-viewer:&lt;projectName&gt;</code></td><td><code>gardener.cloud:system:project-viewer</code></td></tr><tr><td><code>owner</code></td><td><code>gardener.cloud:system:project:&lt;projectName&gt;</code></td><td><code>gardener.cloud:system:project:&lt;projectName&gt;</code></td><td></td></tr><tr><td><code>extension:*</code></td><td><code>gardener.cloud:extension:project:&lt;projectName&gt;:&lt;extensionRoleName&gt;</code></td><td></td><td><code>gardener.cloud:extension:project:&lt;projectName&gt;:&lt;extensionRoleName&gt;</code></td></tr></tbody></table><h2 id="user-access-management" tabindex="-1">User Access Management <a class="header-anchor" href="#user-access-management" aria-label="Permalink to &quot;User Access Management&quot;">â€‹</a></h2><p>For <code>Project</code>s created before Gardener v1.8, all admins were allowed to manage other members. Beginning with v1.8, the new <code>uam</code> role is being introduced. It is backed by the <code>manage-members</code> custom RBAC verb which allows to add/modify/remove human users or groups to/from the project member list. Human users are subjects with <code>kind=User</code> and <code>name!=system:serviceaccount:*</code>, and groups are subjects with <code>kind=Group</code>. The management of service account subjects (<code>kind=ServiceAccount</code> or <code>name=system:serviceaccount:*</code>) is not controlled via the <code>uam</code> custom verb but with the standard <code>update</code>/<code>patch</code> verbs for projects.</p><p>All newly created projects will only bind the owner to the <code>uam</code> role. The owner can still grant the <code>uam</code> role to other members if desired. For projects created before Gardener v1.8, the Gardener Controller Manager will migrate all projects to also assign the <code>uam</code> role to all <code>admin</code> members (to not break existing use-cases). The corresponding migration logic is present in Gardener Controller Manager from v1.8 to v1.13. The project owner can gradually remove these roles if desired.</p><h2 id="stale-projects" tabindex="-1">Stale Projects <a class="header-anchor" href="#stale-projects" aria-label="Permalink to &quot;Stale Projects&quot;">â€‹</a></h2><p>When a project is not actively used for some period of time, it is marked as &quot;stale&quot;. This is done by a controller called <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/controller-manager/#stale-projects-reconciler">&quot;Stale Projects Reconciler&quot;</a>. Once the project is marked as stale, there is a time frame in which if not used it will be deleted by that controller.</p><h2 id="four-eyes-principle-for-resource-deletion" tabindex="-1">Four-Eyes-Principle For Resource Deletion <a class="header-anchor" href="#four-eyes-principle-for-resource-deletion" aria-label="Permalink to &quot;Four-Eyes-Principle For Resource Deletion&quot;">â€‹</a></h2><p>In order to delete a <code>Shoot</code>, the deletion must be confirmed upfront with the <code>confirmation.gardener.cloud/deletion=true</code> annotation. Without this annotation being set, <code>gardener-apiserver</code> denies any DELETE request. Still, users sometimes accidentally shot themselves in the foot, meaning that they accidentally deleted a <code>Shoot</code> despite the confirmation requirement.</p><p>To prevent that (or make it harder, at least), the <code>Project</code> can be configured to apply the dual approval concept for <code>Shoot</code> deletion. This means that the subject confirming the deletion must not be the same as the subject sending the DELETE request.</p><p>Example:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dualApprovalForDeletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoots</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    includeServiceAccounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>As of today, <code>core.gardener.cloud/v1beta1.Shoot</code> is the only resource for which this concept is implemented.</p></div><p>As usual, <code>.spec.dualApprovalForDeletion[].selector.matchLabels={}</code> matches all resources, <code>.spec.dualApprovalForDeletion[].selector.matchLabels=null</code> matches none at all. It can also be decided to specify an individual label selector if this concept shall only apply to a subset of the <code>Shoot</code>s in the project (e.g., CI/development clusters shall be excluded).</p><p>The <code>includeServiceAccounts</code> (default: <code>true</code>) controls whether the concept also applies when the <code>Shoot</code> deletion confirmation and actual deletion is triggered via <code>ServiceAccount</code>s. This is to prevent that CI jobs have to follow this concept as well, adding additional complexity/overhead. Alternatively, you could also use two <code>ServiceAccount</code>s, one for confirming the deletion, and another one for actually sending the DELETE request, if desired.</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>Project members can still change the labels of <code>Shoot</code>s (or the selector itself) to circumvent the dual approval concept. This concern is intentionally excluded/ignored for now since the principle is not a &quot;security feature&quot; but shall just help preventing <em>accidental</em> deletion.</p></div>`,28)]))}const m=s(o,[["render",n]]);export{k as __pageData,m as default};
