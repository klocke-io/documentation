import{_ as t,c as i,o as a,a2 as s}from"./chunks/framework.B8WFj13S.js";const k=JSON.parse('{"title":"Shoot Credentials Rotation","description":"","frontmatter":{"aliases":["/docs/gardener/shoot_credentials_rotation/"],"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/usage/shoot-operations","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/shoot-operations/shoot_credentials_rotation.md","to":"shoot_credentials_rotation.md"},"persona":"Users","title":"Shoot Credentials Rotation","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/shoot-operations/shoot_credentials_rotation/index.md","filePath":"docs/gardener/shoot-operations/shoot_credentials_rotation.md","lastUpdated":null}'),o={name:"docs/gardener/shoot-operations/shoot_credentials_rotation/index.md"};function n(r,e,h,l,d,c){return a(),i("div",null,e[0]||(e[0]=[s('<h1 id="credentials-rotation-for-shoot-clusters" tabindex="-1">Credentials Rotation for Shoot Clusters <a class="header-anchor" href="#credentials-rotation-for-shoot-clusters" aria-label="Permalink to &quot;Credentials Rotation for Shoot Clusters&quot;">‚Äã</a></h1><p>There are a lot of different credentials for <code>Shoot</code>s to make sure that the various components can communicate with each other and to make sure it is usable and operable.</p><p>This page explains how the varieties of credentials can be rotated so that the cluster can be considered secure.</p><h2 id="user-provided-credentials" tabindex="-1">User-Provided Credentials <a class="header-anchor" href="#user-provided-credentials" aria-label="Permalink to &quot;User-Provided Credentials&quot;">‚Äã</a></h2><h3 id="cloud-provider-keys" tabindex="-1">Cloud Provider Keys <a class="header-anchor" href="#cloud-provider-keys" aria-label="Permalink to &quot;Cloud Provider Keys&quot;">‚Äã</a></h3><p>End-users must provide credentials such that Gardener and Kubernetes controllers can communicate with the respective cloud provider APIs in order to perform infrastructure operations. For example, Gardener uses them to set up and maintain the networks, security groups, subnets, etc., while the <a href="https://kubernetes.io/docs/concepts/architecture/cloud-controller/" target="_blank" rel="noreferrer">cloud-controller-manager</a> uses them to reconcile load balancers and routes, and the <a href="https://kubernetes-csi.github.io/docs/" target="_blank" rel="noreferrer">CSI controller</a> uses them to reconcile volumes and disks.</p><p>Depending on the cloud provider, the required <a href="https://github.com/gardener/gardener/blob/master/example/70-secret-provider.yaml" target="_blank" rel="noreferrer">data keys of the <code>Secret</code> differ</a>. Please consult the documentation of the respective provider extension documentation to get to know the concrete data keys (e.g., <a href="documentation/pr-preview/pr-2/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/usage/#provider-secret-data">this document for AWS</a>).</p><p><strong>It is the responsibility of the end-user to regularly rotate those credentials.</strong> The following steps are required to perform the rotation:</p><ol><li>Update the data in the <code>Secret</code> with new credentials.</li><li>‚ö†Ô∏è Wait until all <code>Shoot</code>s using the <code>Secret</code> are reconciled before you disable the old credentials in your cloud provider account! Otherwise, the <code>Shoot</code>s will no longer work as expected. Check out <a href="documentation/pr-preview/pr-2/docs/gardener/shoot-operations/shoot_operations/#immediate-reconciliation">this document</a> to learn how to trigger a reconciliation of your <code>Shoot</code>s. <ul><li>(Optional) If you want to verify that the new credentials are valid you can trigger <a href="documentation/pr-preview/pr-2/docs/gardener/shoot-operations/shoot_operations/#immediate-maintenance">immediate maintenance operation</a> for the corresponding shoot cluster(s) and wait for to subsequent reconciliation(s) to complete successfully. The maintenance operation triggers infrastructure reconciliation during the subsequent shoot reconciliation which makes use of the new cloud provider credentials.</li></ul></li><li>After all <code>Shoot</code>s using the <code>Secret</code> were reconciled, you can go ahead and deactivate the old credentials in your provider account.</li></ol><h2 id="gardener-provided-credentials" tabindex="-1">Gardener-Provided Credentials <a class="header-anchor" href="#gardener-provided-credentials" aria-label="Permalink to &quot;Gardener-Provided Credentials&quot;">‚Äã</a></h2><p>The below credentials are generated by Gardener when shoot clusters are being created. Those include:</p><ul><li>certificate authorities (and related server and client certificates)</li><li>observability passwords for Plutono</li><li>SSH key pair for worker nodes</li><li>ETCD encryption key</li><li><code>ServiceAccount</code> token signing key</li><li>...</li></ul><p><strong>üö® There is no auto-rotation of those credentials, and it is the responsibility of the end-user to regularly rotate them.</strong></p><p>While it is possible to rotate them one by one, there is also a convenient method to combine the rotation of all of those credentials. The rotation happens in two phases since it might be required to update some API clients (e.g., when CAs are rotated).</p><h3 id="prepare-rotation-of-all-credentials" tabindex="-1">Prepare Rotation of All Credentials <a class="header-anchor" href="#prepare-rotation-of-all-credentials" aria-label="Permalink to &quot;Prepare Rotation of All Credentials&quot;">‚Äã</a></h3><p>In order to start the rotation (first phase), you have to annotate the shoot with the <code>rotate-credentials-start</code> operation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-credentials-start</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>You can check the <code>.status.credentials.rotation</code> field in the <code>Shoot</code> to see when the rotation was last initiated and last completed.</p></div><p>Kindly consider the detailed descriptions below to learn how the rotation is performed and what your responsibilities are. Please note that all respective individual actions apply for this combined rotation as well (e.g., worker nodes are rolled out in the first phase).</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>If you don&#39;t want the worker nodes to roll out immediately in this phase (and rather trigger it individually at a later time of your convenience), you can use the <code>rotate-credentials-start-without-workers-rollout</code> and <code>rotate-rollout-workers</code> operations instead. Read up all about it <a href="documentation/pr-preview/pr-2/docs/gardener/shoot-operations/shoot_credentials_rotation/#triggering-worker-node-rollout-individually">here</a>.</p></div><h3 id="complete-rotation-of-all-credentials" tabindex="-1">Complete Rotation of All Credentials <a class="header-anchor" href="#complete-rotation-of-all-credentials" aria-label="Permalink to &quot;Complete Rotation of All Credentials&quot;">‚Äã</a></h3><p>You can complete the rotation (second phase) by annotating the shoot with the <code>rotate-credentials-complete</code> operation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-credentials-complete</span></span></code></pre></div><h3 id="certificate-authorities" tabindex="-1">Certificate Authorities <a class="header-anchor" href="#certificate-authorities" aria-label="Permalink to &quot;Certificate Authorities&quot;">‚Äã</a></h3><p>Gardener generates several certificate authorities (CAs) to ensure secured communication between the various components and actors. Most of those CAs are used for internal communication (e.g., <code>kube-apiserver</code> talks to etcd, <code>vpn-shoot</code> talks to the <code>vpn-seed-server</code>, <code>kubelet</code> talks to <code>kube-apiserver</code>). However, there is also the &quot;cluster CA&quot; which is part of all <code>kubeconfig</code>s and used to sign the server certificate exposed by the <code>kube-apiserver</code>.</p><p>Gardener populates a <code>ConfigMap</code> with the name <code>&lt;shoot-name&gt;.ca-cluster</code> in the project namespace in the garden cluster which contains the following data keys:</p><ul><li><code>ca.crt</code>: the CA bundle of the cluster</li></ul><p>This bundle contains one or multiple CAs which are used for signing serving certificates of the <code>Shoot</code>&#39;s API server. Hence, the certificates contained in this <code>ConfigMap</code> can be used to verify the API server&#39;s identity when communicating with its public endpoint (e.g., as <code>certificate-authority-data</code> in a <code>kubeconfig</code>). This is the same certificate that is also contained in the <code>kubeconfig</code>&#39;s <code>certificate-authority-data</code> field.</p><blockquote><p><code>Shoot</code>s created with Gardener &gt;= v1.45 have a dedicated client CA which verifies the legitimacy of client certificates. For older <code>Shoot</code>s, the client CA is equal to the cluster CA. With the first CA rotation, such clusters will get a dedicated client CA as well.</p></blockquote><p>All the certificates are valid for 10 years. Since it requires adaptation for the consumers of the <code>Shoot</code>, there is no automatic rotation, and <strong>it is the responsibility of the end-user to regularly rotate the CA certificates.</strong></p><p>The rotation happens in three stages (see also <a href="https://github.com/gardener/gardener/blob/master/docs/proposals/18-shoot-CA-rotation.md" target="_blank" rel="noreferrer">GEP-18</a> for the full details):</p><ul><li>In stage one, new CAs are created and added to the bundle (together with the old CAs). Client certificates are re-issued immediately.</li><li>In stage two, end-users update all cluster API clients that communicate with the control plane.</li><li>In stage three, the old CAs are dropped from the bundle and server certificate are re-issued.</li></ul><p>Technically, the <code>Preparing</code> phase indicates stage one. Once it is completed, the <code>Prepared</code> phase indicates readiness for stage two. The <code>Completing</code> phase indicates stage three, and the <code>Completed</code> phase states that the rotation process has finished.</p><blockquote><p>You can check the <code>.status.credentials.rotation.certificateAuthorities</code> field in the <code>Shoot</code> to see when the rotation was last initiated, last completed, and in which phase it currently is.</p></blockquote><p>In order to start the rotation (stage one), you have to annotate the shoot with the <code>rotate-ca-start</code> operation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-ca-start</span></span></code></pre></div><p>This will trigger a <code>Shoot</code> reconciliation and performs stage one. After it is completed, the <code>.status.credentials.rotation.certificateAuthorities.phase</code> is set to <code>Prepared</code>.</p><p>Now you must update all API clients outside the cluster (such as the <code>kubeconfig</code>s on developer machines) to use the newly issued CA bundle in the <code>&lt;shoot-name&gt;.ca-cluster</code> <code>ConfigMap</code>. Please also note that client certificates must be re-issued now.</p><p>After updating all API clients, you can complete the rotation by annotating the shoot with the <code>rotate-ca-complete</code> operation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-ca-complete</span></span></code></pre></div><p>This will trigger another <code>Shoot</code> reconciliation and performs stage three. After it is completed, the <code>.status.credentials.rotation.certificateAuthorities.phase</code> is set to <code>Completed</code>. You could update your API clients again and drop the old CA from their bundle.</p><blockquote><p>Note that the CA rotation also rotates all internal CAs and signed certificates. Hence, most of the components need to be restarted (including etcd and <code>kube-apiserver</code>).</p><p>‚ö†Ô∏è In stage one, all worker nodes of the <code>Shoot</code> will be rolled out to ensure that the <code>Pod</code>s as well as the <code>kubelet</code>s get the updated credentials as well.</p></blockquote><h4 id="triggering-worker-node-rollout-individually" tabindex="-1">Triggering Worker Node Rollout Individually <a class="header-anchor" href="#triggering-worker-node-rollout-individually" aria-label="Permalink to &quot;Triggering Worker Node Rollout Individually&quot;">‚Äã</a></h4><p>If you don&#39;t want that all worker nodes of the <code>Shoot</code> get rolled out in phase one, you can start the rotation with <code>rotate-ca-start-without-workers-rollout</code> instead of <code>rotate-ca-start</code>. This allows you to trigger the worker node rollout individually (per worker pool) whenever you are ready for it.</p><p>Using this annotation will trigger a <code>Shoot</code> reconciliation and performs stage one. While it&#39;s running, <code>.status.credentials.rotation.certificateAuthorities.phase</code> is set to <code>PreparingWithoutWorkersRollout</code>. Once completed, the <code>phase</code> transitions to <code>WaitingForWorkersRollout</code>.</p><p>Now you can update all API clients outside the cluster (see above) and also trigger the rollout of your worker pools like this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-rollout-workers=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pool1-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pool2-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,...]</span></span></code></pre></div><p>You can check which worker pools still need to be rolled by reading <code>.status.credentials.rotation.certificateAuthorities.pendingWorkersRollouts[].name</code>. Once this list is empty, the <code>phase</code> transitions to <code>Prepared</code>. Now you can just complete the rotation as usual (see above).</p><h4 id="worker-node-with-manualinplaceupdate-update-strategy" tabindex="-1">Worker Node with ManualInPlaceUpdate Update Strategy <a class="header-anchor" href="#worker-node-with-manualinplaceupdate-update-strategy" aria-label="Permalink to &quot;Worker Node with ManualInPlaceUpdate Update Strategy&quot;">‚Äã</a></h4><p>In case of manual in-place update, shoot CA rotation phase will be at <code>Preparing</code> until all the worker pools are successfully in-place updated and there are no pending worker pools with strategy ManualInPlaceUpdate.</p><p>You can check which worker pools still need to be updated by reading <code>.status.inPlaceUpdates.pendingWorkerUpdates.manualInPlaceUpdate</code>. Once this list is empty, the <code>phase</code> transitions to <code>Prepared</code>. After this rotation will be completed as usual (see above).</p><h3 id="observability-password-s-for-plutono-and-prometheus" tabindex="-1">Observability Password(s) For Plutono and Prometheus <a class="header-anchor" href="#observability-password-s-for-plutono-and-prometheus" aria-label="Permalink to &quot;Observability Password(s) For Plutono and Prometheus&quot;">‚Äã</a></h3><p>For <code>Shoot</code>s with <code>.spec.purpose!=testing</code>, Gardener deploys an observability stack with Prometheus for monitoring, Alertmanager for alerting (optional), Vali for logging, and Plutono for visualization. The Plutono instance is exposed via <code>Ingress</code> and accessible for end-users via basic authentication credentials generated and managed by Gardener.</p><p>Those credentials are stored in a <code>Secret</code> with the name <code>&lt;shoot-name&gt;.monitoring</code> in the project namespace in the garden cluster and has multiple data keys:</p><ul><li><code>username</code>: the username</li><li><code>password</code>: the password</li><li><code>auth</code>: the username with SHA-1 representation of the password</li></ul><p><strong>It is the responsibility of the end-user to regularly rotate those credentials.</strong> In order to rotate the <code>password</code>, annotate the <code>Shoot</code> with <code>gardener.cloud/operation=rotate-observability-credentials</code>. This operation is not allowed for <code>Shoot</code>s that are already marked for deletion.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-observability-credentials</span></span></code></pre></div><blockquote><p>You can check the <code>.status.credentials.rotation.observability</code> field in the <code>Shoot</code> to see when the rotation was last initiated and last completed.</p></blockquote><h3 id="ssh-key-pair-for-worker-nodes" tabindex="-1">SSH Key Pair for Worker Nodes <a class="header-anchor" href="#ssh-key-pair-for-worker-nodes" aria-label="Permalink to &quot;SSH Key Pair for Worker Nodes&quot;">‚Äã</a></h3><p>Gardener generates an SSH key pair whose public key is propagated to all worker nodes of the <code>Shoot</code>. The private key can be used to establish an SSH connection to the workers for troubleshooting purposes. It is recommended to use <a href="https://github.com/gardener/gardenctl-v2/" target="_blank" rel="noreferrer"><code>gardenctl-v2</code></a> and its <code>gardenctl ssh</code> command since it is required to first open up the security groups and create a bastion VM (no direct SSH access to the worker nodes is possible).</p><p>The private key is stored in a <code>Secret</code> with the name <code>&lt;shoot-name&gt;.ssh-keypair</code> in the project namespace in the garden cluster and has multiple data keys:</p><ul><li><code>id_rsa</code>: the private key</li><li><code>id_rsa.pub</code>: the public key for SSH</li></ul><p>In order to rotate the keys, annotate the <code>Shoot</code> with <code>gardener.cloud/operation=rotate-ssh-keypair</code>. This will propagate a new key to all worker nodes while keeping the old key active and valid as well (it will only be invalidated/removed with the next rotation).</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-ssh-keypair</span></span></code></pre></div><blockquote><p>You can check the <code>.status.credentials.rotation.sshKeypair</code> field in the <code>Shoot</code> to see when the rotation was last initiated or last completed.</p></blockquote><p>The old key is stored in a <code>Secret</code> with the name <code>&lt;shoot-name&gt;.ssh-keypair.old</code> in the project namespace in the garden cluster and has the same data keys as the regular <code>Secret</code>.</p><h3 id="etcd-encryption-key" tabindex="-1">ETCD Encryption Key <a class="header-anchor" href="#etcd-encryption-key" aria-label="Permalink to &quot;ETCD Encryption Key&quot;">‚Äã</a></h3><p>This key is used to encrypt the data of <code>Secret</code> resources inside etcd (see <a href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/" target="_blank" rel="noreferrer">upstream Kubernetes documentation</a>).</p><p>The encryption key has no expiration date. There is no automatic rotation, and <strong>it is the responsibility of the end-user to regularly rotate the encryption key.</strong></p><p>The rotation happens in three stages:</p><ul><li>In stage one, a new encryption key is created and added to the bundle (together with the old encryption key).</li><li>In stage two, all <code>Secret</code>s in the cluster and resources configured in the <code>spec.kubernetes.kubeAPIServer.encryptionConfig</code> of the Shoot (see <a href="documentation/pr-preview/pr-2/docs/gardener/security/etcd_encryption_config/">ETCD Encryption Config</a>) are rewritten by the <code>kube-apiserver</code> so that they become encrypted with the new encryption key.</li><li>In stage three, the old encryption is dropped from the bundle.</li></ul><p>Technically, the <code>Preparing</code> phase indicates the stages one and two. Once it is completed, the <code>Prepared</code> phase indicates readiness for stage three. The <code>Completing</code> phase indicates stage three, and the <code>Completed</code> phase states that the rotation process has finished.</p><blockquote><p>You can check the <code>.status.credentials.rotation.etcdEncryptionKey</code> field in the <code>Shoot</code> to see when the rotation was last initiated, last completed, and in which phase it currently is.</p></blockquote><p>In order to start the rotation (stage one), you have to annotate the shoot with the <code>rotate-etcd-encryption-key-start</code> operation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-etcd-encryption-key-start</span></span></code></pre></div><p>This will trigger a <code>Shoot</code> reconciliation and performs the stages one and two. After it is completed, the <code>.status.credentials.rotation.etcdEncryptionKey.phase</code> is set to <code>Prepared</code>. Now you can complete the rotation by annotating the shoot with the <code>rotate-etcd-encryption-key-complete</code> operation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-etcd-encryption-key-complete</span></span></code></pre></div><p>This will trigger another <code>Shoot</code> reconciliation and performs stage three. After it is completed, the <code>.status.credentials.rotation.etcdEncryptionKey.phase</code> is set to <code>Completed</code>.</p><h3 id="serviceaccount-token-signing-key" tabindex="-1"><code>ServiceAccount</code> Token Signing Key <a class="header-anchor" href="#serviceaccount-token-signing-key" aria-label="Permalink to &quot;`ServiceAccount` Token Signing Key&quot;">‚Äã</a></h3><p>Gardener generates a key which is used to sign the tokens for <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/" target="_blank" rel="noreferrer"><code>ServiceAccount</code>s</a>. Those tokens are typically used by workload <code>Pod</code>s running inside the cluster in order to authenticate themselves with the <code>kube-apiserver</code>. This also includes system components running in the <code>kube-system</code> namespace.</p><p>The token signing key has no expiration date. Since it might require adaptation for the consumers of the <code>Shoot</code>, there is no automatic rotation, and <strong>it is the responsibility of the end-user to regularly rotate the signing key.</strong></p><p>The rotation happens in three stages, similar to how the <a href="documentation/pr-preview/pr-2/docs/gardener/shoot-operations/shoot_credentials_rotation/#certificate-authorities">CA certificates</a> are rotated:</p><ul><li>In stage one, a new signing key is created and added to the bundle (together with the old signing key).</li><li>In stage two, end-users update all out-of-cluster API clients that communicate with the control plane via <code>ServiceAccount</code> tokens.</li><li>In stage three, the old signing key is dropped from the bundle.</li></ul><p>Technically, the <code>Preparing</code> phase indicates stage one. Once it is completed, the <code>Prepared</code> phase indicates readiness for stage two. The <code>Completing</code> phase indicates stage three, and the <code>Completed</code> phase states that the rotation process has finished.</p><blockquote><p>You can check the <code>.status.credentials.rotation.serviceAccountKey</code> field in the <code>Shoot</code> to see when the rotation was last initiated, last completed, and in which phase it currently is.</p></blockquote><p>In order to start the rotation (stage one), you have to annotate the shoot with the <code>rotate-serviceaccount-key-start</code> operation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-serviceaccount-key-start</span></span></code></pre></div><p>This will trigger a <code>Shoot</code> reconciliation and performs stage one. After it is completed, the <code>.status.credentials.rotation.serviceAccountKey.phase</code> is set to <code>Prepared</code>.</p><p>Now you must update all API clients outside the cluster using a <code>ServiceAccount</code> token (such as the <code>kubeconfig</code>s on developer machines) to use a token issued by the new signing key. Gardener already generates new secrets for those <code>ServiceAccount</code>s in the cluster, whose static token was automatically created by Kubernetes (typically before <code>v1.22</code> - <a href="https://github.com/kubernetes/website/blob/ce481bee92c7c1e110eb81207ec3883a975f9587/content/en/docs/reference/access-authn-authz/service-accounts-admin.md?plain=1#L216" target="_blank" rel="noreferrer">ref</a>) However, if you need to create it manually, you can check out <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#manually-create-a-service-account-api-token" target="_blank" rel="noreferrer">this document</a> for instructions.</p><p>After updating all API clients, you can complete the rotation by annotating the shoot with the <code>rotate-serviceaccount-key-complete</code> operation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-namespac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.cloud/operation=rotate-serviceaccount-key-complete</span></span></code></pre></div><p>This will trigger another <code>Shoot</code> reconciliation and performs stage three. After it is completed, the <code>.status.credentials.rotation.serviceAccountKey.phase</code> is set to <code>Completed</code>.</p><blockquote><p>‚ö†Ô∏è In stage one, all worker nodes of the <code>Shoot</code> will be rolled out to ensure that the <code>Pod</code>s use a new token.</p></blockquote><h4 id="triggering-worker-node-rollout-individually-1" tabindex="-1">Triggering Worker Node Rollout Individually <a class="header-anchor" href="#triggering-worker-node-rollout-individually-1" aria-label="Permalink to &quot;Triggering Worker Node Rollout Individually&quot;">‚Äã</a></h4><p>Similar to the rotation of the certificate authorities, you can control the worker node rollout individually. Please read <a href="documentation/pr-preview/pr-2/docs/gardener/shoot-operations/shoot_credentials_rotation/#triggering-worker-node-rollout-individually">this section</a> to get more information. It works the same way for the <code>ServiceAccount</code> token signing key (using <code>rotate-serviceaccount-key-start-without-workers-rollout</code>).</p><h4 id="worker-node-with-manualinplaceupdate-update-strategy-1" tabindex="-1">Worker Node with ManualInPlaceUpdate Update Strategy <a class="header-anchor" href="#worker-node-with-manualinplaceupdate-update-strategy-1" aria-label="Permalink to &quot;Worker Node with ManualInPlaceUpdate Update Strategy&quot;">‚Äã</a></h4><p>Similar to the rotation of the certificate authorities, in case of manual in-place update, <code>ServiceAccount</code> token signing key rotation phase will be at <code>Preparing</code> until all the worker pools are successfully in-place updated and there are no pending worker pools with strategy ManualInPlaceUpdate. Please read <a href="documentation/pr-preview/pr-2/docs/gardener/shoot-operations/shoot_credentials_rotation/#worker-node-with-manualinplaceupdate-update-strategy">this section</a> for more information.</p><h3 id="openvpn-tls-auth-keys" tabindex="-1">OpenVPN TLS Auth Keys <a class="header-anchor" href="#openvpn-tls-auth-keys" aria-label="Permalink to &quot;OpenVPN TLS Auth Keys&quot;">‚Äã</a></h3><p>This key is used to ensure encrypted communication for the VPN connection between the control plane in the seed cluster and the shoot cluster. It is currently <strong>not</strong> rotated automatically and there is no way to trigger it manually.</p>',99)]))}const u=t(o,[["render",n]]);export{k as __pageData,u as default};
