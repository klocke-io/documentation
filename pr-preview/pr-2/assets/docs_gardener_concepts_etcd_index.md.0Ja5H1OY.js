import{_ as t,c as r,o,a2 as a}from"./chunks/framework.B8WFj13S.js";const u=JSON.parse('{"title":"etcd","description":"How Gardener uses the etcd key-value store","frontmatter":{"description":"How Gardener uses the etcd key-value store","github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/concepts","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/concepts/etcd.md","to":"etcd.md"},"title":"etcd","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/concepts/etcd/index.md","filePath":"docs/gardener/concepts/etcd.md","lastUpdated":null}'),c={name:"docs/gardener/concepts/etcd/index.md"};function d(n,e,s,i,l,h){return o(),r("div",null,e[0]||(e[0]=[a('<h1 id="etcd" tabindex="-1">etcd <a class="header-anchor" href="#etcd" aria-label="Permalink to &quot;etcd&quot;">​</a></h1><h2 id="etcd-key-value-store-for-kubernetes" tabindex="-1">etcd - Key-Value Store for Kubernetes <a class="header-anchor" href="#etcd-key-value-store-for-kubernetes" aria-label="Permalink to &quot;etcd - Key-Value Store for Kubernetes&quot;">​</a></h2><p><a href="https://etcd.io/" target="_blank" rel="noreferrer">etcd</a> is a strongly consistent key-value store and the most prevalent choice for the Kubernetes persistence layer. All API cluster objects like <code>Pod</code>s, <code>Deployment</code>s, <code>Secret</code>s, etc., are stored in <code>etcd</code>, which makes it an essential part of a <a href="https://kubernetes.io/docs/concepts/overview/components/#control-plane-components" target="_blank" rel="noreferrer">Kubernetes control plane</a>.</p><h2 id="garden-or-shoot-cluster-persistence" tabindex="-1">Garden or Shoot Cluster Persistence <a class="header-anchor" href="#garden-or-shoot-cluster-persistence" aria-label="Permalink to &quot;Garden or Shoot Cluster Persistence&quot;">​</a></h2><p>Each garden or shoot cluster gets its very own persistence for the control plane. It runs in the shoot namespace on the respective seed cluster (or in the <code>garden</code> namespace in the garden cluster, respectively). Concretely, there are two etcd instances per shoot cluster, which the <code>kube-apiserver</code> is configured to use in the following way:</p><ul><li><code>etcd-main</code></li></ul><p>A store that contains all &quot;cluster critical&quot; or &quot;long-term&quot; objects. These object kinds are typically considered for a backup to prevent any data loss.</p><ul><li><code>etcd-events</code></li></ul><p>A store that contains all <code>Event</code> objects (<code>events.k8s.io</code>) of a cluster. <code>Events</code> usually have a short retention period and occur frequently, but are not essential for a disaster recovery.</p><p>The setup above prevents both, the critical <code>etcd-main</code> is not flooded by Kubernetes <code>Events</code>, as well as backup space is not occupied by non-critical data. This separation saves time and resources.</p><h2 id="etcd-operator" tabindex="-1">etcd Operator <a class="header-anchor" href="#etcd-operator" aria-label="Permalink to &quot;etcd Operator&quot;">​</a></h2><p>Configuring, maintaining, and health-checking etcd is outsourced to a dedicated operator called <a href="https://github.com/gardener/etcd-druid/" target="_blank" rel="noreferrer">etcd Druid</a>. When a <a href="/documentation/pr-preview/pr-2/docs/gardener/concepts/gardenlet/"><code>gardenlet</code></a> reconciles a <code>Shoot</code> resource or a <a href="/documentation/pr-preview/pr-2/docs/gardener/concepts/operator/"><code>gardener-operator</code></a> reconciles a <code>Garden</code> resource, they manage an <a href="https://github.com/gardener/etcd-druid/blob/1d427e9167adac1476d1847c0e265c2c09d6bc62/config/samples/druid_v1alpha1_etcd.yaml" target="_blank" rel="noreferrer"><code>Etcd</code></a> resource in the seed or garden cluster, containing necessary information (backup information, defragmentation schedule, resources, etc.). <code>etcd-druid</code> needs to manage the lifecycle of the desired etcd instance (today <code>main</code> or <code>events</code>). Likewise, when the <code>Shoot</code> or <code>Garden</code> is deleted, <code>gardenlet</code> or <code>gardener-operator</code> deletes the <code>Etcd</code> resources and <a href="https://github.com/gardener/etcd-druid/" target="_blank" rel="noreferrer">etcd Druid</a> takes care of cleaning up all related objects, e.g. the backing <code>StatefulSet</code>s.</p><h2 id="backup" tabindex="-1">Backup <a class="header-anchor" href="#backup" aria-label="Permalink to &quot;Backup&quot;">​</a></h2><p>If <code>Seed</code>s specify backups for etcd (<a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml" target="_blank" rel="noreferrer">example</a>), then Gardener and the respective <a href="/documentation/pr-preview/pr-2/docs/gardener/extensions/">provider extensions</a> are responsible for creating a bucket on the cloud provider&#39;s side (modelled through a <a href="/documentation/pr-preview/pr-2/docs/gardener/extensions/resources/backupbucket/">BackupBucket resource</a>). The bucket stores backups of <code>Shoot</code>s scheduled on that <code>Seed</code>. Furthermore, Gardener creates a <a href="/documentation/pr-preview/pr-2/docs/gardener/extensions/resources/backupentry/">BackupEntry</a>, which subdivides the bucket and thus makes it possible to store backups of multiple shoot clusters.</p><p>How long backups are stored in the bucket after a shoot has been deleted depends on the configured <em>retention period</em> in the <code>Seed</code> resource. Please see this <a href="https://github.com/gardener/gardener/blob/849cd857d0d20e5dde26b9740ca2814603a56dfd/example/20-componentconfig-gardenlet.yaml#L20" target="_blank" rel="noreferrer">example configuration</a> for more information.</p><p>For <code>Garden</code>s specifying backups for etcd (<a href="https://github.com/gardener/gardener/blob/master/example/operator/20-garden.yaml" target="_blank" rel="noreferrer">example</a>), the bucket must be pre-created externally and provided via the <code>Garden</code> specification.</p><p>Both etcd instances are configured to run with a special backup-restore <em>sidecar</em>. It takes care about regularly backing up etcd data and restoring it in case of data loss (in the main etcd only). The sidecar also performs defragmentation and other house-keeping tasks. More information can be found in the <a href="https://github.com/gardener/etcd-backup-restore" target="_blank" rel="noreferrer">component&#39;s GitHub repository</a>.</p><h2 id="housekeeping" tabindex="-1">Housekeeping <a class="header-anchor" href="#housekeeping" aria-label="Permalink to &quot;Housekeeping&quot;">​</a></h2><p><a href="https://etcd.io/docs/v3.3/op-guide/maintenance/" target="_blank" rel="noreferrer">etcd maintenance tasks</a> must be performed from time to time in order to re-gain database storage and to ensure the system&#39;s reliability. The <a href="https://github.com/gardener/etcd-backup-restore" target="_blank" rel="noreferrer">backup-restore</a> <em>sidecar</em> takes care about this job as well.</p><p>For both <code>Shoot</code>s and <code>Garden</code>s, a random time <strong>within the shoot&#39;s maintenance time</strong> is chosen for scheduling these tasks.</p>',20)]))}const b=t(c,[["render",d]]);export{u as __pageData,b as default};
