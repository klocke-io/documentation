import{_ as t,c as o,o as a,a2 as r}from"./chunks/framework.Bfq10Vlj.js";const p=JSON.parse('{"title":"Integration Tests","description":"","frontmatter":{"github_repo":"https://github.com/gardener/machine-controller-manager","github_subdir":"docs/development","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/other-components/machine-controller-manager/integration_tests.md","to":"integration_tests.md"},"persona":"Developers","title":"Integration Tests","prev":false,"next":false},"headers":[],"relativePath":"docs/other-components/machine-controller-manager/integration_tests/index.md","filePath":"docs/other-components/machine-controller-manager/integration_tests.md","lastUpdated":null}'),n={name:"docs/other-components/machine-controller-manager/integration_tests/index.md"};function s(i,e,c,d,l,h){return a(),o("div",null,e[0]||(e[0]=[r('<h1 id="integration-tests" tabindex="-1">Integration tests <a class="header-anchor" href="#integration-tests" aria-label="Permalink to &quot;Integration tests&quot;">​</a></h1><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><h2 id="general-setup-configurations" tabindex="-1">General setup &amp; configurations <a class="header-anchor" href="#general-setup-configurations" aria-label="Permalink to &quot;General setup &amp; configurations&quot;">​</a></h2><p>Integration tests for <code>machine-controller-manager-provider-{provider-name}</code> can be executed manually by following below steps.</p><ol><li>Clone the repository <code>machine-controller-manager-provider-{provider-name}</code> on the local system.</li><li>Navigate to <code>machine-controller-manager-provider-{provider-name}</code> directory and create a <code>dev</code> sub-directory in it.</li><li>If the tags on instances &amp; associated resources on the provider are of <code>String</code> type (for example, GCP tags on its instances are of type <code>String</code> and not key-value pair) then add <code>TAGS_ARE_STRINGS := true</code> in the <code>Makefile</code> and export it. For GCP this has already been hard coded in the <code>Makefile</code>.</li></ol><h2 id="running-the-tests" tabindex="-1">Running the tests <a class="header-anchor" href="#running-the-tests" aria-label="Permalink to &quot;Running the tests&quot;">​</a></h2><ol><li>There is a rule <code>test-integration</code> in the <code>Makefile</code> of the provider repository, which can be used to start the integration test:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-integration</span></span></code></pre></div></li><li>This will ask for additional inputs. Most of them are self explanatory except:</li></ol><ul><li>The script assumes that both the control and target clusters are already being created.</li><li>In case of non-gardener setup (control cluster is not a gardener seed), the name of the machineclass must be <code>test-mc-v1</code> and the value of <code>providerSpec.secretRef.name</code> should be <code>test-mc-secret</code>.</li><li>In case of azure, <code>TARGET_CLUSTER_NAME</code> must be same as the name of the Azure ResourceGroup for the cluster.</li><li>If you are deploying the secret manually, a <code>Secret</code> named <code>test-mc-secret</code> (that contains the provider secret and cloud-config) in the <code>default</code> namespace of the Control Cluster should be created.</li></ul><ol start="3"><li>The controllers log files (<code>mcm_process.log</code> and <code>mc_process.log</code>) are stored in <code>.ci/controllers-test/logs</code> repo and can be used later.</li></ol><h2 id="adding-integration-tests-for-new-providers" tabindex="-1">Adding Integration Tests for new providers <a class="header-anchor" href="#adding-integration-tests-for-new-providers" aria-label="Permalink to &quot;Adding Integration Tests for new providers&quot;">​</a></h2><p>For a new provider, Running Integration tests works with no changes. But for the orphan resource test cases to work correctly, the provider-specific API calls and the Resource Tracker Interface (RTI) should be implemented. Please check <a href="https://github.com/gardener/machine-controller-manager-provider-aws/blob/master/test/integration/provider/" target="_blank" rel="noreferrer"><code>machine-controller-manager-provider-aws</code></a> for reference.</p><h2 id="extending-integration-tests" tabindex="-1">Extending integration tests <a class="header-anchor" href="#extending-integration-tests" aria-label="Permalink to &quot;Extending integration tests&quot;">​</a></h2><ul><li>Update <a href="https://github.com/gardener/machine-controller-manager/blob/master/pkg/test/integration/common/framework.go#L481" target="_blank" rel="noreferrer">ControllerTests</a> to be extend the testcases for all providers. Common testcases for machine|machineDeployment creation|deletion|scaling are packaged into <a href="https://github.com/gardener/machine-controller-manager/blob/master/pkg/test/integration/common/framework.go#L481" target="_blank" rel="noreferrer">ControllerTests</a>.</li><li>To extend the provider specfic test cases, the changes should be done in the <code>machine-controller-manager-provider-{provider-name}</code> repository. For example, to extended the testcases for <code>machine-controller-manager-provider-aws</code>, make changes to <code>test/integration/controller/controller_test.go</code> inside the <code>machine-controller-manager-provider-aws</code> repository. <code>commons</code> contains the <code>Cluster</code> and <code>Clientset</code> objects that makes it easy to extend the tests.</li></ul>',13)]))}const m=t(n,[["render",s]]);export{p as __pageData,m as default};
