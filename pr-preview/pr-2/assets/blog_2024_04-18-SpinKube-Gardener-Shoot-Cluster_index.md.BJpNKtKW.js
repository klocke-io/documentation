import{_ as i,c as a,o as e,a2 as n}from"./chunks/framework.Bfq10Vlj.js";const F=JSON.parse('{"title":"SpinKube on Gardener - Serverless WASM on Kubernetes","description":"","frontmatter":{"aliases":["/blog/2024/04/18/02"],"authors":[{"avatar":"https://avatars.githubusercontent.com/dimityrmirchev","email":"dimitar.mirchev@sap.com","name":"Dimitar Mirchev"}],"github_repo":"https://github.com/gardener/documentation","github_subdir":"website/blog/2024","linkTitle":"SpinKube on Gardener - Serverless WASM on Kubernetes","newsSubtitle":"April 18, 2024","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md","to":"04-18-SpinKube-Gardener-Shoot-Cluster.md"},"publishdate":"2024-04-18","title":"SpinKube on Gardener - Serverless WASM on Kubernetes"},"headers":[],"relativePath":"blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster/index.md","filePath":"blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md","lastUpdated":null}'),t={name:"blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster/index.md"};function p(l,s,h,r,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="spinkube-on-gardener-serverless-wasm-on-kubernetes" tabindex="-1">SpinKube on Gardener - Serverless WASM on Kubernetes <a class="header-anchor" href="#spinkube-on-gardener-serverless-wasm-on-kubernetes" aria-label="Permalink to &quot;SpinKube on Gardener - Serverless WASM on Kubernetes&quot;">​</a></h1><p>With the rising popularity of <a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly (WASM)</a> and <a href="https://wasi.dev/" target="_blank" rel="noreferrer">WebAssembly System Interface (WASI)</a> comes a variety of integration possibilities. WASM is now not only suitable for the browser, but can be also utilized for running workloads on the server. In this post we will explore how you can get started writing serverless applications powered by <a href="https://www.spinkube.dev/" target="_blank" rel="noreferrer">SpinKube</a> on a Gardener Shoot cluster. This post is inspired by a similar tutorial that goes through the steps of <a href="https://www.spinkube.dev/docs/spin-operator/tutorials/deploy-on-azure-kubernetes-service/" target="_blank" rel="noreferrer">Deploying the Spin Operator on Azure Kubernetes Service</a>. Keep in mind that this post does not aim to define a production environment. It is meant to show that Gardener Shoot clusters are able to run WebAssembly workloads, giving users the chance to experiment and explore this cutting-edge technology.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li><a href="https://kubernetes.io/docs/reference/kubectl/" target="_blank" rel="noreferrer">kubectl</a> - the Kubernetes command line tool</li><li><a href="https://helm.sh/" target="_blank" rel="noreferrer">helm</a> - the package manager for Kubernetes</li><li>A running Gardener Shoot cluster</li></ul><h2 id="gardener-shoot-cluster" tabindex="-1">Gardener Shoot Cluster <a class="header-anchor" href="#gardener-shoot-cluster" aria-label="Permalink to &quot;Gardener Shoot Cluster&quot;">​</a></h2><p>For this showcase I am using a Gardener Shoot cluster on AWS infrastructure with nodes powered by <a href="https://github.com/gardenlinux/gardenlinux" target="_blank" rel="noreferrer">Garden Linux</a>, although the steps should be applicable for other infrastructures as well, since Gardener aims to provide a homogenous Kubernetes experience.</p><p>As a prerequisite for next steps, verify that you have access to your Gardener Shoot cluster.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Verify the access to the Gardener Shoot cluster</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ns</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           Active</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   4m1s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kube-node-lease</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Active</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   4m1s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kube-public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       Active</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   4m1s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kube-system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       Active</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   4m1s</span></span></code></pre></div><p>If you are having troubles accessing the Gardener Shoot cluster, please consult the <a href="https://gardener.cloud/docs/gardener/shoot_access/" target="_blank" rel="noreferrer">Accessing Shoot Clusters</a> documentation page.</p><h2 id="deploy-the-spin-operator" tabindex="-1">Deploy the Spin Operator <a class="header-anchor" href="#deploy-the-spin-operator" aria-label="Permalink to &quot;Deploy the Spin Operator&quot;">​</a></h2><p>As a first step, we will install the Spin Operator Custom Resource Definitions and the Runtime Class needed by <code>wasmtime-spin-v2</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install Spin Operator CRDs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/spinkube/spin-operator/releases/download/v0.1.0/spin-operator.crds.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install the Runtime Class</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/spinkube/spin-operator/releases/download/v0.1.0/spin-operator.runtime-class.yaml</span></span></code></pre></div><p>Next, we will install <a href="https://github.com/cert-manager/cert-manager" target="_blank" rel="noreferrer">cert-manager</a>, which is required for provisioning TLS certificates used by the admission webhook of the Spin Operator. If you face issues installing <code>cert-manager</code>, please consult the <a href="https://cert-manager.io/docs/installation/helm/" target="_blank" rel="noreferrer">cert-manager installation</a> documentation.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add and update the Jetstack repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jetstack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://charts.jetstack.io</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install the cert-manager chart alongside with CRDs needed by cert-manager</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  cert-manager</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jetstack/cert-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --create-namespace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.14.4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installCRDs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>In order to install the <code>containerd-wasm-shim</code> on the Kubernetes nodes we will use the <a href="https://kwasm.sh/" target="_blank" rel="noreferrer">kwasm-operator</a>. There is also a successor of <code>kwasm-operator</code> - <a href="https://github.com/spinkube/runtime-class-manager" target="_blank" rel="noreferrer">runtime-class-manager</a> which aims to address some of the limitations of <code>kwasm-operator</code> and provide a production grade implementation for deploying <code>containerd</code> shims on Kubernetes nodes. Since <code>kwasm-operator</code> is easier to install, for the purpose of this post we will use it instead of the <code>runtime-class-manager</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add the kwasm helm repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://kwasm.sh/kwasm-operator/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install KWasm operator</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  kwasm-operator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm/kwasm-operator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --create-namespace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasmOperator.installerImage=ghcr.io/spinkube/containerd-shim-spin/node-installer:v0.13.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Annotate all nodes in the cluster so kwasm can select them and provision the required containerd shim</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm.sh/kwasm-node=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>We can see that a pod has started and completed in the <code>kwasm</code> namespace.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                                              READY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      RESTARTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   AGE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip-10-180-7-60.eu-west-1.compute.internal-provision-kwasm-qhr8r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   0/1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     Completed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          8s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kwasm-operator-6c76c5f94b-8zt4s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                   1/1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     Running</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          15s</span></span></code></pre></div><p>The logs of the <code>kwasm-operator</code> also indicate that the node was provisioned with the required shim.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm-operator-6c76c5f94b-8zt4s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;level&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;info&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;node&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;ip-10-180-7-60.eu-west-1.compute.internal&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;time&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;2024-04-18T05:44:25Z&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;message&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Trying to Deploy on ip-10-180-7-60.eu-west-1.compute.internal&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;level&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;info&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;time&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;2024-04-18T05:44:31Z&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;message&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Job ip-10-180-7-60.eu-west-1.compute.internal-provision-kwasm is still Ongoing&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;level&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;info&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;time&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;2024-04-18T05:44:31Z&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;message&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Job ip-10-180-7-60.eu-west-1.compute.internal-provision-kwasm is Completed. Happy WASMing&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>Finally we can deploy the <code>spin-operator</code> alongside with a <a href="https://www.spinkube.dev/docs/glossary/#spin-app-executor-crd" target="_blank" rel="noreferrer">shim-executor</a>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spin-operator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spin-operator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --create-namespace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --wait</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  oci://ghcr.io/spinkube/charts/spin-operator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/spinkube/spin-operator/releases/download/v0.1.0/spin-operator.shim-executor.yaml</span></span></code></pre></div><h2 id="deploy-a-spin-app" tabindex="-1">Deploy a Spin App <a class="header-anchor" href="#deploy-a-spin-app" aria-label="Permalink to &quot;Deploy a Spin App&quot;">​</a></h2><p>Let&#39;s deploy a sample Spin application using the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/spinkube/spin-operator/main/config/samples/simple.yaml</span></span></code></pre></div><p>After the CRD has been picked up by the <code>spin-operator</code>, a pod will be created running the sample application. Let&#39;s explore its logs.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simple-spinapp-56687588d9-nbrtq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serving</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://0.0.0.0:80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Available</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Routes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  hello:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://0.0.0.0:80/hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  go-hello:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://0.0.0.0:80/go-hello</span></span></code></pre></div><p>We can see the available routes served by the application. Let&#39;s port forward to the application <code>service</code> and test them out.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port-forward</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services/simple-spinapp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8000:80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Forwarding</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 127.0.0.1:8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Forwarding</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [::1]:8000 -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 80</span></span></code></pre></div><p>In another terminal, we can verify that the application returns a response.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:8000/hello</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Spin!%</span></span></code></pre></div><p>This sets the ground for further experimentation and testing. What the <code>SpinApp</code> CRD provides as capabilities and API can be explored through the <a href="https://www.spinkube.dev/docs/reference/spin-app/" target="_blank" rel="noreferrer">SpinApp CRD reference</a>.</p><h2 id="cleanup" tabindex="-1">Cleanup <a class="header-anchor" href="#cleanup" aria-label="Permalink to &quot;Cleanup&quot;">​</a></h2><p>Let&#39;s clean all deployed resources so far.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Delete the spin app and its executor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spinapp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simple-spinapp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spinappexecutors.core.spinoperator.dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerd-shim-spin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uninstall the spin-operator chart</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spin-operator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spin-operator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Remove the kwasm.sh/kwasm-node annotation from nodes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> annotate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm.sh/kwasm-node-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uninstall the kwasm-operator chart</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kwasm-operator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uninstall the cert-manager chart</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert-manager</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert-manager</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Delete the runtime class and SpinApp CRDs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runtimeclass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmtime-spin-v2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spinappexecutors.core.spinoperator.dev</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spinapps.core.spinoperator.dev</span></span></code></pre></div><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In my opinion, WASM on the server is here to stay. Communities are expressing more and more interest in integrating Kubernetes with WASM workloads. As shown Gardener clusters are perfectly capable of supporting this use case. This setup is a great way to start exploring the capabilities that WASM can bring to the server. As stated in the introduction, bear in mind that this post does not define a production environment, but is rather meant to define a playground suitable for exploring and trying out ideas.</p>`,37)]))}const g=i(t,[["render",p]]);export{F as __pageData,g as default};
