import{_ as e,c as i,o as a,a2 as t}from"./chunks/framework.Bfq10Vlj.js";const d=JSON.parse('{"title":"Healthcheck Library","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/extensions","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/extensions/healthcheck-library.md","to":"healthcheck-library.md"},"title":"Healthcheck Library","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/extensions/healthcheck-library/index.md","filePath":"docs/gardener/extensions/healthcheck-library.md","lastUpdated":null}'),n={name:"docs/gardener/extensions/healthcheck-library/index.md"};function h(l,s,r,o,p,k){return a(),i("div",null,s[0]||(s[0]=[t(`<h1 id="health-check-library" tabindex="-1">Health Check Library <a class="header-anchor" href="#health-check-library" aria-label="Permalink to &quot;Health Check Library&quot;">​</a></h1><h2 id="goal" tabindex="-1">Goal <a class="header-anchor" href="#goal" aria-label="Permalink to &quot;Goal&quot;">​</a></h2><p>Typically, an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates / modifies resources in the cluster (via helm, managed resources, kubectl, ...). We call these API Objects &#39;dependent objects&#39; - as they are bound to the lifecycle of the extension.</p><p>The goal of this library is to enable extensions to setup health checks for their &#39;dependent objects&#39; with minimal effort.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>The library provides a generic controller with the ability to register any resource that satisfies the <a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types.go" target="_blank" rel="noreferrer">extension object interface</a>. An example is <a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_worker.go" target="_blank" rel="noreferrer">the <code>Worker</code> CRD</a>.</p><p>Health check functions for commonly used dependent objects can be reused and registered with the controller, such as:</p><ul><li>Deployment</li><li>DaemonSet</li><li>StatefulSet</li><li>ManagedResource (Gardener specific)</li></ul><p>See the below example <a href="https://github.com/gardener/gardener-extension-provider-aws/blob/master/pkg/controller/healthcheck/add.go" target="_blank" rel="noreferrer">taken from the provider-aws</a>.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">health.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultRegisterExtensionForHealthCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               aws.Type,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               extensionsv1alpha1.SchemeGroupVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithKind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(extensionsv1alpha1.WorkerResource),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extensionsv1alpha1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{} },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               mgr, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// controller runtime manager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               opts, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// options for the health check controller</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">               nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// custom predicates</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extensionshealthcheckcontroller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HealthCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       general.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CheckManagedResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(genericactuator.McmShootResourceName): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gardencorev1beta1.ShootSystemComponentsHealthy),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       general.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CheckSeedDeployment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aws.MachineControllerManagerName):      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gardencorev1beta1.ShootEveryNodeReady),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SufficientNodesAvailable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():                                  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gardencorev1beta1.ShootEveryNodeReady),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               })</span></span></code></pre></div><p>This creates a health check controller that reconciles the <code>extensions.gardener.cloud/v1alpha1.Worker</code> resource with the spec.type &#39;aws&#39;. Three health check functions are registered that are executed during reconciliation. Each health check is mapped to a single <code>HealthConditionType</code> that results in conditions with the same <code>condition.type</code> (see below). To contribute to the Shoot&#39;s health, the following conditions can be used: <code>SystemComponentsHealthy</code>, <code>EveryNodeReady</code>, <code>ControlPlaneHealthy</code>, <code>ObservabilityComponentsHealthy</code>. In case of workerless <code>Shoot</code> the <code>EveryNodeReady</code> condition is not present, so it can&#39;t be used.</p><p>The Gardener/Gardenlet checks each extension for conditions matching these types. However, extensions are free to choose any <code>HealthConditionType</code>. For more information, see <a href="/docs/gardener/extensions/shoot-health-status-conditions/">Contributing to Shoot Health Status Conditions</a>.</p><p>A health check has to <a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/healthcheck/actuator.go" target="_blank" rel="noreferrer">satisfy the below interface</a>. You can find implementation examples in the <a href="https://github.com/gardener/gardener/tree/master/extensions/pkg/controller/healthcheck/general" target="_blank" rel="noreferrer">healtcheck folder</a>.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HealthCheck</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Check is the function that executes the actual health check</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NamespacedName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SingleCheckResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // InjectSeedClient injects the seed client</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    InjectSeedClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // InjectShootClient injects the shoot client</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    InjectShootClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // SetLoggerSuffix injects the logger</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    SetLoggerSuffix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // DeepCopy clones the healthCheck</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DeepCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HealthCheck</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The health check controller regularly (default: <code>30s</code>) reconciles the extension resource and executes the registered health checks for the dependent objects. As a result, the controller writes condition(s) to the status of the extension containing the health check result. In our example, two checks are mapped to <code>ShootEveryNodeReady</code> and one to <code>ShootSystemComponentsHealthy</code>, leading to conditions with two distinct <code>HealthConditionTypes</code> (condition.type):</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  conditions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20XX-10-28T08:17:21Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      lastUpdateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20XX-11-28T08:17:21Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(1/1) Health checks successful</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HealthCheckSuccessful</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SystemComponentsHealthy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20XX-10-28T08:17:21Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      lastUpdateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20XX-11-28T08:17:21Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(2/2) Health checks successful</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HealthCheckSuccessful</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;True&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EveryNodeReady</span></span></code></pre></div><p>Please note that there are four statuses: <code>True</code>, <code>False</code>, <code>Unknown</code>, and <code>Progressing</code>.</p><ul><li><code>True</code> should be used for successful health checks.</li><li><code>False</code> should be used for unsuccessful/failing health checks.</li><li><code>Unknown</code> should be used when there was an error trying to determine the health status.</li><li><code>Progressing</code> should be used to indicate that the health status did not succeed but for expected reasons (e.g., a cluster scale up/down could make the standard health check fail because something is wrong with the <code>Machines</code>, however, it&#39;s actually an expected situation and known to be completed within a few minutes.)</li></ul><p>Health checks that report <code>Progressing</code> should also provide a timeout, after which this &quot;progressing situation&quot; is expected to be completed. The health check library will automatically transition the status to <code>False</code> if the timeout was exceeded.</p><h2 id="additional-considerations" tabindex="-1">Additional Considerations <a class="header-anchor" href="#additional-considerations" aria-label="Permalink to &quot;Additional Considerations&quot;">​</a></h2><p>It is up to the extension to decide how to conduct health checks, though it is recommended to make use of the build-in health check functionality of <code>managedresources</code> for trivial checks. By <a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/worker/genericactuator/machine_controller_manager.go" target="_blank" rel="noreferrer">deploying the depending resources via managed resources</a>, the <a href="https://github.com/gardener/gardener-resource-manager" target="_blank" rel="noreferrer">gardener resource manager</a> conducts basic checks for different API objects out-of-the-box (e.g <code>Deployments</code>, <code>DaemonSets</code>, ...) - and writes health conditions.</p><p>By default, Gardener performs health checks for all the <code>ManagedResource</code>s created in the shoot namespaces. Their status will be aggregated to the <code>Shoot</code> conditions according to the following rules:</p><ul><li>Health checks of <code>ManagedResource</code> with <code>.spec.class=nil</code> are aggregated to the <code>SystemComponentsHealthy</code> condition</li><li>Health checks of <code>ManagedResource</code> with <code>.spec.class!=nil</code> are aggregated to the <code>ControlPlaneHealthy</code> condition unless the <code>ManagedResource</code> is labeled with <code>care.gardener.cloud/condition-type=&lt;other-condition-type&gt;</code>. In such case, it is aggregated to the <code>&lt;other-condition-type&gt;</code>.</li></ul><p>More sophisticated health checks should be implemented by the extension controller itself (implementing the <code>HealthCheck</code> interface).</p>`,24)]))}const g=e(n,[["render",h]]);export{d as __pageData,g as default};
