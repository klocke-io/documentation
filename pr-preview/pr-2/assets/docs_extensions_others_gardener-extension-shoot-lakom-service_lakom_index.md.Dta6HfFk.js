import{_ as t,c as i,o as s,a2 as o}from"./chunks/framework.Bfq10Vlj.js";const p=JSON.parse('{"title":"Lakom","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener-extension-shoot-lakom-service","github_subdir":"docs/usage","params":{"github_branch":"main"},"path_base_for_github_subdir":{"from":"content/docs/extensions/others/gardener-extension-shoot-lakom-service/lakom.md","to":"lakom.md"},"persona":"Users","title":"Lakom","prev":false,"next":false},"headers":[],"relativePath":"docs/extensions/others/gardener-extension-shoot-lakom-service/lakom/index.md","filePath":"docs/extensions/others/gardener-extension-shoot-lakom-service/lakom.md","lastUpdated":null}'),a={name:"docs/extensions/others/gardener-extension-shoot-lakom-service/lakom/index.md"};function d(r,e,n,c,l,h){return s(),i("div",null,e[0]||(e[0]=[o(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>Lakom is kubernetes admission controller which purpose is to implement <a href="https://github.com/sigstore/cosign" target="_blank" rel="noreferrer">cosign</a> image signature verification with public cosign key. It also takes care to resolve image tags to sha256 digests. A built-in cache mechanism can be enabled to reduce the load toward the OCI registry.</p><h2 id="flags" tabindex="-1">Flags <a class="header-anchor" href="#flags" aria-label="Permalink to &quot;Flags&quot;">​</a></h2><p>Lakom admission controller is configurable via command line flags. The trusted cosign public keys and the associated algorithms associated with them are set viq configuration file provided with the flag <code>--lakom-config-path</code>.</p><table tabindex="0"><thead><tr><th>Flag Name</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td><code>--bind-address</code></td><td>Address to bind to</td><td>&quot;0.0.0.0&quot;</td></tr><tr><td><code>--cache-refresh-interval</code></td><td>Refresh interval for the cached objects</td><td>30s</td></tr><tr><td><code>--cache-ttl</code></td><td>TTL for the cached objects. Set to 0, if cache has to be disabled</td><td>10m0s</td></tr><tr><td><code>--contention-profiling</code></td><td>Enable lock contention profiling, if profiling is enabled</td><td>false</td></tr><tr><td><code>--health-bind-address</code></td><td>Bind address for the health server</td><td>&quot;:8081&quot;</td></tr><tr><td><code>-h</code>, <code>--help</code></td><td>help for lakom</td><td></td></tr><tr><td><code>--insecure-allow-insecure-registries</code></td><td>If set, communication via HTTP with registries will be allowed.</td><td>false</td></tr><tr><td><code>--insecure-allow-untrusted-images</code></td><td>If set, the webhook will just return warning for the images without trusted signatures.</td><td>false</td></tr><tr><td><code>--kubeconfig</code></td><td>Paths to a kubeconfig. Only required if out-of-cluster.</td><td></td></tr><tr><td><code>--lakom-config-path</code></td><td>Path to file with lakom configuration containing cosign public keys used to verify the image signatures</td><td></td></tr><tr><td><code>--metrics-bind-address</code></td><td>Bind address for the metrics server</td><td>&quot;:8080&quot;</td></tr><tr><td><code>--port</code></td><td>Webhook server port</td><td>9443</td></tr><tr><td><code>--profiling</code></td><td>Enable profiling via web interface host:port/debug/pprof/</td><td>false</td></tr><tr><td><code>--tls-cert-dir</code></td><td>Directory with server TLS certificate and key (must contain a tls.crt and tls.key file</td><td></td></tr><tr><td><code>--use-only-image-pull-secrets</code></td><td>If set, only the credentials from the image pull secrets of the pod are used to access the OCI registry. Otherwise, the node identity and docker config are also used.</td><td>false</td></tr><tr><td><code>--version</code></td><td>prints version information and quits; --version=vX.Y.Z... sets the reported version</td><td></td></tr></tbody></table><h2 id="lakom-cosign-public-keys-configuration-file" tabindex="-1">Lakom Cosign Public Keys Configuration File <a class="header-anchor" href="#lakom-cosign-public-keys-configuration-file" aria-label="Permalink to &quot;Lakom Cosign Public Keys Configuration File&quot;">​</a></h2><p>Lakom cosign public keys configuration file should be YAML or JSON formatted. It can set multiple trusted keys, as each key must be given a name. The supported types of public keys are <code>RSA</code>, <code>ECDSA</code> and <code>Ed25519</code>. The <code>RSA</code> keys can be additionally configured with a signature verification algorithm specifying the scheme and hash function used during signature verification. As of now <code>ECDSA</code> and <code>Ed25519</code> keys cannot be configured with specific algorithm.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">publicKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example-public-key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RSASSA-PSS-SHA256</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|-</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    -----BEGIN PUBLIC KEY-----</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAPeQXbIWMMXYV+9+j9b4jXTflnpfwn4E</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    GMrmqYVhm0sclXb2FPP5aV/NFH6SZdHDZcT8LCNsNgxzxV4N+UE/JIsCAwEAAQ==</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    -----END PUBLIC KEY-----</span></span></code></pre></div><p>Here:</p><ul><li><code>name</code> is logical human friendly name of the key.</li><li><code>algorithm</code> is the algorithm that has to be used to verify the signature, see <a href="/docs/extensions/others/gardener-extension-shoot-lakom-service/lakom/#supported-rsa-signature-verification-algorithms">Supported RSA Signature Verification Algorithms</a> for the list of supported algorithms.</li><li><code>key</code> is the cryptographic public key that will be used for image signature validation.</li></ul><h3 id="supported-rsa-signature-verification-algorithms" tabindex="-1">Supported RSA Signature Verification Algorithms <a class="header-anchor" href="#supported-rsa-signature-verification-algorithms" aria-label="Permalink to &quot;Supported RSA Signature Verification Algorithms&quot;">​</a></h3><ul><li><code>RSASSA-PKCS1-v1_5-SHA256</code>: uses <code>RSASSA-PKCS1-v1_5</code> scheme with <code>SHA256</code> hash func</li><li><code>RSASSA-PKCS1-v1_5-SHA384</code>: uses <code>RSASSA-PKCS1-v1_5</code> scheme with <code>SHA384</code> hash func</li><li><code>RSASSA-PKCS1-v1_5-SHA512</code>: uses <code>RSASSA-PKCS1-v1_5</code> scheme with <code>SHA512</code> hash func</li><li><code>RSASSA-PSS-SHA256</code>: uses <code>RSASSA-PSS</code> scheme with <code>SHA256</code> hash func</li><li><code>RSASSA-PSS-SHA384</code>: uses <code>RSASSA-PSS</code> scheme with <code>SHA384</code> hash func</li><li><code>RSASSA-PSS-SHA512</code>: uses <code>RSASSA-PSS</code> scheme with <code>SHA512</code> hash func</li></ul><h3 id="supported-resources-for-verification" tabindex="-1">Supported Resources for Verification <a class="header-anchor" href="#supported-resources-for-verification" aria-label="Permalink to &quot;Supported Resources for Verification&quot;">​</a></h3><p>By default, Lakom validates only <code>Pod</code> resources in the clusters that it covers. However, it also has the capabilities to validate the following Gardener specific resources:</p><ul><li><code>controllerdeployments.core.gardener.cloud/v1</code></li><li><code>gardenlets.seedmanagement.gardener.cloud/v1alpha1</code></li><li><code>extensions.operator.gardener.cloud/v1alpha1</code></li></ul><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>When deploying Lakom via the helm chart in <code>/charts/lakom</code>, the <code>admissionConfig.rules</code> key can be fully customized to include any of the listed resources above. Make sure that they are registered with the same group &amp; versions as the ones listed above. Any difference will cause Lakom to skip validation and approve the request, making it a security risk.</p></div>`,16)]))}const g=t(a,[["render",d]]);export{p as __pageData,g as default};
