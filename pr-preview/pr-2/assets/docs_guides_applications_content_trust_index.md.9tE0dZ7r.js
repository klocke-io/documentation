import{_ as i,c as a,o as t,a2 as e}from"./chunks/framework.Bfq10Vlj.js";const n="data:image/svg+xml,%3c?xml%20version='1.0'%20encoding='UTF-8'?%3e%3csvg%20width='594px'%20height='278px'%20viewBox='0%200%20594%20278'%20version='1.1'%20xmlns='http://www.w3.org/2000/svg'%20xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3c!--%20Generator:%20Sketch%2048.2%20(47327)%20-%20http://www.bohemiancoding.com/sketch%20--%3e%3ctitle%3ehowto-content-trust%3c/title%3e%3cdesc%3eCreated%20with%20Sketch.%3c/desc%3e%3cdefs%3e%3c/defs%3e%3cg%20id='Page-1'%20stroke='none'%20stroke-width='1'%20fill='none'%20fill-rule='evenodd'%3e%3cg%20id='howto-content-trust'%20stroke='%23009F76'%3e%3cg%20id='Group'%20transform='translate(361.000000,%20114.000000)%20rotate(-24.000000)%20translate(-361.000000,%20-114.000000)%20translate(143.000000,%2026.000000)'%3e%3cpath%20d='M336,104.427402%20L336,53.8733135%20L295.117023,3.47991944%20C294.357503,2.54371665%20293.216255,2%20292.010708,2%20L6,2%20C3.790861,2%202,3.790861%202,6%20L2,155%20C2,157.209139%203.790861,159%206,159%20L291.920607,159%20C293.160306,159%20294.329943,158.425194%20295.087321,157.443751%20L336,104.427402%20Z'%20id='Rectangle'%20stroke-width='4'%3e%3c/path%3e%3cpath%20d='M75,49.5%20L165,49.5'%20id='Line'%20stroke-width='4'%20stroke-linecap='round'%20stroke-linejoin='round'%3e%3c/path%3e%3cpath%20d='M47,82.5%20L186,82.5'%20id='Line'%20stroke-width='4'%20stroke-linecap='round'%20stroke-linejoin='round'%3e%3c/path%3e%3cpath%20d='M73,115.5%20L168,115.5'%20id='Line'%20stroke-width='4'%20stroke-linecap='round'%20stroke-linejoin='round'%3e%3c/path%3e%3cellipse%20id='Oval'%20stroke-width='5'%20fill='%23FFFFFF'%20cx='296.5'%20cy='81'%20rx='21.5'%20ry='20'%3e%3c/ellipse%3e%3cpath%20d='M286,119%20C286,130.045695%20319.578644,139%20361,139%20C402.421356,139%20436,130.045695%20436,119%20C436,107.954305%20402.421356,99%20361,99%20C346.602389,99%20333.15232,100.081843%20321.730576,101.95732'%20id='Oval'%20stroke-width='7'%20transform='translate(361.000000,%20119.000000)%20rotate(32.000000)%20translate(-361.000000,%20-119.000000)%20'%3e%3c/path%3e%3c/g%3e%3c/g%3e%3c/g%3e%3c/svg%3e",r="/assets/howto-content-trust-replace.41WUz4XV.svg",u=JSON.parse('{"title":"Integrity and Immutability","description":"Ensure that you always get the right image","frontmatter":{"category":"Docker Registry","description":"Ensure that you always get the right image","github_repo":"https://github.com/gardener/documentation","github_subdir":"website/documentation/guides/applications","level":"intermediate","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/guides/applications/content_trust.md","to":"content_trust.md"},"scope":"app-developer","title":"Integrity and Immutability","prev":false,"next":false},"headers":[],"relativePath":"docs/guides/applications/content_trust/index.md","filePath":"docs/guides/applications/content_trust.md","lastUpdated":null}'),l={name:"docs/guides/applications/content_trust/index.md"};function h(p,s,o,d,k,c){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="integrity-and-immutability" tabindex="-1">Integrity and Immutability <a class="header-anchor" href="#integrity-and-immutability" aria-label="Permalink to &quot;Integrity and Immutability&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>When transferring data among networked systems, <strong>trust is a central concern</strong>. In particular, when communicating over an untrusted medium such as the internet, it is critical to ensure the <strong>integrity and immutability</strong> of all the data a system operates on. Especially if you use Docker Engine to push and pull images (data) to a <strong>public registry</strong>.</p><p>This immutability offers you a guarantee that any and all containers that you instantiate will be absolutely identical at inception. Surprise surprise, deterministic operations.</p><h2 id="a-lesson-in-deterministic-ops" tabindex="-1">A Lesson in Deterministic Ops <a class="header-anchor" href="#a-lesson-in-deterministic-ops" aria-label="Permalink to &quot;A Lesson in Deterministic Ops&quot;">​</a></h2><p>Docker Tags are about as reliable and disposable as this guy down here.</p><p><img src="'+n+`" alt="docker-labels"></p><p>Seems simple enough. You have probably already deployed hundreds of YAML&#39;s or started endless counts of Docker containers.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mynginx1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:1.13.9</span></span></code></pre></div><p>or</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deployment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rss-site</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">web</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">web</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      containers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">front-end</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx:1.13.9</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">containerPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span></span></code></pre></div><p><strong>But Tags are mutable and humans are prone to error. Not a good combination.</strong> Here, we’ll dig into why the use of tags can be dangerous and how to deploy your containers across a pipeline and across environments with <strong>determinism in mind</strong>.</p><p>Let&#39;s say that you want to ensure that whether it’s today or 5 years from now, that specific deployment uses the very same image that you have defined. Any updates or newer versions of an image should be executed as a new deployment. <strong>The solution: digest</strong></p><p>A digest takes the place of the tag when pulling an image. For example, to pull the above image by digest, run the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mynginx1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx@sha256:4771d09578c7c6a65299e110b3ee1c0a2592f5ea2618d23e4ffe7a4cab1ce5de</span></span></code></pre></div><p>You can now make sure that the same image is always loaded at every deployment. It doesn&#39;t matter if the TAG of the image has been changed or not. <strong>This solves the problem of repeatability.</strong></p><h2 id="content-trust" tabindex="-1">Content Trust <a class="header-anchor" href="#content-trust" aria-label="Permalink to &quot;Content Trust&quot;">​</a></h2><p>However, there’s an additionally hidden danger. It is possible for an attacker to replace a server image with another one infected with malware.</p><p><img src="`+r+'" alt="docker-content-trust"></p><p><a href="https://docs.docker.com/engine/security/trust/content_trust/" target="_blank" rel="noreferrer">Docker Content trust</a> gives you the ability to verify both the integrity and the publisher of all the data received from a registry over any channel.</p><p>Prior to version 1.8, Docker didn’t have a way to verify the authenticity of a server image. But in v1.8, a new feature called <strong>Docker Content Trust</strong> was introduced to automatically sign and verify the signature of a publisher.</p><p>So, as soon as a server image is downloaded, it is cross-checked with the signature of the publisher to see if someone tampered with it in any way. <strong>This solves the problem of trust.</strong></p><p>In addition, you should scan all images for known vulnerabilities.</p>',23)]))}const y=i(l,[["render",h]]);export{u as __pageData,y as default};
