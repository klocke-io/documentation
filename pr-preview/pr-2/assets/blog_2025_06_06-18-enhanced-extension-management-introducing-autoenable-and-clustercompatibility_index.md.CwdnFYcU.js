import{_ as a,c as n,o as i,a2 as t}from"./chunks/framework.B8WFj13S.js";const u=JSON.parse('{"title":"Enhanced Extension Management: Introducing autoEnable and clusterCompatibility","description":"","frontmatter":{"aliases":["/blog/2025/06/18/enhanced-extension-management-introducing-autoenable-and-clustercompatibility"],"authors":[{"avatar":"https://avatars.githubusercontent.com/timuthy","login":"timuthy","name":"Tim Usner"}],"github_repo":"https://github.com/gardener/documentation","github_subdir":"website/blog/2025/06","linkTitle":"Enhanced Extension Management: Introducing `autoEnable` and `clusterCompatibility`","newsSubtitle":"June 18, 2025","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/blog/2025/06/06-18-enhanced-extension-management-introducing-autoenable-and-clustercompatibility.md","to":"06-18-enhanced-extension-management-introducing-autoenable-and-clustercompatibility.md"},"publishdate":"2025-06-18","title":"Enhanced Extension Management: Introducing `autoEnable` and `clusterCompatibility`"},"headers":[],"relativePath":"blog/2025/06/06-18-enhanced-extension-management-introducing-autoenable-and-clustercompatibility/index.md","filePath":"blog/2025/06/06-18-enhanced-extension-management-introducing-autoenable-and-clustercompatibility.md","lastUpdated":null}'),s={name:"blog/2025/06/06-18-enhanced-extension-management-introducing-autoenable-and-clustercompatibility/index.md"};function o(l,e,r,d,c,p){return i(),n("div",null,e[0]||(e[0]=[t(`<h1 id="enhanced-extension-management-introducing-autoenable-and-clustercompatibility" tabindex="-1">Enhanced Extension Management: Introducing <code>autoEnable</code> and <code>clusterCompatibility</code> <a class="header-anchor" href="#enhanced-extension-management-introducing-autoenable-and-clustercompatibility" aria-label="Permalink to &quot;Enhanced Extension Management: Introducing \`autoEnable\` and \`clusterCompatibility\`&quot;">​</a></h1><p>Gardener&#39;s extension mechanism has been enhanced with two new fields in the <code>ControllerRegistration</code> and <code>operatorv1alpha1.Extension</code> APIs, offering operators more granular control and improved safety when managing extensions. These changes, detailed in <a href="https://github.com/gardener/gardener/pull/11982" target="_blank" rel="noreferrer">PR #11982</a>, introduce <code>autoEnable</code> and <code>clusterCompatibility</code> for resources of <code>kind: Extension</code>.</p><h3 id="fine-grained-automatic-enablement-with-autoenable" tabindex="-1">Fine-Grained Automatic Enablement with <code>autoEnable</code> <a class="header-anchor" href="#fine-grained-automatic-enablement-with-autoenable" aria-label="Permalink to &quot;Fine-Grained Automatic Enablement with \`autoEnable\`&quot;">​</a></h3><p>Previously, operators could use the <code>globallyEnabled</code> field to automatically enable an extension resource for all shoot clusters. This field is now deprecated and will be removed in Gardener <code>v1.123</code>.</p><p>The new <code>autoEnable</code> field replaces <code>globallyEnabled</code> and provides more flexibility. Operators can now specify an array of cluster types for which an extension should be automatically enabled. The supported cluster types are:</p><ul><li><code>shoot</code></li><li><code>seed</code></li><li><code>garden</code></li></ul><p>This allows, for example, an extension to be automatically enabled for all seed clusters or a combination of cluster types, which was not possible with the boolean <code>globallyEnabled</code> field.</p><p>If <code>autoEnable</code> includes <code>shoot</code>, it behaves like the old <code>globallyEnabled: true</code> for shoot clusters. If an extension is not set to <code>autoEnable</code> for a specific cluster type, it must be explicitly enabled in the respective cluster&#39;s manifest (e.g., <code>Shoot</code> manifest for a shoot cluster).</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example in ControllerRegistration or operatorv1alpha1.Extension spec.resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Extension</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-custom-extension</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  autoEnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">seed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # globallyEnabled: true # This field is deprecated</span></span></code></pre></div><h3 id="ensuring-correct-deployments-with-clustercompatibility" tabindex="-1">Ensuring Correct Deployments with <code>clusterCompatibility</code> <a class="header-anchor" href="#ensuring-correct-deployments-with-clustercompatibility" aria-label="Permalink to &quot;Ensuring Correct Deployments with \`clusterCompatibility\`&quot;">​</a></h3><p>To enhance safety and prevent misconfigurations, the <code>clusterCompatibility</code> field has been introduced. This field allows extension developers and operators to explicitly define which cluster types a generic Gardener extension is compatible with. The supported cluster types are:</p><ul><li><code>shoot</code></li><li><code>seed</code></li><li><code>garden</code></li></ul><p>Gardener will validate that an extension is only enabled or automatically enabled for cluster types listed in its <code>clusterCompatibility</code> definition. If <code>clusterCompatibility</code> is not specified for an <code>Extension</code> kind, it defaults to <code>[&#39;shoot&#39;]</code>. This provides an important safeguard, ensuring that extensions are not inadvertently deployed to environments they are not designed for.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example in ControllerRegistration or operatorv1alpha1.Extension spec.resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Extension</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-custom-extension</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  autoEnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  clusterCompatibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Defines where this extension can be used</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">seed</span></span></code></pre></div><h3 id="important-considerations-for-operators" tabindex="-1">Important Considerations for Operators <a class="header-anchor" href="#important-considerations-for-operators" aria-label="Permalink to &quot;Important Considerations for Operators&quot;">​</a></h3><ul><li><strong>Deprecation of <code>globallyEnabled</code></strong>: Operators should migrate from <code>globallyEnabled</code> to the new <code>autoEnable</code> field for <code>kind: Extension</code> resources. <code>globallyEnabled</code> is deprecated and scheduled for removal in Gardener <code>v1.123</code>.</li><li><strong>Breaking Change for Garden Extensions</strong>: The introduction of <code>clusterCompatibility</code> is a breaking change for operators managing garden extensions via <code>gardener-operator</code>. If your <code>Garden</code> custom resource specifies <code>spec.extensions</code>, you must update the corresponding <code>operatorv1alpha1.Extension</code> resources to include <code>garden</code> in the <code>clusterCompatibility</code> array for those extensions intended to run in the garden cluster.</li></ul><p>These new fields provide more precise control over extension lifecycle management across different cluster types within the Gardener ecosystem, improving both operational flexibility and system stability.</p><p>For further details, you can review the <a href="https://github.com/gardener/gardener/pull/11982" target="_blank" rel="noreferrer">original pull request (#11982)</a> and watch the <a href="https://youtu.be/HguO_KY86ac?t=2483" target="_blank" rel="noreferrer">demonstration in the Gardener Review Meeting (starting at 41:23)</a>.</p>`,18)]))}const g=a(s,[["render",o]]);export{u as __pageData,g as default};
