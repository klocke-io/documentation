import{_ as s,c as a,o as t,a2 as o}from"./chunks/framework.B8WFj13S.js";const k=JSON.parse('{"title":"Network Policies","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/operations","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/network_policies.md","to":"network_policies.md"},"persona":"Operators","title":"Network Policies","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/network_policies/index.md","filePath":"docs/gardener/network_policies.md","lastUpdated":null}'),i={name:"docs/gardener/network_policies/index.md"};function n(r,e,l,d,c,p){return t(),a("div",null,e[0]||(e[0]=[o(`<h1 id="networkpolicys-in-garden-seed-shoot-clusters" tabindex="-1"><code>NetworkPolicy</code>s In Garden, Seed, Shoot Clusters <a class="header-anchor" href="#networkpolicys-in-garden-seed-shoot-clusters" aria-label="Permalink to &quot;\`NetworkPolicy\`s In Garden, Seed, Shoot Clusters&quot;">​</a></h1><p>This document describes which <a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/" target="_blank" rel="noreferrer">Kubernetes <code>NetworkPolicy</code>s</a> deployed by Gardener into the various clusters.</p><h2 id="garden-cluster" tabindex="-1">Garden Cluster <a class="header-anchor" href="#garden-cluster" aria-label="Permalink to &quot;Garden Cluster&quot;">​</a></h2><p><em>(via <code>gardener-operator</code> and <code>gardener-resource-manager</code>)</em></p><p>The <code>gardener-operator</code> runs a <a href="/documentation/pr-preview/pr-2/docs/gardener/concepts/operator/#networkpolicy-controller-registrar"><code>NetworkPolicy</code> controller</a> which is responsible for the following namespaces:</p><ul><li><code>garden</code></li><li><code>istio-system</code></li><li><code>*istio-ingress-*</code></li><li><code>shoot-*</code></li><li><code>extension-*</code> (in case the garden cluster is a seed cluster at the same time)</li></ul><p>It deploys the following so-called &quot;general <code>NetworkPolicy</code>s&quot;:</p><table tabindex="0"><thead><tr><th>Name</th><th>Purpose</th></tr></thead><tbody><tr><td><code>deny-all</code></td><td><a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-deny-all-ingress-and-all-egress-traffic" target="_blank" rel="noreferrer">Denies all ingress and egress traffic</a> for all pods in this namespace. Hence, all traffic must be explicitly allowed.</td></tr><tr><td><code>allow-to-dns</code></td><td>Allows egress traffic from pods labeled with <code>networking.gardener.cloud/to-dns=allowed</code> to DNS pods running in the <code>kube-system</code> namespace. In practice, most of the pods performing network egress traffic need this label.</td></tr><tr><td><code>allow-to-runtime-apiserver</code></td><td>Allows egress traffic from pods labeled with <code>networking.gardener.cloud/to-runtime-apiserver=allowed</code> to the API server of the runtime cluster.</td></tr><tr><td><code>allow-to-blocked-cidrs</code></td><td>Allows egress traffic from pods labeled with <code>networking.gardener.cloud/to-blocked-cidrs=allowed</code> to explicitly blocked addresses configured by human operators (configured via <code>.spec.networking.blockedCIDRs</code> in the <code>Seed</code>). For instance, this can be used to block the cloud provider&#39;s metadata service.</td></tr><tr><td><code>allow-to-public-networks</code></td><td>Allows egress traffic from pods labeled with <code>networking.gardener.cloud/to-public-networks=allowed</code> to all public network IPs, except for private networks (RFC1918), carrier-grade NAT (RFC6598), and explicitly blocked addresses configured by human operators for all pods labeled with <code>networking.gardener.cloud/to-public-networks=allowed</code>. In practice, this blocks egress traffic to all networks in the cluster and only allows egress traffic to public IPv4 addresses.</td></tr><tr><td><code>allow-to-private-networks</code></td><td>Allows egress traffic from pods labeled with <code>networking.gardener.cloud/to-private-networks=allowed</code> to the private networks (RFC1918) and carrier-grade NAT (RFC6598) except for cluster-specific networks (configured via <code>.spec.networks</code> in the <code>Seed</code>).</td></tr></tbody></table><p>Apart from those, the <code>gardener-operator</code> also enables the <a href="/documentation/pr-preview/pr-2/docs/gardener/concepts/resource-manager/#networkpolicy-controller"><code>NetworkPolicy</code> controller of <code>gardener-resource-manager</code></a>. Please find more information in the linked document. In summary, most of the pods that initiate connections with other pods will have labels with <code>networking.resources.gardener.cloud/</code> prefixes. This way, they leverage the automatically created <code>NetworkPolicy</code>s by the controller. As a result, in most cases no special/custom-crafted <code>NetworkPolicy</code>s must be created anymore.</p><h3 id="logging-monitoring" tabindex="-1">Logging &amp; Monitoring <a class="header-anchor" href="#logging-monitoring" aria-label="Permalink to &quot;Logging &amp; Monitoring&quot;">​</a></h3><p>As part of the garden reconciliation flow, the <code>gardener-operator</code> deploys various Prometheus instances into the <code>garden</code> namespace. Each pod that should be scraped for metrics by these instances must have a <code>Service</code> which is annotated with</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/from-all-garden-scrape-targets-allowed-ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;port&quot;:&lt;metrics-port-on-pod&gt;,&quot;protocol&quot;:&quot;&lt;protocol, typically TCP&gt;&quot;}]&#39;</span></span></code></pre></div><p>If the respective pod is not running in the <code>garden</code> namespace, the <code>Service</code> needs these annotations in addition:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/namespace-selectors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;matchLabels&quot;:{&quot;kubernetes.io/metadata.name&quot;:&quot;garden&quot;}}]&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/pod-label-selector-namespace-alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">extensions</span></span></code></pre></div><p>This automatically allows the needed network traffic from the respective Prometheus pods.</p><h2 id="seed-cluster" tabindex="-1">Seed Cluster <a class="header-anchor" href="#seed-cluster" aria-label="Permalink to &quot;Seed Cluster&quot;">​</a></h2><p><em>(via <code>gardenlet</code> and <code>gardener-resource-manager</code>)</em></p><p>In seed clusters it works the same way as in the garden cluster managed by <code>gardener-operator</code>. When a seed cluster is the garden cluster at the same time, <code>gardenlet</code> does not enable the <code>NetworkPolicy</code> controller (since <code>gardener-operator</code> already runs it). Otherwise, it uses the exact same controller and code like <code>gardener-operator</code>, resulting in the same behaviour in both garden and seed clusters.</p><h3 id="logging-monitoring-1" tabindex="-1">Logging &amp; Monitoring <a class="header-anchor" href="#logging-monitoring-1" aria-label="Permalink to &quot;Logging &amp; Monitoring&quot;">​</a></h3><h4 id="seed-system-namespaces" tabindex="-1">Seed System Namespaces <a class="header-anchor" href="#seed-system-namespaces" aria-label="Permalink to &quot;Seed System Namespaces&quot;">​</a></h4><p>As part of the seed reconciliation flow, the <code>gardenlet</code> deploys various Prometheus instances into the <code>garden</code> namespace. See also <a href="/documentation/pr-preview/pr-2/docs/gardener/monitoring-stack/">this document</a> for more information. Each pod that should be scraped for metrics by these instances must have a <code>Service</code> which is annotated with</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/from-all-seed-scrape-targets-allowed-ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;port&quot;:&lt;metrics-port-on-pod&gt;,&quot;protocol&quot;:&quot;&lt;protocol, typically TCP&gt;&quot;}]&#39;</span></span></code></pre></div><p>If the respective pod is not running in the <code>garden</code> namespace, the <code>Service</code> needs these annotations in addition:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/namespace-selectors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;matchLabels&quot;:{&quot;kubernetes.io/metadata.name&quot;:&quot;garden&quot;}}]&#39;</span></span></code></pre></div><p>If the respective pod is running in an <code>extension-*</code> namespace, the <code>Service</code> needs this annotation in addition:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/pod-label-selector-namespace-alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">extensions</span></span></code></pre></div><p>This automatically allows the needed network traffic from the respective Prometheus pods.</p><h4 id="shoot-namespaces" tabindex="-1">Shoot Namespaces <a class="header-anchor" href="#shoot-namespaces" aria-label="Permalink to &quot;Shoot Namespaces&quot;">​</a></h4><p>As part of the shoot reconciliation flow, the <code>gardenlet</code> deploys a shoot-specific Prometheus into the shoot namespace. Each pod that should be scraped for metrics must have a <code>Service</code> which is annotated with</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/from-all-scrape-targets-allowed-ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;port&quot;:&lt;metrics-port-on-pod&gt;,&quot;protocol&quot;:&quot;&lt;protocol, typically TCP&gt;&quot;}]&#39;</span></span></code></pre></div><p>This automatically allows the network traffic from the Prometheus pod.</p><h3 id="webhook-servers" tabindex="-1">Webhook Servers <a class="header-anchor" href="#webhook-servers" aria-label="Permalink to &quot;Webhook Servers&quot;">​</a></h3><p>Components serving webhook handlers that must be reached by <code>kube-apiserver</code>s of the virtual garden cluster or shoot clusters just need to annotate their <code>Service</code> as follows:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/from-all-webhook-targets-allowed-ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;port&quot;:&lt;server-port-on-pod&gt;,&quot;protocol&quot;:&quot;&lt;protocol, typically TCP&gt;&quot;}]&#39;</span></span></code></pre></div><p>This automatically allows the network traffic from the API server pods.</p><p>In case the servers run in a different namespace than the <code>kube-apiserver</code>s, the following annotations are needed:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/from-all-webhook-targets-allowed-ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;port&quot;:&lt;server-port-on-pod&gt;,&quot;protocol&quot;:&quot;&lt;protocol, typically TCP&gt;&quot;}]&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/pod-label-selector-namespace-alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">extensions</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # for the virtual garden cluster:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/namespace-selectors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;matchLabels&quot;:{&quot;kubernetes.io/metadata.name&quot;:&quot;garden&quot;}}]&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # for shoot clusters:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networking.resources.gardener.cloud/namespace-selectors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[{&quot;matchLabels&quot;:{&quot;gardener.cloud/role&quot;:&quot;shoot&quot;}}]&#39;</span></span></code></pre></div><h2 id="additional-namespace-coverage-in-garden-seed-cluster" tabindex="-1">Additional Namespace Coverage in Garden/Seed Cluster <a class="header-anchor" href="#additional-namespace-coverage-in-garden-seed-cluster" aria-label="Permalink to &quot;Additional Namespace Coverage in Garden/Seed Cluster&quot;">​</a></h2><p>In some cases, garden or seed clusters might run components in dedicated namespaces which are not covered by the controller by default (see list above). Still, it might(/should) be desired to also include such &quot;custom namespaces&quot; into the control of the <code>NetworkPolicy</code> controllers.</p><p>In order to do so, human operators can adapt the component configs of <code>gardener-operator</code> or <code>gardenlet</code> by providing label selectors for additional namespaces:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">controllers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networkPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    additionalNamespaceSelectors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bar</span></span></code></pre></div><h3 id="communication-with-kube-apiserver-for-components-in-custom-namespaces" tabindex="-1">Communication With <code>kube-apiserver</code> For Components In Custom Namespaces <a class="header-anchor" href="#communication-with-kube-apiserver-for-components-in-custom-namespaces" aria-label="Permalink to &quot;Communication With \`kube-apiserver\` For Components In Custom Namespaces&quot;">​</a></h3><h3 id="egress-traffic" tabindex="-1">Egress Traffic <a class="header-anchor" href="#egress-traffic" aria-label="Permalink to &quot;Egress Traffic&quot;">​</a></h3><p>Component running in such custom namespaces might need to initiate the communication with the <code>kube-apiserver</code>s of the virtual garden cluster or a shoot cluster. In order to achieve this, their custom namespace must be labeled with <code>networking.gardener.cloud/access-target-apiserver=allowed</code>. This will make the <code>NetworkPolicy</code> controllers automatically provisioning the required policies into their namespace.</p><p>As a result, the respective component pods just need to be labeled with</p><ul><li><code>networking.resources.gardener.cloud/to-garden-virtual-garden-kube-apiserver-tcp-443=allowed</code> (virtual garden cluster)</li><li><code>networking.resources.gardener.cloud/to-all-shoots-kube-apiserver-tcp-443=allowed</code> (shoot clusters)</li></ul><h3 id="ingress-traffic" tabindex="-1">Ingress Traffic <a class="header-anchor" href="#ingress-traffic" aria-label="Permalink to &quot;Ingress Traffic&quot;">​</a></h3><p>Components running in such custom namespaces might serve webhook handlers that must be reached by the <code>kube-apiserver</code>s of the virtual garden cluster or a shoot cluster. In order to achieve this, their <code>Service</code> must be annotated. Please refer to <a href="/documentation/pr-preview/pr-2/docs/gardener/network_policies/#webhook-servers">this section</a> for more information.</p><h2 id="shoot-cluster" tabindex="-1">Shoot Cluster <a class="header-anchor" href="#shoot-cluster" aria-label="Permalink to &quot;Shoot Cluster&quot;">​</a></h2><p><em>(via <code>gardenlet</code>)</em></p><p>For shoot clusters, the concepts mentioned above don&#39;t apply and are not enabled. Instead, <code>gardenlet</code> only deploys a few &quot;custom&quot; <code>NetworkPolicy</code>s for the shoot system components running in the <code>kube-system</code> namespace. All other namespaces in the shoot cluster do not contain network policies deployed by <code>gardenlet</code>.</p><p>As a best practice, every pod deployed into the <code>kube-system</code> namespace should use appropriate <code>NetworkPolicy</code> in order to only allow <strong>required</strong> network traffic. Therefore, pods should have labels matching to the selectors of the available network policies.</p><p><code>gardenlet</code> deploys the following <code>NetworkPolicy</code>s:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NAME                                       POD-SELECTOR</span></span>
<span class="line"><span>gardener.cloud--allow-dns                  k8s-app in (kube-dns)</span></span>
<span class="line"><span>gardener.cloud--allow-from-seed            networking.gardener.cloud/from-seed=allowed</span></span>
<span class="line"><span>gardener.cloud--allow-to-dns               networking.gardener.cloud/to-dns=allowed</span></span>
<span class="line"><span>gardener.cloud--allow-to-apiserver         networking.gardener.cloud/to-apiserver=allowed</span></span>
<span class="line"><span>gardener.cloud--allow-to-from-nginx        app=nginx-ingress</span></span>
<span class="line"><span>gardener.cloud--allow-to-kubelet           networking.gardener.cloud/to-kubelet=allowed</span></span>
<span class="line"><span>gardener.cloud--allow-to-public-networks   networking.gardener.cloud/to-public-networks=allowed</span></span>
<span class="line"><span>gardener.cloud--allow-vpn                  app=vpn-shoot</span></span></code></pre></div><p>Note that a <code>deny-all</code> policy will not be created by <code>gardenlet</code>. Shoot owners can create it manually if needed/desired. Above listed <code>NetworkPolicy</code>s ensure that the traffic for the shoot system components is allowed in case such <code>deny-all</code> policies is created.</p><h3 id="webhook-servers-in-shoot-clusters" tabindex="-1">Webhook Servers in Shoot Clusters <a class="header-anchor" href="#webhook-servers-in-shoot-clusters" aria-label="Permalink to &quot;Webhook Servers in Shoot Clusters&quot;">​</a></h3><p>Shoot components serving webhook handlers must be reached by <code>kube-apiserver</code>s of the shoot cluster. However, the control plane components, e.g. <code>kube-apiserver</code>, run on the seed cluster decoupled by a <a href="https://github.com/gardener/gardener/blob/master/docs/proposals/14-reversed-cluster-vpn.md" target="_blank" rel="noreferrer">VPN connection</a>. Therefore, shoot components serving webhook handlers need to allow the VPN endpoints in the shoot cluster as clients to allow <code>kube-apiserver</code>s to call them.</p><p>For the <code>kube-system</code> namespace, the network policy <code>gardener.cloud--allow-from-seed</code> fulfils the purpose to allow pods to mark themselves as targets for such calls, allowing corresponding traffic to pass through.</p><p>For custom namespaces, operators can use the network policy <code>gardener.cloud--allow-from-seed</code> as a template. Please note that the label selector may change over time, i.e. with Gardener version updates. This is why a simpler variant with a reduced label selector like the example below is recommended:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">networking.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NetworkPolicy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">allow-from-seed</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">custom-namespace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ingress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">namespaceSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          gardener.cloud/purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kube-system</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      podSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        matchLabels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vpn-shoot</span></span></code></pre></div><h2 id="implications-for-gardener-extensions" tabindex="-1">Implications for Gardener Extensions <a class="header-anchor" href="#implications-for-gardener-extensions" aria-label="Permalink to &quot;Implications for Gardener Extensions&quot;">​</a></h2><p>Gardener extensions sometimes need to deploy additional components into the shoot namespace in the seed cluster hosting the control plane. For example, the <a href="https://github.com/gardener/gardener-extension-provider-aws" target="_blank" rel="noreferrer"><code>gardener-extension-provider-aws</code></a> deploys the <code>cloud-controller-manager</code> into the shoot namespace. In most cases, such pods require network policy labels to allow the traffic they are initiating.</p><p>For components deployed in the <code>kube-system</code> namespace of the shoots (e.g., CNI plugins or CSI drivers, etc.), custom <code>NetworkPolicy</code>s might be required to ensure the respective components can still communicate in case the user creates a <code>deny-all</code> policy.</p>`,63)]))}const g=s(i,[["render",n]]);export{k as __pageData,g as default};
