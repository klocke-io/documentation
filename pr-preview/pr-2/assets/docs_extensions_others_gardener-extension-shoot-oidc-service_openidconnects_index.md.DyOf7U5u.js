import{_ as e,c as i,o as n,a2 as a}from"./chunks/framework.B8WFj13S.js";const k=JSON.parse('{"title":"Openidconnects","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener-extension-shoot-oidc-service","github_subdir":"docs/usage","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/extensions/others/gardener-extension-shoot-oidc-service/openidconnects.md","to":"openidconnects.md"},"persona":"Users","title":"Openidconnects","prev":false,"next":false},"headers":[],"relativePath":"docs/extensions/others/gardener-extension-shoot-oidc-service/openidconnects/index.md","filePath":"docs/extensions/others/gardener-extension-shoot-oidc-service/openidconnects.md","lastUpdated":null}'),t={name:"docs/extensions/others/gardener-extension-shoot-oidc-service/openidconnects/index.md"};function o(l,s,p,r,h,d){return n(),i("div",null,s[0]||(s[0]=[a(`<h1 id="register-openid-connect-provider-in-shoot-clusters" tabindex="-1">Register OpenID Connect provider in Shoot Clusters <a class="header-anchor" href="#register-openid-connect-provider-in-shoot-clusters" aria-label="Permalink to &quot;Register OpenID Connect provider in Shoot Clusters&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Within a shoot cluster, it is possible to dynamically register OpenID Connect providers. It is necessary that the Gardener installation your shoot cluster runs in is equipped with a <code>shoot-oidc-service</code> extension. Please ask your Gardener operator if the extension is available in your environment.</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>Kubernetes v1.29 introduced support for <a href="https://kubernetes.io/blog/2024/04/25/structured-authentication-moves-to-beta/" target="_blank" rel="noreferrer">Structured Authentication</a>. Gardener allows the use of this feature for shoot clusters with Kubernetes version &gt;= 1.30.</p><p>Structured Authentication should be preferred over the Gardener OIDC Extension in case:</p><ul><li>you do not need more than 64 authenticators (a limitation that is tracked in <a href="https://github.com/kubernetes/kubernetes/issues/122809" target="_blank" rel="noreferrer">https://github.com/kubernetes/kubernetes/issues/122809</a>)</li><li>you do not need to register an issuer twice (anyways not recommended since it can lead to misconfiguration and user impersonation if done poorly)</li><li>you need the ability to write custom expressions to map and validate claims</li><li>you need support for multiple audiences per authenticator</li><li>you need support for providers that don&#39;t support OpenID connect discovery</li></ul><p>See how to make use of <a href="https://gardener.cloud/docs/gardener/shoot/shoot_access/#structured-authentication" target="_blank" rel="noreferrer">Structured Authentication in Gardener</a>.</p></div><h2 id="shoot-feature-gate" tabindex="-1">Shoot Feature Gate <a class="header-anchor" href="#shoot-feature-gate" aria-label="Permalink to &quot;Shoot Feature Gate&quot;">​</a></h2><p>In most of the Gardener setups the <code>shoot-oidc-service</code> extension is not enabled globally and thus must be configured per shoot cluster. Please adapt the shoot specification by the configuration shown below to activate the extension individually.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shoot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  extensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shoot-oidc-service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span></code></pre></div><h2 id="openid-connect-provider" tabindex="-1">OpenID Connect provider <a class="header-anchor" href="#openid-connect-provider" aria-label="Permalink to &quot;OpenID Connect provider&quot;">​</a></h2><p>In order to register an OpenID Connect provider an <code>openidconnect</code> resource should be deployed in the shoot cluster.</p><div class="caution custom-block github-alert"><p class="custom-block-title">CAUTION</p><p>It is <strong>strongly</strong> recommended to <strong>NOT</strong> disable prefixing since it may result in unwanted impersonations. The rule of thumb is to always use meaningful and unique prefixes for both <code>username</code> and <code>groups</code>. A good way to ensure this is to use the name of the <code>openidconnect</code> resource as shown in the example below.</p></div><div class="caution custom-block github-alert"><p class="custom-block-title">CAUTION</p><p>It is <strong>strongly</strong> recommended to have <strong>unique</strong> issuer URLs across all <code>openidconnect</code>s and other places that might contain issuer URL configurations related to authentication (e.g. <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#using-authentication-configuration" target="_blank" rel="noreferrer">Structured Authentication</a> even forbids that). Users handled by an issuer must be identified in a consistent, predictable and unique way!</p></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">authentication.gardener.cloud/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OpenIDConnect</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">abc</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # issuerURL is the URL the provider signs ID Tokens as.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # This will be the &quot;iss&quot; field of all tokens produced by the provider and is used for configuration discovery.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  issuerURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://abc-oidc-provider.example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # clientID is the audience for which the JWT must be issued for, the &quot;aud&quot; field.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  clientID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-shoot-cluster</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # usernameClaim is the JWT field to use as the user&#39;s username.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  usernameClaim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sub</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # usernamePrefix, if specified, causes claims mapping to username to be prefix with the provided value.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # A value &quot;oidc:&quot; would result in usernames like &quot;oidc:john&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # If not provided, the prefix defaults to &quot;( .metadata.name )/&quot;. The value &quot;-&quot; can be used to disable all prefixing.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  usernamePrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc:&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # groupsClaim, if specified, causes the OIDCAuthenticator to try to populate the user&#39;s groups with an ID Token field.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # If the groupsClaim field is present in an ID Token the value must be a string or list of strings.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # groupsClaim: groups</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # groupsPrefix, if specified, causes claims mapping to group names to be prefixed with the value.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # A value &quot;oidc:&quot; would result in groups like &quot;oidc:engineering&quot; and &quot;oidc:marketing&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # If not provided, the prefix defaults to &quot;( .metadata.name )/&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # The value &quot;-&quot; can be used to disable all prefixing.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # groupsPrefix: &quot;abc:&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # caBundle is a PEM encoded CA bundle which will be used to validate the OpenID server&#39;s certificate. If unspecified, system&#39;s trusted certificates are used.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # caBundle: &lt;base64 encoded bundle&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # supportedSigningAlgs sets the accepted set of JOSE signing algorithms that can be used by the provider to sign tokens.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # The default value is RS256.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # supportedSigningAlgs:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # - RS256</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # requiredClaims, if specified, causes the OIDCAuthenticator to verify that all the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # required claims key value pairs are present in the ID Token.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # requiredClaims:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   customclaim: requiredvalue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # maxTokenExpirationSeconds if specified, sets a limit in seconds to the maximum validity duration of a token.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Tokens issued with validity greater that this value will not be verified.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Setting this will require that the tokens have the &quot;iat&quot; and &quot;exp&quot; claims.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # maxTokenExpirationSeconds: 3600</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # jwks if specified, provides an option to specify JWKS keys offline.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # jwks:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   keys is a base64 encoded JSON webkey Set. If specified, the OIDCAuthenticator skips the request to the issuer&#39;s jwks_uri endpoint to retrieve the keys.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   keys: &lt;base64 encoded jwks&gt;</span></span></code></pre></div>`,12)]))}const u=e(t,[["render",o]]);export{k as __pageData,u as default};
