import{_ as a,c as i,o as s,a2 as t}from"./chunks/framework.Bfq10Vlj.js";const c=JSON.parse('{"title":"Dockerfile Pitfalls","description":"Common Dockerfile pitfalls","frontmatter":{"category":"Fails","description":"Common Dockerfile pitfalls","github_repo":"https://github.com/gardener/documentation","github_subdir":"website/documentation/guides/applications","last_reviewed":"22.06.2018","level":"beginner","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/guides/applications/dockerfile-pitfall.md","to":"dockerfile-pitfall.md"},"reviewer":"Tieyan Fu","scope":"app-developer","title":"Dockerfile Pitfalls","prev":false,"next":false},"headers":[],"relativePath":"docs/guides/applications/dockerfile-pitfall/index.md","filePath":"docs/guides/applications/dockerfile-pitfall.md","lastUpdated":null}'),l={name:"docs/guides/applications/dockerfile-pitfall/index.md"};function n(r,e,o,p,h,d){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="dockerfile-pitfalls" tabindex="-1">Dockerfile Pitfalls <a class="header-anchor" href="#dockerfile-pitfalls" aria-label="Permalink to &quot;Dockerfile Pitfalls&quot;">​</a></h1><h2 id="using-the-latest-tag-for-an-image" tabindex="-1">Using the <code>latest</code> Tag for an Image <a class="header-anchor" href="#using-the-latest-tag-for-an-image" aria-label="Permalink to &quot;Using the \`latest\` Tag for an Image&quot;">​</a></h2><p>Many Dockerfiles use the <code>FROM package:latest</code> pattern at the top of their Dockerfiles to pull the latest image from a Docker registry.</p><h3 id="bad-dockerfile" tabindex="-1">Bad Dockerfile <a class="header-anchor" href="#bad-dockerfile" aria-label="Permalink to &quot;Bad Dockerfile&quot;">​</a></h3><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alpine</span></span></code></pre></div><p>While simple, using the latest tag for an image means that your build can suddenly break if that image gets updated. This can lead to problems where everything builds fine locally (because your local cache thinks it is the latest), while a build server may fail, because some pipelines make a clean pull on every build. Additionally, troubleshooting can prove to be difficult, since the maintainer of the Dockerfile didn&#39;t actually make any changes.</p><h3 id="good-dockerfile" tabindex="-1">Good Dockerfile <a class="header-anchor" href="#good-dockerfile" aria-label="Permalink to &quot;Good Dockerfile&quot;">​</a></h3><p>A digest takes the place of the tag when pulling an image. This will ensure that your Dockerfile remains immutable.</p><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alpine@sha256:7043076348bf5040220df6ad703798fd8593a0918d06d3ce30c6c93be117e430</span></span></code></pre></div><h2 id="running-apt-apk-yum-update" tabindex="-1">Running apt/apk/yum update <a class="header-anchor" href="#running-apt-apk-yum-update" aria-label="Permalink to &quot;Running apt/apk/yum update&quot;">​</a></h2><p>Running <code>apt-get install</code> is one of those things virtually every Debian-based Dockerfile will have to do in order to satiate some external package requirements your code needs to run. However, using <code>apt-get</code> as an example, this comes with its own problems.</p><p><strong>apt-get upgrade</strong></p><p>This will update all your packages to their latests versions, which can be bad because it prevents your Dockerfile from creating consistent, immutable builds.</p><p><strong>apt-get update (in a different line than the one running your apt-get install command)</strong></p><p>Running <code>apt-get update</code> as a single line entry will get cached by the build and won&#39;t actually run every time you need to run <code>apt-get install</code>. Instead, make sure you run <code>apt-get update</code> in the same line with all the packages to ensure that all are updated correctly.</p><h2 id="avoid-big-container-images" tabindex="-1">Avoid Big Container Images <a class="header-anchor" href="#avoid-big-container-images" aria-label="Permalink to &quot;Avoid Big Container Images&quot;">​</a></h2><p>Building a small container image will reduce the time needed to start or restart pods. An image based on the popular <a href="http://alpinelinux.org/" target="_blank" rel="noreferrer">Alpine Linux project</a> is much smaller than most distribution based images (~5MB). For most popular languages and products, there is usually an official Alpine Linux image, e.g., <a href="https://hub.docker.com/_/golang/" target="_blank" rel="noreferrer">golang</a>, <a href="https://hub.docker.com/_/node/" target="_blank" rel="noreferrer">nodejs</a>, and <a href="https://hub.docker.com/_/postgres/" target="_blank" rel="noreferrer">postgres</a>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                                      TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                     IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postgres</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                                        9.6.9-alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            6583932564f8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> days</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         39.26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postgres</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                                        9.6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                     d92dad241eff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> days</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         235.4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postgres</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                                        10.4-alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             93797b0f31f4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> days</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         39.56</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MB</span></span></code></pre></div><p>In addition, for compiled languages such as Go or C++ that do not require build time tooling during runtime, it is recommended to avoid build time tooling in the final images. With Docker&#39;s support for <a href="https://docs.docker.com/engine/userguide/eng-image/multistage-build/" target="_blank" rel="noreferrer">multi-stages builds</a>, this can be easily achieved with minimal effort. Such an example can be found at <a href="https://docs.docker.com/develop/develop-images/multistage-build/#name-your-build-stages" target="_blank" rel="noreferrer">Multi-stage builds</a>.</p><p>Google&#39;s <a href="https://github.com/GoogleContainerTools/distroless" target="_blank" rel="noreferrer">distroless</a> image is also a good base image.</p>`,20)]))}const g=a(l,[["render",n]]);export{c as __pageData,g as default};
