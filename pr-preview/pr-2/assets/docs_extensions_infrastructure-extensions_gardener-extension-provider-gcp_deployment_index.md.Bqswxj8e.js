import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.Bfq10Vlj.js";const k=JSON.parse('{"title":"Deployment","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener-extension-provider-gcp","github_subdir":"docs/operations","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/deployment.md","to":"deployment.md"},"persona":"Operators","title":"Deployment","prev":false,"next":false},"headers":[],"relativePath":"docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/deployment/index.md","filePath":"docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/deployment.md","lastUpdated":null}'),n={name:"docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/deployment/index.md"};function r(l,e,o,h,d,c){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="deployment-of-the-gcp-provider-extension" tabindex="-1">Deployment of the GCP provider extension <a class="header-anchor" href="#deployment-of-the-gcp-provider-extension" aria-label="Permalink to &quot;Deployment of the GCP provider extension&quot;">​</a></h1><p><strong>Disclaimer:</strong> This document is NOT a step-by-step installation guide for the GCP provider extension and only contains some configuration specifics regarding the installation of different components via the helm charts residing in the GCP provider extension <a href="https://github.com/gardener/gardener-extension-provider-gcp" target="_blank" rel="noreferrer">repository</a>.</p><h2 id="gardener-extension-admission-gcp" tabindex="-1">gardener-extension-admission-gcp <a class="header-anchor" href="#gardener-extension-admission-gcp" aria-label="Permalink to &quot;gardener-extension-admission-gcp&quot;">​</a></h2><h3 id="authentication-against-the-garden-cluster" tabindex="-1">Authentication against the Garden cluster <a class="header-anchor" href="#authentication-against-the-garden-cluster" aria-label="Permalink to &quot;Authentication against the Garden cluster&quot;">​</a></h3><p>There are several authentication possibilities depending on whether or not <a href="https://github.com/gardener/garden-setup#concept-the-virtual-cluster" target="_blank" rel="noreferrer">the concept of <em>Virtual Garden</em></a> is used.</p><h4 id="virtual-garden-is-not-used-i-e-the-runtime-garden-cluster-is-also-the-target-garden-cluster" tabindex="-1"><em>Virtual Garden</em> is not used, i.e., the <code>runtime</code> Garden cluster is also the <code>target</code> Garden cluster. <a class="header-anchor" href="#virtual-garden-is-not-used-i-e-the-runtime-garden-cluster-is-also-the-target-garden-cluster" aria-label="Permalink to &quot;*Virtual Garden* is not used, i.e., the \`runtime\` Garden cluster is also the \`target\` Garden cluster.&quot;">​</a></h4><p><strong>Automounted Service Account Token</strong> The easiest way to deploy the <code>gardener-extension-admission-gcp</code> component will be to not provide <code>kubeconfig</code> at all. This way in-cluster configuration and an automounted service account token will be used. The drawback of this approach is that the automounted token will not be automatically rotated.</p><p><strong>Service Account Token Volume Projection</strong> Another solution will be to use <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection" target="_blank" rel="noreferrer">Service Account Token Volume Projection</a> combined with a <code>kubeconfig</code> referencing a token file (see example below).</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">clusters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    certificate-authority-data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;CA-DATA&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://default.kubernetes.svc.cluster.local</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">contexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">current-context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    tokenFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/run/secrets/projected/serviceaccount/token</span></span></code></pre></div><p>This will allow for automatic rotation of the service account token by the <code>kubelet</code>. The configuration can be achieved by setting both <code>.Values.global.serviceAccountTokenVolumeProjection.enabled: true</code> and <code>.Values.global.kubeconfig</code> in the respective chart&#39;s <code>values.yaml</code> file.</p><h4 id="virtual-garden-is-used-i-e-the-runtime-garden-cluster-is-different-from-the-target-garden-cluster" tabindex="-1"><em>Virtual Garden</em> is used, i.e., the <code>runtime</code> Garden cluster is different from the <code>target</code> Garden cluster. <a class="header-anchor" href="#virtual-garden-is-used-i-e-the-runtime-garden-cluster-is-different-from-the-target-garden-cluster" aria-label="Permalink to &quot;*Virtual Garden* is used, i.e., the \`runtime\` Garden cluster is different from the \`target\` Garden cluster.&quot;">​</a></h4><p><strong>Service Account</strong> The easiest way to setup the authentication will be to create a service account and the respective roles will be bound to this service account in the <code>target</code> cluster. Then use the generated service account token and craft a <code>kubeconfig</code> which will be used by the workload in the <code>runtime</code> cluster. This approach does not provide a solution for the rotation of the service account token. However, this setup can be achieved by setting <code>.Values.global.virtualGarden.enabled: true</code> and following these steps:</p><ol><li>Deploy the <code>application</code> part of the charts in the <code>target</code> cluster.</li><li>Get the service account token and craft the <code>kubeconfig</code>.</li><li>Set the crafted <code>kubeconfig</code> and deploy the <code>runtime</code> part of the charts in the <code>runtime</code> cluster.</li></ol><p><strong>Client Certificate</strong> Another solution will be to bind the roles in the <code>target</code> cluster to a <code>User</code> subject instead of a service account and use a client certificate for authentication. This approach does not provide a solution for the client certificate rotation. However, this setup can be achieved by setting both <code>.Values.global.virtualGarden.enabled: true</code> and <code>.Values.global.virtualGarden.user.name</code>, then following these steps:</p><ol><li>Generate a client certificate for the <code>target</code> cluster for the respective user.</li><li>Deploy the <code>application</code> part of the charts in the <code>target</code> cluster.</li><li>Craft a <code>kubeconfig</code> using the already generated client certificate.</li><li>Set the crafted <code>kubeconfig</code> and deploy the <code>runtime</code> part of the charts in the <code>runtime</code> cluster.</li></ol><p><strong>Projected Service Account Token</strong> This approach requires an already deployed and configured <a href="https://github.com/gardener/oidc-webhook-authenticator" target="_blank" rel="noreferrer">oidc-webhook-authenticator</a> for the <code>target</code> cluster. Also the <code>runtime</code> cluster should be registered as a trusted identity provider in the <code>target</code> cluster. Then projected service accounts tokens from the <code>runtime</code> cluster can be used to authenticate against the <code>target</code> cluster. The needed steps are as follows:</p><ol><li>Deploy <a href="https://github.com/gardener/oidc-webhook-authenticator" target="_blank" rel="noreferrer">OWA</a> and establish the needed trust.</li><li>Set <code>.Values.global.virtualGarden.enabled: true</code> and <code>.Values.global.virtualGarden.user.name</code>. <strong>Note:</strong> username value will depend on the trust configuration, e.g., <code>&lt;prefix&gt;:system:serviceaccount:&lt;namespace&gt;:&lt;serviceaccount&gt;</code></li><li>Set <code>.Values.global.serviceAccountTokenVolumeProjection.enabled: true</code> and <code>.Values.global.serviceAccountTokenVolumeProjection.audience</code>. <strong>Note:</strong> audience value will depend on the trust configuration, e.g., <code>&lt;cliend-id-from-trust-config&gt;</code>.</li><li>Craft a kubeconfig (see example below).</li><li>Deploy the <code>application</code> part of the charts in the <code>target</code> cluster.</li><li>Deploy the <code>runtime</code> part of the charts in the <code>runtime</code> cluster.</li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">clusters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    certificate-authority-data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;CA-DATA&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://virtual-garden.api</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">virtual-garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">contexts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">virtual-garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">virtual-garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">virtual-garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">current-context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">virtual-garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">virtual-garden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    tokenFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/run/secrets/projected/serviceaccount/token</span></span></code></pre></div>`,18)]))}const g=s(n,[["render",r]]);export{k as __pageData,g as default};
