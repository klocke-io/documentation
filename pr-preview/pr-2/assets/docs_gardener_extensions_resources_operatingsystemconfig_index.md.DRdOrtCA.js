import{_ as i,c as e,o as a,a2 as n}from"./chunks/framework.B8WFj13S.js";const c=JSON.parse('{"title":"OperatingSystemConfig","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/extensions/resources","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/extensions/resources/operatingsystemconfig.md","to":"operatingsystemconfig.md"},"title":"OperatingSystemConfig","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/extensions/resources/operatingsystemconfig/index.md","filePath":"docs/gardener/extensions/resources/operatingsystemconfig.md","lastUpdated":null}'),t={name:"docs/gardener/extensions/resources/operatingsystemconfig/index.md"};function l(p,s,h,r,o,d){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="contract-operatingsystemconfig-resource" tabindex="-1">Contract: <code>OperatingSystemConfig</code> Resource <a class="header-anchor" href="#contract-operatingsystemconfig-resource" aria-label="Permalink to &quot;Contract: \`OperatingSystemConfig\` Resource&quot;">​</a></h1><p>Gardener uses the machine API and leverages the functionalities of the <a href="https://github.com/gardener/machine-controller-manager" target="_blank" rel="noreferrer">machine-controller-manager</a> (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&#39;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&#39;s configuration in any way - it just creates/deletes machines with the provided metadata.</p><p>Consequently, Gardener needs to provide this information when interacting with the machine-controller-manager. This means that basically every operating system is possible to be used, as long as there is some implementation that generates the OS-specific configuration in order to provision/bootstrap the machines.</p><p>⚠️ Currently, there are a few requirements of pre-installed components that must be present in all OS images:</p><ol><li><a href="https://containerd.io/" target="_blank" rel="noreferrer">containerd</a><ol><li><a href="https://github.com/projectatomic/containerd/blob/master/docs/cli.md/" target="_blank" rel="noreferrer">ctr (client CLI)</a></li><li><code>containerd</code> must listen on its default socket path: <code>unix:///run/containerd/containerd.sock</code></li><li><code>containerd</code> must be configured to work with the default configuration file in: <code>/etc/containerd/config.toml</code> (eventually created by Gardener).</li></ol></li><li><a href="https://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noreferrer">systemd</a></li></ol><p>The reasons for that will become evident later.</p><h2 id="what-does-the-user-data-bootstrapping-the-machines-contain" tabindex="-1">What does the user-data bootstrapping the machines contain? <a class="header-anchor" href="#what-does-the-user-data-bootstrapping-the-machines-contain" aria-label="Permalink to &quot;What does the user-data bootstrapping the machines contain?&quot;">​</a></h2><p>Gardener installs a few components onto every worker machine in order to allow it to join the shoot cluster. There is the <code>kubelet</code> process and also configuration for log rotation, CA certificates, etc. You can find the complete configuration <a href="https://github.com/gardener/gardener/tree/master/pkg/component/extensions/operatingsystemconfig/original/components" target="_blank" rel="noreferrer">at the components folder</a>. We are calling this the &quot;original&quot; user-data.</p><h2 id="how-does-gardener-bootstrap-the-machines" tabindex="-1">How does Gardener bootstrap the machines? <a class="header-anchor" href="#how-does-gardener-bootstrap-the-machines" aria-label="Permalink to &quot;How does Gardener bootstrap the machines?&quot;">​</a></h2><p><code>gardenlet</code> makes use of <code>gardener-node-agent</code> to perform the bootstrapping and reconciliation of systemd units and files on the machine. Please refer to <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/node-agent/#installation-and-bootstrapping">this document</a> for a first overview.</p><p>Usually, you would submit all the components you want to install onto the machine as part of the user-data during creation time. However, some providers do have a size limitation (around ~16KB) for that user-data. That&#39;s why we do not send the &quot;original&quot; user-data to the machine-controller-manager (who then forwards it to the provider&#39;s API). Instead, we only send a small &quot;init&quot; script that bootstrap the <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/node-agent/"><code>gardener-node-agent</code></a>. It fetches the &quot;original&quot; content from a <code>Secret</code> and applies it on the machine directly. This way we can extend the &quot;original&quot; user-data without any size restrictions (except for the <code>1 MB</code> limit for <code>Secret</code>s).</p><p>The high-level flow is as follows:</p><ol><li>For every worker pool <code>X</code> in the <code>Shoot</code> specification, Gardener creates a <code>Secret</code> named <code>cloud-config-&lt;X&gt;</code> in the <code>kube-system</code> namespace of the shoot cluster. The secret contains the &quot;original&quot; <code>OperatingSystemConfig</code> (i.e., systemd units and files for <code>kubelet</code>).</li><li>Gardener generates a kubeconfig with minimal permissions just allowing reading these secrets. It is used by the <code>gardener-node-agent</code> later.</li><li>Gardener provides the <code>gardener-node-init.sh</code> bash script and the machine image stated in the <code>Shoot</code> specification to the machine-controller-manager.</li><li>Based on this information, the machine-controller-manager creates the VM.</li><li>After the VM has been provisioned, the <code>gardener-node-init.sh</code> script starts, fetches the <code>gardener-node-agent</code> binary, and starts it.</li><li>The <code>gardener-node-agent</code> will read the <code>gardener-node-agent-&lt;X&gt;</code> <code>Secret</code> for its worker pool (containing the &quot;original&quot; <code>OperatingSystemConfig</code>), and reconciles it.</li></ol><p>The <code>gardener-node-agent</code> can update itself in case of newer Gardener versions, and it performs a continuous reconciliation of the systemd units and files in the provided <code>OperatingSystemConfig</code> (just like any other Kubernetes controller).</p><h2 id="what-needs-to-be-implemented-to-support-a-new-operating-system" tabindex="-1">What needs to be implemented to support a new operating system? <a class="header-anchor" href="#what-needs-to-be-implemented-to-support-a-new-operating-system" aria-label="Permalink to &quot;What needs to be implemented to support a new operating system?&quot;">​</a></h2><p>As part of the <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/gardenlet/#shoot-controller"><code>Shoot</code> reconciliation flow</a>, <code>gardenlet</code> will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">extensions.gardener.cloud/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OperatingSystemConfig</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pool-01-original</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;my-operating-system&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">reconcile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  units</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">containerd.service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    dropIns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10-containerd-opts.conf</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        [Service]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Environment=&quot;SOME_OPTS=--foo=bar&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/lib/kubelet/ca.crt</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0644</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b64</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      secretRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default-token-5dtjz</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        dataKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/sysctl.d/99-k8s-general.conf</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0644</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      inline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          # A higher vm.max_map_count is great for elasticsearch, mongo, or other mmap users</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          # See https://github.com/kubernetes/kops/issues/1340</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          vm.max_map_count = 135217728</span></span></code></pre></div><p>In order to support a new operating system, you need to write a controller that watches all <code>OperatingSystemConfig</code>s with <code>.spec.type=&lt;my-operating-system&gt;</code>. For those it shall generate a configuration blob that fits to your operating system.</p><p><code>OperatingSystemConfig</code>s can have two purposes: either <code>provision</code> or <code>reconcile</code>.</p><h3 id="provision-purpose" tabindex="-1"><code>provision</code> Purpose <a class="header-anchor" href="#provision-purpose" aria-label="Permalink to &quot;\`provision\` Purpose&quot;">​</a></h3><p>The <code>provision</code> purpose is used by <code>gardenlet</code> for the user-data that it later passes to the machine-controller-manager (and then to the provider&#39;s API) when creating new VMs. It contains the <code>gardener-node-init.sh</code> script and systemd unit.</p><p>The OS controller has to translate the <code>.spec.units</code> and <code>.spec.files</code> into configuration that fits to the operating system. For example, a Flatcar controller might generate a <a href="https://github.com/flatcar/coreos-cloudinit/blob/flatcar-master/Documentation/cloud-config-examples.md" target="_blank" rel="noreferrer">CoreOS cloud-config</a> or <a href="https://coreos.com/ignition/docs/latest/what-is-ignition.html" target="_blank" rel="noreferrer">Ignition</a>, SLES might generate <a href="https://cloudinit.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">cloud-init</a>, and others might simply generate a bash script translating the <code>.spec.units</code> into <code>systemd</code> units, and <code>.spec.files</code> into real files on the disk.</p><blockquote><p>⚠️ Please avoid mixing in additional systemd units or files - this step should just translate what <code>gardenlet</code> put into <code>.spec.units</code> and <code>.spec.files</code>.</p></blockquote><p>After generation, extension controllers are asked to store their OS config inside a <code>Secret</code> (as it might contain confidential data) in the same namespace. The secret&#39;s <code>.data</code> could look like this:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Secret</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">osc-result-pool-01-original</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ownerReferences</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">extensions.gardener.cloud/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    blockOwnerDeletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OperatingSystemConfig</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pool-01-original</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">99c0c5ca-19b9-11e9-9ebd-d67077b40f82</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">base64(generated-user-data)</span></span></code></pre></div><p>Finally, the secret&#39;s metadata must be provided in the <code>OperatingSystemConfig</code>&#39;s <code>.status</code> field:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloudConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    secretRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">osc-result-pool-01-original</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  lastOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Successfully generated cloud config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    lastUpdateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2019-01-23T07:45:23Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Succeeded</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Reconcile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  observedGeneration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span></code></pre></div><h3 id="reconcile-purpose" tabindex="-1"><code>reconcile</code> Purpose <a class="header-anchor" href="#reconcile-purpose" aria-label="Permalink to &quot;\`reconcile\` Purpose&quot;">​</a></h3><p>The <code>reconcile</code> purpose contains the &quot;original&quot; <code>OperatingSystemConfig</code> (which is later stored in <code>Secret</code>s in the shoot&#39;s <code>kube-system</code> namespace (see step 1)). This is downloaded and applies late (see step 5).</p><p>The OS controller does not need to translate anything here, but it has the option to provide additional systemd units or files via the <code>.status</code> field:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  extensionUnits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-custom-service.service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">start</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      [Unit]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      // some systemd unit content</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  extensionFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/some/file</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0644</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      inline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">some-file-content</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  lastOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Successfully generated cloud config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    lastUpdateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2019-01-23T07:45:23Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Succeeded</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Reconcile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  observedGeneration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span></code></pre></div><p>The <code>gardener-node-agent</code> will merge <code>.spec.units</code> and <code>.status.extensionUnits</code> as well as <code>.spec.files</code> and <code>.status.extensionFiles</code> when applying.</p><p>You can find an example implementation <a href="https://github.com/gardener/gardener/blob/master/pkg/provider-local/controller/operatingsystemconfig/actuator.go" target="_blank" rel="noreferrer">here</a>.</p><p>As described above, the &quot;original&quot; user-data must be re-applicable to allow in-place updates. The way how this is done is specific to the generated operating system config (e.g., for CoreOS cloud-init the command is <code>/usr/bin/coreos-cloudinit --from-file=&lt;path&gt;</code>, whereas SLES would run <code>cloud-init --file &lt;path&gt; single -n write_files --frequency=once</code>). Consequently, besides the generated OS config, the extension controller must also provide a command for re-application an updated version of the user-data. As visible in the mentioned examples, the command requires a path to the user-data file. As soon as Gardener detects that the user data has changed it will reload the systemd daemon and restart all the units provided in the <code>.status.units[]</code> list (see the below example). The same logic applies during the very first application of the whole configuration.</p><p>After generation, extension controllers are asked to store their OS config inside a <code>Secret</code> (as it might contain confidential data) in the same namespace. The secret&#39;s <code>.data</code> could look like this:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Secret</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">osc-result-pool-01-original</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ownerReferences</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">extensions.gardener.cloud/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    blockOwnerDeletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OperatingSystemConfig</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pool-01-original</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">99c0c5ca-19b9-11e9-9ebd-d67077b40f82</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">base64(generated-user-data)</span></span></code></pre></div><p>Finally, the secret&#39;s metadata, the OS-specific command to re-apply the configuration, and the list of <code>systemd</code> units that shall be considered to be restarted if an updated version of the user-data is re-applied must be provided in the <code>OperatingSystemConfig</code>&#39;s <code>.status</code> field:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloudConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    secretRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">osc-result-pool-01-original</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  lastOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Successfully generated cloud config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    lastUpdateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2019-01-23T07:45:23Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Succeeded</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Reconcile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  observedGeneration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span></code></pre></div><p>Once the <code>.status</code> indicates that the extension controller finished reconciling Gardener will continue with the next step of the shoot reconciliation flow.</p><h3 id="bootstrap-tokens" tabindex="-1">Bootstrap Tokens <a class="header-anchor" href="#bootstrap-tokens" aria-label="Permalink to &quot;Bootstrap Tokens&quot;">​</a></h3><p><code>gardenlet</code> adds a file with the content <code>&lt;&lt;BOOTSTRAP_TOKEN&gt;&gt;</code> to the <code>OperatingSystemConfig</code> with purpose <code>provision</code> and sets <code>transmitUnencoded=true</code>. This instructs the responsible OS extension to pass this file (with its content in clear-text) to the corresponding <code>Worker</code> resource.</p><p><code>machine-controller-manager</code> makes sure that:</p><ul><li>a bootstrap token gets created per machine</li><li>the <code>&lt;&lt;BOOTSTRAP_TOKEN&gt;&gt;</code> string in the user data of the machine gets replaced by the generated token</li></ul><p>After the machine has been bootstrapped, the token secret in the shoot cluster gets deleted again.</p><p>The token is used to bootstrap <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/node-agent/">Gardener Node Agent</a> and <code>kubelet</code>.</p><h3 id="in-place-os-updates" tabindex="-1">In-Place OS Updates <a class="header-anchor" href="#in-place-os-updates" aria-label="Permalink to &quot;In-Place OS Updates&quot;">​</a></h3><p>Gardener enables in-place OS updates for worker nodes, allowing OS updates without replacing the node. This feature executes a predefined command on the node to perform the update.</p><p>For an OS to support in-place updates, it must meet the following prerequisites:</p><ul><li>The machine image or operating system must support in-place updates with a tool or utility to initiate the process.</li><li>The update mechanism should ensure reliability by: <ul><li>Booting into the updated version if successful.</li><li>Reverting to the previous version in case of failure.</li></ul></li><li>The update tool may also provide configuration options, including: <ul><li>Retry Configuration: The ability to define the number of retries for the update.</li><li>Registry Configuration: The option to specify the registry from which the OS image is pulled.</li></ul></li></ul><p>An OS supporting in-place updates must define the update configuration in <code>.status.inPlaceUpdates</code> as follows:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  inPlaceUpdates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    osUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/update-me</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bar</span></span></code></pre></div><ul><li><code>command</code>: Specifies the path to the OS update utility or script to be executed on the node.</li><li><code>args</code>: Provides optional flags or arguments to customize the update behavior.</li></ul><h2 id="cri-support" tabindex="-1">CRI Support <a class="header-anchor" href="#cri-support" aria-label="Permalink to &quot;CRI Support&quot;">​</a></h2><p>Gardener supports specifying a Container Runtime Interface (CRI) configuration in the <code>OperatingSystemConfig</code> resource. If the <code>.spec.cri</code> section exists, then the <code>name</code> property is mandatory. The only supported value for <code>cri.name</code> at the moment is: <code>containerd</code>. For example:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">extensions.gardener.cloud/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OperatingSystemConfig</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pool-01-original</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;my-operating-system&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">reconcile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">containerd</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   cgroupDriver: cgroupfs # or systemd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    containerd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      sandboxImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">registry.k8s.io/pause</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     registries:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     - upstream: docker.io</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#       server: https://registry-1.docker.io</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#       hosts:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#       - url: http://&lt;service-ip&gt;:&lt;port&gt;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     plugins:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     - op: add # add (default) or remove</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#       path: [io.containerd.grpc.v1.cri, containerd]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#       values: &#39;{&quot;default_runtime_name&quot;: &quot;runc&quot;}&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span></code></pre></div><p>To support <code>containerd</code>, an OS extension must satisfy the following criteria:</p><ol><li>The operating system must have built-in <a href="https://containerd.io/" target="_blank" rel="noreferrer">containerd</a> and <a href="https://github.com/projectatomic/containerd/blob/master/docs/cli.md/" target="_blank" rel="noreferrer">ctr (client CLI)</a>.</li><li><code>containerd</code> must listen on its default socket path: <code>unix:///run/containerd/containerd.sock</code></li><li><code>containerd</code> must be configured to work with the default configuration file in: <code>/etc/containerd/config.toml</code> (Created by Gardener).</li></ol><p>For a convenient handling, <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/node-agent/">gardener-node-agent</a> can manage various aspects of containerd&#39;s config, e.g. the registry configuration, if given in the <code>OperatingSystemConfig</code>. Any Gardener extension which needs to modify the config, should check the functionality exposed through this API first. If applicable, adjustments can be implemented through mutating webhooks, acting on the created or updated <code>OperatingSystemConfig</code> resource.</p><p>If CRI configurations are not supported, it is recommended to create a validating webhook running in the garden cluster that prevents specifying the <code>.spec.providers.workers[].cri</code> section in the <code>Shoot</code> objects.</p><h3 id="cgroup-driver" tabindex="-1">cgroup driver <a class="header-anchor" href="#cgroup-driver" aria-label="Permalink to &quot;cgroup driver&quot;">​</a></h3><p>For Shoot clusters using Kubernetes &lt; 1.31, Gardener is setting the kubelet&#39;s cgroup driver to <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cgroupfs-cgroup-driver" target="_blank" rel="noreferrer"><code>cgroupfs</code></a> and containerd&#39;s cgroup driver is unmanaged. For Shoot clusters using Kubernetes 1.31+, Gardener is setting both kubelet&#39;s and containerd&#39;s cgroup driver to <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver" target="_blank" rel="noreferrer"><code>systemd</code></a>.</p><p>The <code>systemd</code> cgroup driver is a requirement for operating systems using <a href="https://kubernetes.io/docs/concepts/architecture/cgroups/" target="_blank" rel="noreferrer">cgroup v2</a>. It&#39;s important to ensure that both kubelet and the container runtime (containerd) are using the same cgroup driver to avoid potential issues.</p><p>OS extensions might also overwrite the cgroup driver for containerd and kubelet.</p><h2 id="references-and-additional-resources" tabindex="-1">References and Additional Resources <a class="header-anchor" href="#references-and-additional-resources" aria-label="Permalink to &quot;References and Additional Resources&quot;">​</a></h2><ul><li><a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_operatingsystemconfig.go" target="_blank" rel="noreferrer"><code>OperatingSystemConfig</code> API (Golang Specification)</a></li><li><a href="documentation/pr-preview/pr-2/docs/gardener/concepts/node-agent/">Gardener Node Agent</a></li></ul>`,65)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
