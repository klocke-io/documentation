import{_ as t,c as r,o,a2 as c}from"./chunks/framework.Bfq10Vlj.js";const h=JSON.parse('{"title":"Etcd Cluster Components","description":"","frontmatter":{"github_repo":"https://github.com/gardener/etcd-druid","github_subdir":"docs/concepts","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/other-components/etcd-druid/concepts/etcd-cluster-components.md","to":"etcd-cluster-components.md"},"title":"Etcd Cluster Components","prev":false,"next":false},"headers":[],"relativePath":"docs/other-components/etcd-druid/concepts/etcd-cluster-components/index.md","filePath":"docs/other-components/etcd-druid/concepts/etcd-cluster-components.md","lastUpdated":null}'),a={name:"docs/other-components/etcd-druid/concepts/etcd-cluster-components/index.md"};function n(s,e,d,i,l,p){return o(),r("div",null,e[0]||(e[0]=[c('<h1 id="etcd-cluster-components" tabindex="-1">Etcd Cluster Components <a class="header-anchor" href="#etcd-cluster-components" aria-label="Permalink to &quot;Etcd Cluster Components&quot;">​</a></h1><p>For every <code>Etcd</code> cluster that is provisioned by <code>etcd-druid</code> it deploys a set of resources. Following sections provides information and code reference to each such resource.</p><h2 id="statefulset" tabindex="-1">StatefulSet <a class="header-anchor" href="#statefulset" aria-label="Permalink to &quot;StatefulSet&quot;">​</a></h2><p><a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/" target="_blank" rel="noreferrer">StatefulSet</a> is the primary kubernetes resource that gets provisioned for an etcd cluster.</p><ul><li><p>Replicas for the StatefulSet are derived from <code>Etcd.Spec.Replicas</code> in the custom resource.</p></li><li><p>Each pod comprises two containers:</p><ul><li><p><code>etcd-wrapper</code> : This is the main container which runs an etcd process.</p></li><li><p><code>etcd-backup-restore</code> : This is a side-container which does the following:</p><ul><li>Orchestrates the initialization of etcd. This includes validation of any existing etcd data directory, restoration in case of corrupt etcd data directory files for a single-member etcd cluster.</li><li>Periodically renews member lease.</li><li>Optionally takes schedule and threshold based delta and full snapshots and pushes them to a configured object store.</li><li>Orchestrates scheduled etcd-db defragmentation.</li></ul><blockquote><p>NOTE: This is not a complete list of functionalities offered out of <code>etcd-backup-restore</code>.</p></blockquote></li></ul></li></ul><p><strong>Code reference:</strong> <a href="https://github.com/gardener/etcd-druid/tree/480213808813c5282b19aff5f3fd6868529e779c/internal/component/statefulset" target="_blank" rel="noreferrer">StatefulSet-Component</a></p><blockquote><p>For detailed information on each container you can visit <a href="https://github.com/gardener/etcd-wrapper" target="_blank" rel="noreferrer">etcd-wrapper</a> and <a href="https://github.com/gardener/etcd-backup-restore" target="_blank" rel="noreferrer">etcd-backup-restore</a> repositories.</p></blockquote><h2 id="configmap" tabindex="-1">ConfigMap <a class="header-anchor" href="#configmap" aria-label="Permalink to &quot;ConfigMap&quot;">​</a></h2><p>Every <code>etcd</code> member requires <a href="https://etcd.io/docs/v3.4/op-guide/configuration/" target="_blank" rel="noreferrer">configuration</a> with which it must be started. <code>etcd-druid</code> creates a <a href="https://kubernetes.io/docs/concepts/configuration/configmap/" target="_blank" rel="noreferrer">ConfigMap</a> which gets mounted onto the <code>etcd-backup-restore</code> container. <code>etcd-backup-restore</code> container will modify the etcd configuration and serve it to the <code>etcd-wrapper</code> container upon request.</p><p><strong>Code reference:</strong> <a href="https://github.com/gardener/etcd-druid/tree/480213808813c5282b19aff5f3fd6868529e779c/internal/component/configmap" target="_blank" rel="noreferrer">ConfigMap-Component</a></p><h2 id="poddisruptionbudget" tabindex="-1">PodDisruptionBudget <a class="header-anchor" href="#poddisruptionbudget" aria-label="Permalink to &quot;PodDisruptionBudget&quot;">​</a></h2><p>An etcd cluster requires quorum for all write operations. Clients can additionally configure quorum based reads as well to ensure <a href="https://jepsen.io/consistency/models/linearizable" target="_blank" rel="noreferrer">linearizable</a> reads (kube-apiserver&#39;s etcd client is configured for linearizable reads and writes). In a cluster of size 3, only 1 member failure is tolerated. <a href="https://etcd.io/docs/v3.3/faq/#what-is-failure-tolerance" target="_blank" rel="noreferrer">Failure tolerance</a> for an etcd cluster with replicas <code>n</code> is computed as <code>(n-1)/2</code>.</p><p>To ensure that etcd pods are not evicted more than its failure tolerance, <code>etcd-druid</code> creates a <a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets" target="_blank" rel="noreferrer">PodDisruptionBudget</a>.</p><p>!!! note For a single node etcd cluster a <code>PodDisruptionBudget</code> will be created, however <code>pdb.spec.minavailable</code> is set to 0 effectively disabling it.</p><p><strong>Code reference:</strong> <a href="https://github.com/gardener/etcd-druid/tree/480213808813c5282b19aff5f3fd6868529e779c/internal/component/poddistruptionbudget" target="_blank" rel="noreferrer">PodDisruptionBudget-Component</a></p><h2 id="serviceaccount" tabindex="-1">ServiceAccount <a class="header-anchor" href="#serviceaccount" aria-label="Permalink to &quot;ServiceAccount&quot;">​</a></h2><p><code>etcd-backup-restore</code> container running as a side-car in every etcd-member, requires permissions to access resources like <code>Lease</code>, <code>StatefulSet</code> etc. A dedicated <a href="https://kubernetes.io/docs/concepts/security/service-accounts/" target="_blank" rel="noreferrer">ServiceAccount</a> is created per <code>Etcd</code> cluster for this purpose.</p><p><strong>Code reference:</strong> <a href="https://github.com/gardener/etcd-druid/tree/3383e0219a6c21c6ef1d5610db964cc3524807c8/internal/component/serviceaccount" target="_blank" rel="noreferrer">ServiceAccount-Component</a></p><h2 id="role-rolebinding" tabindex="-1">Role &amp; RoleBinding <a class="header-anchor" href="#role-rolebinding" aria-label="Permalink to &quot;Role &amp; RoleBinding&quot;">​</a></h2><p><code>etcd-backup-restore</code> container running as a side-car in every etcd-member, requires permissions to access resources like <code>Lease</code>, <code>StatefulSet</code> etc. A dedicated <a href="/docs/other-components/etcd-druid/concepts/etcd-cluster-components/">Role</a> and <a href="/docs/other-components/etcd-druid/concepts/etcd-cluster-components/">RoleBinding</a> is created and linked to the <a href="https://kubernetes.io/docs/concepts/security/service-accounts/" target="_blank" rel="noreferrer">ServiceAccount</a> created per <code>Etcd</code> cluster.</p><p><strong>Code reference:</strong> <a href="https://github.com/gardener/etcd-druid/tree/3383e0219a6c21c6ef1d5610db964cc3524807c8/internal/component/role" target="_blank" rel="noreferrer">Role-Component</a> &amp; <a href="https://github.com/gardener/etcd-druid/tree/master/internal/component/rolebinding" target="_blank" rel="noreferrer">RoleBinding-Component</a></p><h2 id="client-peer-service" tabindex="-1">Client &amp; Peer Service <a class="header-anchor" href="#client-peer-service" aria-label="Permalink to &quot;Client &amp; Peer Service&quot;">​</a></h2><p>To enable clients to connect to an etcd cluster a ClusterIP <code>Client</code> <a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noreferrer">Service</a> is created. To enable <code>etcd</code> members to talk to each other(for discovery, leader-election, raft consensus etc.) <code>etcd-druid</code> also creates a <a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services" target="_blank" rel="noreferrer">Headless Service</a>.</p><p><strong>Code reference:</strong> <a href="https://github.com/gardener/etcd-druid/tree/480213808813c5282b19aff5f3fd6868529e779c/internal/component/clientservice" target="_blank" rel="noreferrer">Client-Service-Component</a> &amp; <a href="https://github.com/gardener/etcd-druid/tree/480213808813c5282b19aff5f3fd6868529e779c/internal/component/peerservice" target="_blank" rel="noreferrer">Peer-Service-Component</a></p><h2 id="member-lease" tabindex="-1">Member Lease <a class="header-anchor" href="#member-lease" aria-label="Permalink to &quot;Member Lease&quot;">​</a></h2><p>Every member in an <code>Etcd</code> cluster has a dedicated <a href="https://kubernetes.io/docs/concepts/architecture/leases/" target="_blank" rel="noreferrer">Lease</a> that gets created which signifies that the member is alive. It is the responsibility of the <code>etcd-backup-store</code> side-car container to periodically renew the lease.</p><p>!!! note Today the lease object is also used to indicate the member-ID and the role of the member in an etcd cluster. Possible roles are <code>Leader</code>, <code>Member</code>(which denotes that this is a member but not a leader). This will change in the future with <a href="https://github.com/gardener/etcd-druid/blob/3383e0219a6c21c6ef1d5610db964cc3524807c8/docs/proposals/04-etcd-member-custom-resource.md" target="_blank" rel="noreferrer">EtcdMember resource</a>.</p><p><strong>Code reference:</strong> <a href="https://github.com/gardener/etcd-druid/tree/3383e0219a6c21c6ef1d5610db964cc3524807c8/internal/component/memberlease" target="_blank" rel="noreferrer">Member-Lease-Component</a></p><h2 id="delta-full-snapshot-leases" tabindex="-1">Delta &amp; Full Snapshot Leases <a class="header-anchor" href="#delta-full-snapshot-leases" aria-label="Permalink to &quot;Delta &amp; Full Snapshot Leases&quot;">​</a></h2><p>One of the responsibilities of <code>etcd-backup-restore</code> container is to take periodic or threshold based snapshots (delta and full) of the etcd DB. Today <code>etcd-backup-restore</code> communicates the end-revision of the latest full/delta snapshots to <code>etcd-druid</code> operator via leases.</p><p><code>etcd-druid</code> creates two <a href="https://kubernetes.io/docs/concepts/architecture/leases/" target="_blank" rel="noreferrer">Lease</a> resources one for delta and another for full snapshot. This information is used by the operator to trigger <a href="/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot-compaction</a> jobs. Snapshot leases are also used to derive the health of backups which gets updated in the <code>Status</code> subresource of every <code>Etcd</code> resource.</p><blockquote><p>In future these leases will be replaced by <a href="https://github.com/gardener/etcd-druid/blob/3383e0219a6c21c6ef1d5610db964cc3524807c8/docs/proposals/04-etcd-member-custom-resource.md" target="_blank" rel="noreferrer">EtcdMember resource</a>.</p></blockquote><p><strong>Code reference:</strong> <a href="https://github.com/gardener/etcd-druid/tree/3383e0219a6c21c6ef1d5610db964cc3524807c8/internal/component/snapshotlease" target="_blank" rel="noreferrer">Snapshot-Lease-Component</a></p>',33)]))}const f=t(a,[["render",n]]);export{h as __pageData,f as default};
