import{_ as e,c as a,o as t,a2 as i}from"./chunks/framework.Bfq10Vlj.js";const k=JSON.parse('{"title":"Testmachinery Tests","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/development","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/testmachinery_tests.md","to":"testmachinery_tests.md"},"persona":"Developers","title":"Testmachinery Tests","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/testmachinery_tests/index.md","filePath":"docs/gardener/testmachinery_tests.md","lastUpdated":null}'),n={name:"docs/gardener/testmachinery_tests/index.md"};function l(o,s,p,r,h,c){return t(),a("div",null,s[0]||(s[0]=[i(`<h1 id="test-machinery-tests" tabindex="-1">Test Machinery Tests <a class="header-anchor" href="#test-machinery-tests" aria-label="Permalink to &quot;Test Machinery Tests&quot;">​</a></h1><p>In order to automatically qualify Gardener releases, we execute a set of end-to-end tests using <a href="https://github.com/gardener/test-infra" target="_blank" rel="noreferrer">Test Machinery</a>. This requires a full Gardener installation including infrastructure extensions, as well as a setup of Test Machinery itself. These tests operate on Shoot clusters across different Cloud Providers, using different supported Kubernetes versions and various configuration options (huge test matrix).</p><p>This manual gives an overview about test machinery tests in Gardener.</p><ul><li><a href="/docs/gardener/testmachinery_tests/#structure">Structure</a></li><li><a href="/docs/gardener/testmachinery_tests/#add-a-new-test">Add a new test</a></li><li><a href="/docs/gardener/testmachinery_tests/#test-labels">Test Labels</a></li><li><a href="/docs/gardener/testmachinery_tests/#framework">Framework</a></li><li><a href="/docs/gardener/testmachinery_tests/#container-images">Container Images</a></li></ul><h2 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure&quot;">​</a></h2><p>Gardener test machinery tests are split into two test suites that can be found under <a href="https://github.com/gardener/gardener/tree/master/test/testmachinery/suites" target="_blank" rel="noreferrer"><code>test/testmachinery/suites</code></a>:</p><ul><li>The <strong>Gardener Test Suite</strong> contains all tests that only require a running gardener instance.</li><li>The <strong>Shoot Test Suite</strong> contains all tests that require a predefined running shoot cluster.</li></ul><p>The corresponding tests of a test suite are defined in the import statement of the suite definition (see <a href="https://github.com/gardener/gardener/blob/master/test/testmachinery/suites/shoot/run_suite_test.go" target="_blank" rel="noreferrer"><code>shoot/run_suite_test.go</code></a>) and their source code can be found under <a href="https://github.com/gardener/gardener/tree/master/test/testmachinery" target="_blank" rel="noreferrer"><code>test/testmachinery</code></a>.</p><p>The <code>test</code> directory is structured as follows:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">├── e2e           # end-to-end tests (using provider-local)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">│  ├── gardener</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">│  │  ├── seed</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">│  │  ├── shoot</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">|  |  └── ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">|  └──operator</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">├── framework     # helper code shared across integration, e2e and testmachinery tests</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">├── integration   # integration tests (envtests)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">│  ├── controllermanager</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">│  ├── envtest</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">│  ├── resourcemanager</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">│  ├── scheduler</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">│  └── ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">└── testmachinery # test machinery tests</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   ├── gardener   # actual test cases imported by suites/gardener</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  └── security</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   ├── shoots     # actual test cases imported by suites/shoot</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  ├── applications</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  ├── care</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  ├── logging</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  ├── operatingsystem</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  ├── operations</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  └── vpntunnel</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   ├── suites     # suites that run against a running garden or shoot cluster</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  ├── gardener</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   │  └── shoot</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   └── system     # suites that are used for building a full test flow</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ├── complete_reconcile</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ├── managed_seed_creation</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ├── managed_seed_deletion</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ├── shoot_cp_migration</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ├── shoot_creation</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ├── shoot_deletion</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ├── shoot_hibernation</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ├── shoot_hibernation_wakeup</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      └── shoot_update</span></span></code></pre></div><p>A suite can be executed by running the suite definition with ginkgo&#39;s <code>focus</code> and <code>skip</code> flags to control the execution of specific labeled test. See the example below:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">go test -timeout=0 ./test/testmachinery/suites/shoot \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      --v -ginkgo.v -ginkgo.show-node-events -ginkgo.no-color \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      --report-file=/tmp/report.json \\                     # write elasticsearch formatted output to a file</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      --disable-dump=false \\                               # disables dumping of the current state if a test fails</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      -kubecfg=/path/to/gardener/kubeconfig \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      -shoot-name=&lt;shoot-name&gt; \\                           # Name of the shoot to test</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      -project-namespace=&lt;gardener project namespace&gt; \\    # Name of the gardener project the test shoot resides</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      -ginkgo.focus=&quot;\\[RELEASE\\]&quot; \\                        # Run all tests that are tagged as release</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      -ginkgo.skip=&quot;\\[SERIAL\\]&quot;                            # Exclude all tests that are tagged SERIAL</span></span></code></pre></div><h2 id="add-a-new-test" tabindex="-1">Add a New Test <a class="header-anchor" href="#add-a-new-test" aria-label="Permalink to &quot;Add a New Test&quot;">​</a></h2><p>To add a new test the framework requires the following steps (step 1. and 2. can be skipped if the test is added to an existing package):</p><ol><li>Create a new test file e.g. <code>test/testmachinery/shoot/security/my-sec-test.go</code></li><li>Import the test into the appropriate test suite (gardener or shoot): <code>import _ &quot;github.com/gardener/gardener/test/testmachinery/shoot/security&quot;</code></li><li>Define your test with the testframework. The framework will automatically add its initialization, cleanup and dump functions.</li></ol><div class="language-golang vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">golang</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ginkgo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my suite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> framework.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewShootFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Beta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CIt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my first test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f.ShootClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xx)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // testing ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The newly created test can be tested by focusing the test with the default ginkgo focus <code>f.Beta().FCIt(&quot;my first test&quot;, func(ctx context.Context)</code> and running the shoot test suite with:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>go test -timeout=0 ./test/testmachinery/suites/shoot \\</span></span>
<span class="line"><span>      --v -ginkgo.v -ginkgo.show-node-events -ginkgo.no-color \\</span></span>
<span class="line"><span>      --report-file=/tmp/report.json \\                     # write elasticsearch formatted output to a file</span></span>
<span class="line"><span>      --disable-dump=false \\                               # disables dumping of the current state if a test fails</span></span>
<span class="line"><span>      -kubecfg=/path/to/gardener/kubeconfig \\</span></span>
<span class="line"><span>      -shoot-name=&lt;shoot-name&gt; \\                           # Name of the shoot to test</span></span>
<span class="line"><span>      -project-namespace=&lt;gardener project namespace&gt; \\</span></span>
<span class="line"><span>      -fenced=&lt;true|false&gt;                                 # Tested shoot is running in a fenced environment and cannot be reached by gardener</span></span></code></pre></div><p>or for the gardener suite with:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>go test -timeout=0 ./test/testmachinery/suites/gardener \\</span></span>
<span class="line"><span>      --v -ginkgo.v -ginkgo.show-node-events -ginkgo.no-color \\</span></span>
<span class="line"><span>      --report-file=/tmp/report.json \\                     # write elasticsearch formatted output to a file</span></span>
<span class="line"><span>      --disable-dump=false \\                               # disables dumping of the current state if a test fails</span></span>
<span class="line"><span>      -kubecfg=/path/to/gardener/kubeconfig \\</span></span>
<span class="line"><span>      -project-namespace=&lt;gardener project namespace&gt;</span></span></code></pre></div><p>⚠️ Make sure that you do not commit any focused specs as this feature is only intended for local development! Ginkgo will fail the test suite if there are any focused specs.</p><p>Alternatively, a test can be triggered by specifying a ginkgo focus regex with the name of the test e.g.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>go test -timeout=0 ./test/testmachinery/suites/gardener \\</span></span>
<span class="line"><span>      --v -ginkgo.v -ginkgo.show-node-events -ginkgo.no-color \\</span></span>
<span class="line"><span>      --report-file=/tmp/report.json \\                     # write elasticsearch formatted output to a file</span></span>
<span class="line"><span>      -kubecfg=/path/to/gardener/kubeconfig \\</span></span>
<span class="line"><span>      -project-namespace=&lt;gardener project namespace&gt; \\</span></span>
<span class="line"><span>      -ginkgo.focus=&quot;my first test&quot;                        # regex to match test cases</span></span></code></pre></div><h2 id="test-labels" tabindex="-1">Test Labels <a class="header-anchor" href="#test-labels" aria-label="Permalink to &quot;Test Labels&quot;">​</a></h2><p>Every test should be labeled by using the predefined labels available with every framework to have consistent labeling across all test machinery tests.</p><p>The labels are applied to every new <code>It()/CIt()</code> definition by:</p><div class="language-golang vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">golang</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> framework.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewCommonFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">It</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[DEFAULT] [SERIAL] my test&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> framework.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewShootFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">It</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[DEFAULT] [SERIAL] [SHOOT] my test&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> framework.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewGardenerFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">It</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[DEFAULT] [GARDENER] [SERIAL] my test&quot;</span></span></code></pre></div><p>Labels:</p><ul><li><em>Beta</em>: Newly created tests with no experience on stableness should be first labeled as beta tests. They should be watched (and probably improved) until stable enough to be promoted to <em>Default</em>.</li><li><em>Default</em>: Tests that were <em>Beta</em> before and proved to be stable are promoted to <em>Default</em> eventually. <em>Default</em> tests run more often, produce alerts and are <em>considered</em> during the release decision although they don&#39;t necessarily block a release.</li><li><em>Release</em>: Test are release relevant. A failing <em>Release</em> test blocks the release pipeline. Therefore, these tests need to be stable. Only tests proven to be stable will eventually be promoted to <em>Release</em>.</li></ul><p>Behavior Labels:</p><ul><li><em>Serial</em>: The test should always be executed in serial with no other tests running, as it may impact other tests.</li><li><em>Destructive</em>: The test is destructive. Which means that is runs with no other tests and may break Gardener or the shoot. Only create such tests if really necessary, as the execution will be expensive (neither Gardener nor the shoot can be reused in this case for other tests).</li></ul><h2 id="framework" tabindex="-1">Framework <a class="header-anchor" href="#framework" aria-label="Permalink to &quot;Framework&quot;">​</a></h2><p>The framework directory contains all the necessary functions / utilities for running test machinery tests. For example, there are methods for creation/deletion of shoots, waiting for shoot deletion/creation, downloading/installing/deploying helm charts, logging, etc.</p><p>The framework itself consists of 3 different frameworks that expect different prerequisites and offer context specific functionality.</p><ul><li><strong>CommonFramework</strong>: The common framework is the base framework that handles logging and setup of commonly needed resources like helm. It also contains common functions for interacting with Kubernetes clusters like <code>Waiting for resources to be ready</code> or <code>Exec into a running pod</code>.</li><li><strong>GardenerFramework</strong> contains all functions of the common framework and expects a running Gardener instance with the provided Gardener kubeconfig and a project namespace. It also contains functions to interact with gardener like <code>Waiting for a shoot to be reconciled</code> or <code>Patch a shoot</code> or <code>Get a seed</code>.</li><li><strong>ShootFramework</strong>: contains all functions of the common and the gardener framework. It expects a running shoot cluster defined by the shoot&#39;s name and namespace (project namespace). This framework contains functions to directly interact with the specific shoot.</li></ul><p>The whole framework also includes commonly used checks, ginkgo wrapper, etc., as well as commonly used tests. Theses common application tests (like the guestbook test) can be used within multiple tests to have a default application (with ingress, deployment, stateful backend) to test external factors.</p><p><strong>Config</strong></p><p>Every framework commandline flag can also be defined by a configuration file (the value of the configuration file is only used if a flag is not specified by commandline). The test suite searches for a configuration file (yaml is preferred) if the command line flag <code>--config=/path/to/config/file</code> is provided. A framework can be defined in the configuration file by just using the flag name as root key e.g.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">verbose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">debug</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kubecfg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/kubeconfig/path</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">project-namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">garden-it</span></span></code></pre></div><p><strong>Report</strong></p><p>The framework automatically writes the ginkgo default report to stdout and a specifically structured elastichsearch bulk report file to a specified location. The elastichsearch bulk report will write one json document per testcase and injects the metadata of the whole testsuite. An example document for one test case would look like the following document:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;suite&quot;: {</span></span>
<span class="line"><span>        &quot;name&quot;: &quot;Shoot Test Suite&quot;,</span></span>
<span class="line"><span>        &quot;phase&quot;: &quot;Succeeded&quot;,</span></span>
<span class="line"><span>        &quot;tests&quot;: 3,</span></span>
<span class="line"><span>        &quot;failures&quot;: 1,</span></span>
<span class="line"><span>        &quot;errors&quot;: 0,</span></span>
<span class="line"><span>        &quot;time&quot;: 87.427</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;name&quot;: &quot;Shoot application testing  [DEFAULT] [RELEASE] [SHOOT] should download shoot kubeconfig successfully&quot;,</span></span>
<span class="line"><span>    &quot;shortName&quot;: &quot;should download shoot kubeconfig successfully&quot;,</span></span>
<span class="line"><span>    &quot;labels&quot;: [</span></span>
<span class="line"><span>        &quot;DEFAULT&quot;,</span></span>
<span class="line"><span>        &quot;RELEASE&quot;,</span></span>
<span class="line"><span>        &quot;SHOOT&quot;</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    &quot;phase&quot;: &quot;Succeeded&quot;,</span></span>
<span class="line"><span>    &quot;time&quot;: 0.724512057</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>Resources</strong></p><p>The resources directory contains templates used by the tests.</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resources</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">└── templates</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ├── guestbook-app.yaml.tpl</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    └── logger-app.yaml.tpl</span></span></code></pre></div><h3 id="system-tests" tabindex="-1">System Tests <a class="header-anchor" href="#system-tests" aria-label="Permalink to &quot;System Tests&quot;">​</a></h3><p>This directory contains the system tests that have a special meaning for the testmachinery with their own Test Definition. Currently, these system tests consist of:</p><ul><li>Shoot creation</li><li>Shoot deletion</li><li>Shoot Kubernetes update</li><li>Gardener Full reconcile check</li></ul><h4 id="shoot-creation-test" tabindex="-1">Shoot Creation Test <a class="header-anchor" href="#shoot-creation-test" aria-label="Permalink to &quot;Shoot Creation Test&quot;">​</a></h4><p>Create Shoot test is meant to test shoot creation.</p><p><strong>Example Run</strong></p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">go test  -timeout=0 ./test/testmachinery/system/shoot_creation \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --v -ginkgo.v -ginkgo.show-node-events \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -kubecfg=$HOME/.kube/config \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -shoot-name=$SHOOT_NAME \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -cloud-profile-name=$CLOUDPROFILE \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -seed=$SEED \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -secret-binding=$SECRET_BINDING \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -provider-type=$PROVIDER_TYPE \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -region=$REGION \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -k8s-version=$K8S_VERSION \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -project-namespace=$PROJECT_NAMESPACE \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -annotations=$SHOOT_ANNOTATIONS \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -infrastructure-provider-config-filepath=$INFRASTRUCTURE_PROVIDER_CONFIG_FILEPATH \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -controlplane-provider-config-filepath=$CONTROLPLANE_PROVIDER_CONFIG_FILEPATH \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -workers-config-filepath=$$WORKERS_CONFIG_FILEPATH \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -worker-zone=$ZONE \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -networking-pods=$NETWORKING_PODS \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -networking-services=$NETWORKING_SERVICES \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -networking-nodes=$NETWORKING_NODES \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -start-hibernated=$START_HIBERNATED</span></span></code></pre></div><h4 id="shoot-deletion-test" tabindex="-1">Shoot Deletion Test <a class="header-anchor" href="#shoot-deletion-test" aria-label="Permalink to &quot;Shoot Deletion Test&quot;">​</a></h4><p>Delete Shoot test is meant to test the deletion of a shoot.</p><p><strong>Example Run</strong></p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">go test  -timeout=0 -ginkgo.v -ginkgo.show-node-events \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ./test/testmachinery/system/shoot_deletion \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -kubecfg=$HOME/.kube/config \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -shoot-name=$SHOOT_NAME \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -project-namespace=$PROJECT_NAMESPACE</span></span></code></pre></div><h4 id="shoot-update-test" tabindex="-1">Shoot Update Test <a class="header-anchor" href="#shoot-update-test" aria-label="Permalink to &quot;Shoot Update Test&quot;">​</a></h4><p>The Update Shoot test is meant to test the Kubernetes version update of a existing shoot. If no specific version is provided, the next patch version is automatically selected. If there is no available newer version, this test is a noop.</p><p><strong>Example Run</strong></p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">go test  -timeout=0 ./test/testmachinery/system/shoot_update \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --v -ginkgo.v -ginkgo.show-node-events \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -kubecfg=$HOME/.kube/config \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -shoot-name=$SHOOT_NAME \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -project-namespace=$PROJECT_NAMESPACE \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -version=$K8S_VERSION</span></span></code></pre></div><h4 id="gardener-full-reconcile-test" tabindex="-1">Gardener Full Reconcile Test <a class="header-anchor" href="#gardener-full-reconcile-test" aria-label="Permalink to &quot;Gardener Full Reconcile Test&quot;">​</a></h4><p>The Gardener Full Reconcile test is meant to test if all shoots of a Gardener instance are successfully reconciled.</p><p><strong>Example Run</strong></p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">go test  -timeout=0 ./test/testmachinery/system/complete_reconcile \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --v -ginkgo.v -ginkgo.show-node-events \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -kubecfg=$HOME/.kube/config \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -project-namespace=$PROJECT_NAMESPACE \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -gardenerVersion=$GARDENER_VERSION # needed to validate the last acted gardener version of a shoot</span></span></code></pre></div><h2 id="container-images" tabindex="-1">Container Images <a class="header-anchor" href="#container-images" aria-label="Permalink to &quot;Container Images&quot;">​</a></h2><p>Test machinery tests usually deploy a workload to the Shoot cluster as part of the test execution. When introducing a new container image, consider the following:</p><ul><li>Make sure the container image is multi-arch. <ul><li>Tests are executed against <code>amd64</code> and <code>arm64</code> based worker Nodes.</li></ul></li><li>Do not use container images from Docker Hub. <ul><li>Docker Hub has rate limiting (see <a href="https://docs.docker.com/docker-hub/download-rate-limit/" target="_blank" rel="noreferrer">Download rate limit</a>). For anonymous users, the rate limit is set to 100 pulls per 6 hours per IP address. In some fenced environments the network setup can be such that all egress connections are issued from single IP (or set of IPs). In such scenarios the allowed rate limit can be exhausted too fast. See <a href="https://github.com/gardener/gardener/issues/4160" target="_blank" rel="noreferrer">https://github.com/gardener/gardener/issues/4160</a>.</li><li>Docker Hub registry doesn&#39;t support pulling images over IPv6 (see <a href="https://www.docker.com/blog/beta-ipv6-support-on-docker-hub-registry/" target="_blank" rel="noreferrer">Beta IPv6 Support on Docker Hub Registry</a>).</li><li>Avoid manually copying Docker Hub images to Gardener GCR (<code>europe-docker.pkg.dev/gardener-project/releases/3rd/</code>). Use the existing prow job for this (see <a href="https://github.com/gardener/ci-infra/tree/master/config/images" target="_blank" rel="noreferrer">Copy Images</a>).</li><li>If possible, use a Kubernetes e2e image (<code>registry.k8s.io/e2e-test-images/&lt;image-name&gt;</code>). <ul><li>In some cases, there is already a Kubernetes e2e image alternative of the Docker Hub image. <ul><li>For example, use <code>registry.k8s.io/e2e-test-images/busybox</code> instead of <code>europe-docker.pkg.dev/gardener-project/releases/3rd/busybox</code> or <code>docker.io/busybox</code>.</li></ul></li><li>Kubernetes has multiple test images - see <a href="https://github.com/kubernetes/kubernetes/tree/v1.27.0/test/images" target="_blank" rel="noreferrer">https://github.com/kubernetes/kubernetes/tree/v1.27.0/test/images</a>. <code>agnhost</code> is the most widely used image in Kubernetes e2e tests. It contains multiple testing related binaries inside such as <code>pause</code>, <code>logs-generator</code>, <code>serve-hostname</code>, <code>webhook</code> and others. See all of them in the <a href="https://github.com/kubernetes/kubernetes/blob/v1.27.0/test/images/agnhost/README.md" target="_blank" rel="noreferrer">agnhost&#39;s README.md</a>.</li><li>The list of available Kubernetes e2e images and tags can be checked in <a href="https://github.com/kubernetes/k8s.io/blob/main/registry.k8s.io/images/k8s-staging-e2e-test-images/images.yaml" target="_blank" rel="noreferrer">this page</a>.</li></ul></li></ul></li></ul>`,67)]))}const g=e(n,[["render",l]]);export{k as __pageData,g as default};
