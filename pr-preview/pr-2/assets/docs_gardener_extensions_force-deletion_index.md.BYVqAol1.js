import{_ as t,c as o,o as r,a2 as n}from"./chunks/framework.B8WFj13S.js";const p=JSON.parse('{"title":"Force Deletion","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/extensions","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/extensions/force-deletion.md","to":"force-deletion.md"},"title":"Force Deletion","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/extensions/force-deletion/index.md","filePath":"docs/gardener/extensions/force-deletion.md","lastUpdated":null}'),a={name:"docs/gardener/extensions/force-deletion/index.md"};function i(l,e,s,c,d,h){return r(),o("div",null,e[0]||(e[0]=[n('<h1 id="force-deletion" tabindex="-1">Force Deletion <a class="header-anchor" href="#force-deletion" aria-label="Permalink to &quot;Force Deletion&quot;">​</a></h1><p>From <code>v1.81</code>, Gardener supports <a href="/documentation/pr-preview/pr-2/docs/gardener/shoot-operations/shoot_operations/#force-deletion">Shoot Force Deletion</a>. All extension controllers should also properly support it. This document outlines some important points that extension maintainers should keep in mind to support force deletion in their extensions.</p><h2 id="overall-principles" tabindex="-1">Overall Principles <a class="header-anchor" href="#overall-principles" aria-label="Permalink to &quot;Overall Principles&quot;">​</a></h2><p>The following principles should always be upheld:</p><ul><li>All resources pertaining to the extension and managed by it should be appropriately handled and cleaned up by the extension when force deletion is initiated.</li></ul><h2 id="implementation-details" tabindex="-1">Implementation Details <a class="header-anchor" href="#implementation-details" aria-label="Permalink to &quot;Implementation Details&quot;">​</a></h2><h3 id="forcedelete-actuator-methods" tabindex="-1">ForceDelete Actuator Methods <a class="header-anchor" href="#forcedelete-actuator-methods" aria-label="Permalink to &quot;ForceDelete Actuator Methods&quot;">​</a></h3><p>Most extension controller implementations follow a common pattern where a generic <code>Reconciler</code> implementation delegates to an <code>Actuator</code> interface that contains the methods <code>Reconcile</code>, <code>Delete</code>, <code>Migrate</code> and <code>Restore</code> provided by the extension. A new method, <code>ForceDelete</code> has been added to all such <code>Actuator</code> interfaces; see <a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/infrastructure/actuator.go" target="_blank" rel="noreferrer">the infrastructure <code>Actuator</code> interface</a> as an example. The generic reconcilers call this method if the Shoot has annotation <code>confirmation.gardener.cloud/force-deletion=true</code>. Thus, it should be implemented by the extension controller to forcefully delete resources if not possible to delete them gracefully. If graceful deletion is possible, then in the <code>ForceDelete</code>, they can simply call the <code>Delete</code> method.</p><h3 id="extension-controllers-based-on-generic-actuators" tabindex="-1">Extension Controllers Based on Generic Actuators <a class="header-anchor" href="#extension-controllers-based-on-generic-actuators" aria-label="Permalink to &quot;Extension Controllers Based on Generic Actuators&quot;">​</a></h3><p>In practice, the implementation of many extension controllers (for example, the controlplane and worker controllers in most provider extensions) are based on a <em>generic <code>Actuator</code> implementation</em> that only delegates to extension methods for behavior that is truly provider-specific. In all such cases, the <code>ForceDelete</code> method has already been implemented with a method that should suit most of the extensions. If it doesn&#39;t suit your extension, then the <code>ForceDelete</code> method needs to be overridden; see the <a href="https://github.com/gardener/gardener-extension-provider-azure/tree/master/pkg/controller/controlplane" target="_blank" rel="noreferrer">Azure controlplane controller</a> as an example.</p><h3 id="extension-controllers-not-based-on-generic-actuators" tabindex="-1">Extension Controllers Not Based on Generic Actuators <a class="header-anchor" href="#extension-controllers-not-based-on-generic-actuators" aria-label="Permalink to &quot;Extension Controllers Not Based on Generic Actuators&quot;">​</a></h3><p>The implementation of some extension controllers (for example, the infrastructure controllers in all provider extensions) are not based on a generic <code>Actuator</code> implementation. Such extension controllers must always provide a proper implementation of the <code>ForceDelete</code> method according to the above guidelines; see the <a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/infrastructure" target="_blank" rel="noreferrer">AWS infrastructure controller</a> as an example. In practice, this might result in code duplication between the different extensions, since the <code>ForceDelete</code> code is usually not OS-specific.</p><h3 id="some-general-implementation-examples" tabindex="-1">Some General Implementation Examples <a class="header-anchor" href="#some-general-implementation-examples" aria-label="Permalink to &quot;Some General Implementation Examples&quot;">​</a></h3><ul><li>If the extension deploys only resources in the shoot cluster not backed by infrastructure in third-party systems, then performing the regular deletion code (<code>actuator.Delete</code>) will suffice in the majority of cases. (e.g - <a href="https://github.com/gardener/gardener-extension-shoot-networking-filter/blob/1d95a483d803874e8aa3b1de89431e221a7d574e/pkg/controller/lifecycle/actuator.go#L175-L178" target="_blank" rel="noreferrer">https://github.com/gardener/gardener-extension-shoot-networking-filter/blob/1d95a483d803874e8aa3b1de89431e221a7d574e/pkg/controller/lifecycle/actuator.go#L175-L178</a>)</li><li>If the extension deploys resources which are backed by infrastructure in third-party systems: <ul><li>If the resource is in the Seed cluster, the extension should remove the finalizers and delete the resource. This is needed especially if the resource is a custom resource since <code>gardenlet</code> will not be aware of this resource and cannot take action.</li><li>If the resource is in the Shoot and if it&#39;s deployed by a <code>ManagedResource</code>, then <code>gardenlet</code> will take care to forcefully delete it in a later step of force-deletion. If the resource is not deployed via a <code>ManagedResource</code>, then it wouldn&#39;t block the deletion flow anyway since it is in the Shoot cluster. In both cases, the extension controller can ignore the resource and return <code>nil</code>.</li></ul></li></ul>',14)]))}const m=t(a,[["render",i]]);export{p as __pageData,m as default};
