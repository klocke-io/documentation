import{_ as t,c as o,o as r,a2 as c}from"./chunks/framework.B8WFj13S.js";const u=JSON.parse('{"title":"Controllers","description":"","frontmatter":{"github_repo":"https://github.com/gardener/etcd-druid","github_subdir":"docs/development","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/other-components/etcd-druid/controllers.md","to":"controllers.md"},"persona":"Developers","title":"Controllers","prev":false,"next":false},"headers":[],"relativePath":"docs/other-components/etcd-druid/controllers/index.md","filePath":"docs/other-components/etcd-druid/controllers.md","lastUpdated":null}'),a={name:"docs/other-components/etcd-druid/controllers/index.md"};function d(s,e,n,i,l,h){return r(),o("div",null,e[0]||(e[0]=[c('<h1 id="controllers" tabindex="-1">Controllers <a class="header-anchor" href="#controllers" aria-label="Permalink to &quot;Controllers&quot;">​</a></h1><p>etcd-druid is an operator to manage etcd clusters, and follows the <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noreferrer"><code>Operator</code></a> pattern for Kubernetes. It makes use of the <a href="https://github.com/kubernetes-sigs/kubebuilder" target="_blank" rel="noreferrer">Kubebuilder</a> framework which makes it quite easy to define Custom Resources (CRs) such as <code>Etcd</code>s and <code>EtcdCopyBackupTask</code>s through <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/" target="_blank" rel="noreferrer"><em>Custom Resource Definitions</em></a> (CRDs), and define controllers for these CRDs. etcd-druid uses Kubebuilder to define the <code>Etcd</code> CR and its corresponding controllers.</p><p>All controllers that are a part of etcd-druid reside in package <code>internal/controller</code>, as sub-packages.</p><p>Etcd-druid currently consists of the following controllers, each having its own responsibility:</p><ul><li><em>etcd</em> : responsible for the reconciliation of the <code>Etcd</code> CR spec, which allows users to run etcd clusters within the specified Kubernetes cluster, and also responsible for periodically updating the <code>Etcd</code> CR status with the up-to-date state of the managed etcd cluster.</li><li><em>compaction</em> : responsible for <a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot compaction</a>.</li><li><em>etcdcopybackupstask</em> : responsible for the reconciliation of the <code>EtcdCopyBackupsTask</code> CR, which helps perform the job of copying snapshot backups from one object store to another.</li><li><em>secret</em> : responsible in making sure <code>Secret</code>s being referenced by <code>Etcd</code> resources are not deleted while in use.</li></ul><h2 id="package-structure" tabindex="-1">Package Structure <a class="header-anchor" href="#package-structure" aria-label="Permalink to &quot;Package Structure&quot;">​</a></h2><p>The typical package structure for the controllers that are part of etcd-druid is shown with the <em>compaction controller</em>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">internal/controller/compaction</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.go</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reconciler.go</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register.go</span></span></code></pre></div><ul><li><code>config.go</code>: contains all the logic for the configuration of the controller, including feature gate activations, CLI flag parsing and validations.</li><li><code>register.go</code>: contains the logic for registering the controller with the etcd-druid controller manager.</li><li><code>reconciler.go</code>: contains the controller reconciliation logic.</li></ul><p>Each controller package also contains auxiliary files which are relevant to that specific controller.</p><h2 id="controller-manager" tabindex="-1">Controller Manager <a class="header-anchor" href="#controller-manager" aria-label="Permalink to &quot;Controller Manager&quot;">​</a></h2><p>A <em>manager</em> is first created for all controllers that are a part of etcd-druid. The <em>controller manager</em> is responsible for all the controllers that are associated with CRDs. Once the manager is <code>Start()</code>ed, all the controllers that are <em>registered</em> with it are started.</p><p>Each controller is built using a controller builder, configured with details such as the type of object being reconciled, owned objects whose owner object is reconciled, event filters (predicates), etc. <code>Predicates</code> are filters which allow controllers to filter which type of events the controller should respond to and which ones to ignore.</p><p>The logic relevant to the controller manager like the creation of the controller manager and registering each of the controllers with the manager, is contained in <a href="https://github.com/gardener/etcd-druid/blob/master/internal/manager/manager.go" target="_blank" rel="noreferrer"><code>internal/manager/manager.go</code></a>.</p><h2 id="etcd-controller" tabindex="-1">Etcd Controller <a class="header-anchor" href="#etcd-controller" aria-label="Permalink to &quot;Etcd Controller&quot;">​</a></h2><p>The <em>etcd controller</em> is responsible for the reconciliation of the <code>Etcd</code> resource spec and status. It handles the provisioning and management of the etcd cluster. Different components that are required for the functioning of the cluster like <code>Leases</code>, <code>ConfigMap</code>s, and the <code>Statefulset</code> for the etcd cluster are all deployed and managed by the <em>etcd controller</em>.</p><p>Additionally, <em>etcd controller</em> also periodically updates the <code>Etcd</code> resource status with the latest available information from the etcd cluster, as well as results and errors from the recent-most reconciliation of the <code>Etcd</code> resource spec.</p><p>The <em>etcd controller</em> is essential to the functioning of the etcd cluster and etcd-druid, thus the minimum number of worker threads is 1 (default being 3), controlled by the CLI flag <code>--etcd-workers</code>.</p><h3 id="etcd-spec-reconciliation" tabindex="-1"><code>Etcd</code> Spec Reconciliation <a class="header-anchor" href="#etcd-spec-reconciliation" aria-label="Permalink to &quot;`Etcd` Spec Reconciliation&quot;">​</a></h3><p>While building the controller, an event filter is set such that the behavior of the controller, specifically for <code>Etcd</code> update operations, depends on the <code>gardener.cloud/operation: reconcile</code> <em>annotation</em>. This is controlled by the <code>--enable-etcd-spec-auto-reconcile</code> CLI flag, which, if set to <code>false</code>, tells the controller to perform reconciliation only when this annotation is present. If the flag is set to <code>true</code>, the controller will reconcile the etcd cluster anytime the <code>Etcd</code> spec, and thus <code>generation</code>, changes, and the next queued event for it is triggered.</p><p>!!! note Creation and deletion of <code>Etcd</code> resources are not affected by the above flag or annotation.</p><p>The reason this filter is present is that any disruption in the <code>Etcd</code> resource due to reconciliation (due to changes in the <code>Etcd</code> spec, for example) while workloads are being run would cause unwanted downtimes to the etcd cluster. Hence, any user who wishes to avoid such disruptions, can choose to set the <code>--enable-etcd-spec-auto-reconcile</code> CLI flag to <code>false</code>. An example of this is Gardener&#39;s <a href="https://github.com/gardener/gardener/blob/676d1bd9e95d80b9f4bc9c56807806031da5d1ce/docs/concepts/gardenlet.md" target="_blank" rel="noreferrer">gardenlet</a>, which reconciles the <code>Etcd</code> resource only during a shoot cluster&#39;s <a href="https://github.com/gardener/gardener/blob/676d1bd9e95d80b9f4bc9c56807806031da5d1ce/docs/usage/shoot/shoot_maintenance.md" target="_blank" rel="noreferrer"><em>maintenance window</em></a>.</p><p>The controller adds a finalizer to the <code>Etcd</code> resource in order to ensure that it does not get deleted until all dependent resources managed by etcd-druid, aka managed components, are properly cleaned up. Only the <em>etcd controller</em> can delete a resource once it adds finalizers to it. This ensures that the proper deletion flow steps are followed while deleting the resource. During deletion flow, managed components are deleted in parallel.</p><h3 id="etcd-status-updates" tabindex="-1"><code>Etcd</code> Status Updates <a class="header-anchor" href="#etcd-status-updates" aria-label="Permalink to &quot;`Etcd` Status Updates&quot;">​</a></h3><p>The <code>Etcd</code> resource status is updated periodically by <code>etcd controller</code>, the interval for which is determined by the CLI flag <code>--etcd-status-sync-period</code>.</p><p>Status fields of the <code>Etcd</code> resource such as <code>LastOperation</code>, <code>LastErrors</code> and <code>ObservedGeneration</code>, are updated to reflect the result of the recent reconciliation of the <code>Etcd</code> resource spec.</p><ul><li><code>LastOperation</code> holds information about the last operation performed on the etcd cluster, indicated by fields <code>Type</code>, <code>State</code>, <code>Description</code> and <code>LastUpdateTime</code>. Additionally, a field <code>RunID</code> indicates the unique ID assigned to the specific reconciliation run, to allow for better debugging of issues.</li><li><code>LastErrors</code> is a slice of errors encountered by the last reconciliation run. Each error consists of fields <code>Code</code> to indicate the custom etcd-druid error code for the error, a human-readable <code>Description</code>, and the <code>ObservedAt</code> time when the error was seen.</li><li><code>ObservedGeneration</code> indicates the latest <code>generation</code> of the <code>Etcd</code> resource that etcd-druid has &quot;observed&quot; and consequently reconciled. It helps identify whether a change in the <code>Etcd</code> resource spec was acted upon by druid or not.</li></ul><p>Status fields of the <code>Etcd</code> resource which correspond to the <code>StatefulSet</code> like <code>CurrentReplicas</code>, <code>ReadyReplicas</code> and <code>Replicas</code> are updated to reflect those of the <code>StatefulSet</code> by the controller.</p><p>Status fields related to the etcd cluster itself, such as <code>Members</code>, <code>PeerUrlTLSEnabled</code> and <code>Ready</code> are updated as follows:</p><ul><li>Cluster Membership: The controller updates the information about etcd cluster membership like <code>Role</code>, <code>Status</code>, <code>Reason</code>, <code>LastTransitionTime</code> and identifying information like the <code>Name</code> and <code>ID</code>. For the <code>Status</code> field, the member is checked for the <em>Ready</em> condition, where the member can be in <code>Ready</code>, <code>NotReady</code> and <code>Unknown</code> statuses.</li></ul><p><code>Etcd</code> resource conditions are indicated by status field <code>Conditions</code>. The condition checks that are currently performed are:</p><ul><li><code>AllMembersReady</code>: indicates readiness of all members of the etcd cluster.</li><li><code>Ready</code>: indicates overall readiness of the etcd cluster in serving traffic.</li><li><code>BackupReady</code>: indicates health of the etcd backups, i.e., whether etcd backups are being taken regularly as per schedule. This condition is applicable only when backups are enabled for the etcd cluster.</li><li><code>DataVolumesReady</code>: indicates health of the persistent volumes containing the etcd data.</li></ul><h2 id="compaction-controller" tabindex="-1">Compaction Controller <a class="header-anchor" href="#compaction-controller" aria-label="Permalink to &quot;Compaction Controller&quot;">​</a></h2><p>The <em>compaction controller</em> deploys the snapshot compaction job whenever required. To understand the rationale behind this controller, please read <a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot-compaction.md</a>. The controller watches the number of events accumulated as part of delta snapshots in the etcd cluster&#39;s backups, and triggers a snapshot compaction when the number of delta events crosses the set threshold, which is configurable through the <code>--etcd-events-threshold</code> CLI flag (1M events by default).</p><p>The controller watches for changes in <em>snapshot</em> <code>Leases</code> associated with <code>Etcd</code> resources. It checks the full and delta snapshot <code>Leases</code> and calculates the difference in events between the latest delta snapshot and the previous full snapshot, and initiates the compaction job if the event threshold is crossed.</p><p>The number of worker threads for the <em>compaction controller</em> needs to be greater than or equal to 0 (default 3), controlled by the CLI flag <code>--compaction-workers</code>. This is unlike other controllers which need at least one worker thread for the proper functioning of etcd-druid as snapshot compaction is not a core functionality for the etcd clusters to be deployed. The compaction controller should be explicitly enabled by the user, through the <code>--enable-backup-compaction</code> CLI flag.</p><h2 id="etcdcopybackupstask-controller" tabindex="-1">EtcdCopyBackupsTask Controller <a class="header-anchor" href="#etcdcopybackupstask-controller" aria-label="Permalink to &quot;EtcdCopyBackupsTask Controller&quot;">​</a></h2><p>The <em>etcdcopybackupstask controller</em> is responsible for deploying the <a href="https://github.com/gardener/etcd-backup-restore/blob/master/cmd/copy.go" target="_blank" rel="noreferrer"><code>etcdbrctl copy</code></a> command as a job. This controller reacts to create/update events arising from EtcdCopyBackupsTask resources, and deploys the <code>EtcdCopyBackupsTask</code> job with source and target backup storage providers as arguments, which are derived from source and target bucket secrets referenced by the <code>EtcdCopyBackupsTask</code> resource.</p><p>The number of worker threads for the <em>etcdcopybackupstask controller</em> needs to be greater than or equal to 0 (default being 3), controlled by the CLI flag <code>--etcd-copy-backups-task-workers</code>. This is unlike other controllers who need at least one worker thread for the proper functioning of etcd-druid as <code>EtcdCopyBackupsTask</code> is not a core functionality for the etcd clusters to be deployed.</p><h2 id="secret-controller" tabindex="-1">Secret Controller <a class="header-anchor" href="#secret-controller" aria-label="Permalink to &quot;Secret Controller&quot;">​</a></h2><p>The <em>secret controller</em>&#39;s primary responsibility is to add a finalizer on <code>Secret</code>s referenced by the <code>Etcd</code> resource. The <em>secret controller</em> is registered for <code>Secret</code>s, and the controller keeps a watch on the <code>Etcd</code> CR. This finalizer is added to ensure that <code>Secret</code>s which are referenced by the <code>Etcd</code> CR aren&#39;t deleted while still being used by the <code>Etcd</code> resource.</p><p>Events arising from the <code>Etcd</code> resource are mapped to a list of <code>Secret</code>s such as backup and TLS secrets that are referenced by the <code>Etcd</code> resource, and are enqueued into the request queue, which the reconciler then acts on.</p><p>The number of worker threads for the secret controller must be at least 1 (default being 10) for this core controller, controlled by the CLI flag <code>--secret-workers</code>, since the referenced TLS and infrastructure access secrets are essential to the proper functioning of the etcd cluster.</p>',43)]))}const f=t(a,[["render",d]]);export{u as __pageData,f as default};
