import{_ as t,c as s,o as i,a2 as a}from"./chunks/framework.Bfq10Vlj.js";const g=JSON.parse('{"title":"Testing","description":"","frontmatter":{"github_repo":"https://github.com/gardener/etcd-druid","github_subdir":"docs/development","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/other-components/etcd-druid/testing.md","to":"testing.md"},"persona":"Developers","title":"Testing","prev":false,"next":false},"headers":[],"relativePath":"docs/other-components/etcd-druid/testing/index.md","filePath":"docs/other-components/etcd-druid/testing.md","lastUpdated":null}'),n={name:"docs/other-components/etcd-druid/testing/index.md"};function r(l,e,o,h,d,p){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="testing-strategy-and-developer-guideline" tabindex="-1">Testing Strategy and Developer Guideline <a class="header-anchor" href="#testing-strategy-and-developer-guideline" aria-label="Permalink to &quot;Testing Strategy and Developer Guideline&quot;">​</a></h1><p>Intent of this document is to introduce you (the developer) to the following:</p><ul><li>Libraries that are used to write tests.</li><li>Best practices to write tests that are correct, stable, fast and maintainable.</li><li>How to run tests.</li></ul><p>The guidelines are not meant to be absolute rules. Always apply common sense and adapt the guideline if it doesn&#39;t make much sense for some cases. If in doubt, don&#39;t hesitate to ask questions during a PR review (as an author, but also as a reviewer). Add new learnings as soon as we make them!</p><p>For any new contributions <strong>tests are a strict requirement</strong>. <code>Boy Scouts Rule</code> is followed: If you touch a code for which either no tests exist or coverage is insufficient then it is expected that you will add relevant tests.</p><h2 id="common-guidelines-for-writing-tests" tabindex="-1">Common guidelines for writing tests <a class="header-anchor" href="#common-guidelines-for-writing-tests" aria-label="Permalink to &quot;Common guidelines for writing tests&quot;">​</a></h2><ul><li><p>We use the <code>Testing</code> package provided by the standard library in golang for writing all our tests. Refer to its <a href="https://pkg.go.dev/testing" target="_blank" rel="noreferrer">official documentation</a> to learn how to write tests using <code>Testing</code> package. You can also refer to <a href="https://go.dev/doc/tutorial/add-a-test" target="_blank" rel="noreferrer">this</a> example.</p></li><li><p>We use gomega as our matcher or assertion library. Refer to Gomega&#39;s <a href="https://onsi.github.io/gomega/" target="_blank" rel="noreferrer">official documentation</a> for details regarding its installation and application in tests.</p></li><li><p>For naming the individual test/helper functions, ensure that the name describes what the function tests/helps-with. Naming is important for code readability even when writing tests - <a href="https://github.com/gardener/etcd-druid/blob/90995898b231a49a8f211e85160600e9e6019fe0/internal/webhook/etcdcomponents/handler_test.go#L157" target="_blank" rel="noreferrer">example-testcase-naming</a>.</p></li><li><p>Introduce helper functions for assertions to make test more readable where applicable - <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/test/it/controller/etcd/assertions.go#L117" target="_blank" rel="noreferrer">example-assertion-function</a>.</p></li><li><p>Introduce custom matchers to make tests more readable where applicable - <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/test/utils/matcher.go#L89" target="_blank" rel="noreferrer">example-custom-matcher</a>.</p></li><li><p>Do not use <code>time.Sleep</code> and friends as it renders the tests flaky.</p></li><li><p>If a function returns a specific error then ensure that the test correctly asserts the expected error instead of just asserting that an error occurred. To help make this assertion consider using <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/internal/errors/errors.go#L24" target="_blank" rel="noreferrer">DruidError</a> where possible. <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/test/utils/errors.go#L23" target="_blank" rel="noreferrer">example-test-utility</a> &amp; <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/internal/component/clientservice/clientservice_test.go#L74" target="_blank" rel="noreferrer">usage</a>.</p></li><li><p>Creating sample data for tests can be a high effort. Consider writing test utilities to generate sample data instead. <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/test/utils/etcd.go#L61" target="_blank" rel="noreferrer">example-test-object-builder</a>.</p></li><li><p>If tests require any arbitrary sample data then ensure that you create a <code>testdata</code> directory within the package and keep the sample data as files in it. From <a href="https://pkg.go.dev/cmd/go/internal/test" target="_blank" rel="noreferrer">https://pkg.go.dev/cmd/go/internal/test</a></p><blockquote><p>The go tool will ignore a directory named &quot;testdata&quot;, making it available to hold ancillary data needed by the tests.</p></blockquote></li><li><p>Avoid defining shared variable/state across tests. This can lead to race conditions causing non-deterministic state. Additionally it limits the capability to run tests concurrently via <code>t.Parallel()</code>.</p></li><li><p>Do not assume or try and establish an order amongst different tests. This leads to brittle tests as the codebase evolves.</p></li><li><p>If you need to have logs produced by test runs (especially helpful in failing tests), then consider using <a href="https://pkg.go.dev/testing#T.Log" target="_blank" rel="noreferrer">t.Log</a> or <a href="https://pkg.go.dev/testing#T.Logf" target="_blank" rel="noreferrer">t.Logf</a>.</p></li></ul><h2 id="unit-tests" tabindex="-1">Unit Tests <a class="header-anchor" href="#unit-tests" aria-label="Permalink to &quot;Unit Tests&quot;">​</a></h2><ul><li>If you need a kubernetes <code>client.Client</code>, prefer using <a href="https://github.com/gardener/etcd-druid/blob/master/test/utils/client.go#L67" target="_blank" rel="noreferrer">fake client</a> instead of mocking the client. You can inject errors when building the client which enables you test error handling code paths. <ul><li>Mocks decrease maintainability because they expect the tested component to follow a certain way to reach the desired goal (e.g., call specific functions with particular arguments).</li></ul></li><li>All unit tests should be run quickly. Do not use <a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/envtest" target="_blank" rel="noreferrer">envtest</a> and do not set up a <a href="https://kind.sigs.k8s.io/" target="_blank" rel="noreferrer">Kind</a> cluster in unit tests.</li><li>If you have common setup for variations of a function, consider using <a href="https://go.dev/wiki/TableDrivenTests" target="_blank" rel="noreferrer">table-driven</a> tests. See <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/internal/component/rolebinding/rolebinding_test.go#L27" target="_blank" rel="noreferrer">this</a> as an example.</li><li>An individual test should only test one and only one thing. Do not try and test multiple variants in a single test. Either use <a href="https://go.dev/wiki/TableDrivenTests" target="_blank" rel="noreferrer">table-driven</a> tests or write individual tests for each variation.</li><li>If a function/component has multiple steps, its probably better to split/refactor it into multiple functions/components that can be unit tested individually.</li><li>If there are a lot of edge cases, extract dedicated functions that cover them and use unit tests to test them.</li></ul><h3 id="running-unit-tests" tabindex="-1">Running Unit Tests <a class="header-anchor" href="#running-unit-tests" aria-label="Permalink to &quot;Running Unit Tests&quot;">​</a></h3><p>!!! info For unit tests we are currently transitioning away from <a href="https://github.com/onsi/ginkgo" target="_blank" rel="noreferrer">ginkgo</a> to using golang native tests. The <code>make test-unit</code> target runs both ginkgo and golang native tests. Once the transition is complete this target will be simplified.</p><p>Run all unit tests</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-unit</span></span></code></pre></div><p>Run unit tests of specific packages:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># if you have not already installed gotestfmt tool then install it once.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># make test-unit target automatically installs this in ./hack/tools/bin. You can alternatively point the GOBIN to this directory and then directly invoke test-go.sh</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@v2.5.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./hack/test-go.sh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">1&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2&gt;</span></span></code></pre></div><h3 id="de-flaking-unit-tests" tabindex="-1">De-flaking Unit Tests <a class="header-anchor" href="#de-flaking-unit-tests" aria-label="Permalink to &quot;De-flaking Unit Tests&quot;">​</a></h3><p>If tests have sporadic failures, then trying running <code>./hack/stress-test.sh</code> which internally uses <a href="https://pkg.go.dev/golang.org/x/tools/cmd/stress" target="_blank" rel="noreferrer">stress tool</a>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># install the stress tool</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> golang.org/x/tools/cmd/stress@latest</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># invoke the helper script to execute the stress test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hack/stress-test.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-package=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test-packag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-func=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test-functio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool-params=&quot;&lt;tool-params&gt;&quot;</span></span></code></pre></div><p>An example invocation:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hack/stress-test.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-package=./internal/utils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-func=TestRunConcurrentlyWithAllSuccessfulTasks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool-params=&quot;-p 10&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5s:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 877</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> far,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failures</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10s:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1906</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> far,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failures</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">15s:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2885</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> so</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> far,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failures</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p><code>stress</code> tool will output a path to a file containing the full failure message when a test run fails.</p><h2 id="integration-tests-envtests" tabindex="-1">Integration Tests (envtests) <a class="header-anchor" href="#integration-tests-envtests" aria-label="Permalink to &quot;Integration Tests (envtests)&quot;">​</a></h2><p>Integration tests in etcd-druid use <a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/envtest" target="_blank" rel="noreferrer">envtest</a>. It sets up a minimal temporary control plane (etcd + kube-apiserver) and runs the test against it. Test suites (group of tests) start their individual <code>envtest</code> environment before running the tests for the respective controller/webhook. Before exiting, the temporary test environment is shutdown.</p><p>!!! info For integration-tests we are currently transitioning away from <a href="https://github.com/onsi/ginkgo" target="_blank" rel="noreferrer">ginkgo</a> to using golang native tests. All ginkgo integration tests can be found <a href="https://github.com/gardener/etcd-druid/tree/4e9971aba3c3880a4cb6583d05843eabb8ca1409/test/integration" target="_blank" rel="noreferrer">here</a> and golang native integration tests can be found <a href="https://github.com/gardener/etcd-druid/tree/4e9971aba3c3880a4cb6583d05843eabb8ca1409/test/it" target="_blank" rel="noreferrer">here</a>.</p><ul><li>Integration tests in etcd-druid only targets a single controller. It is therefore advised that code (other than common utility functions should not be shared between any two controllers).</li><li>If you are sharing a common <code>envtest</code> environment across tests then it is recommended that an individual test is run in a dedicated <code>namespace</code>.</li><li>Since <code>envtest</code> is used to setup a minimum environment where no controller (e.g. KCM, Scheduler) other than <code>etcd</code> and <code>kube-apiserver</code> runs, status updates to resources controller/reconciled by not-deployed-controllers will not happen. Tests should refrain from asserting changes to status. In case status needs to be set as part of a test setup then it must be done explicitly.</li><li>If you have common setup and teardown, then consider using <a href="https://pkg.go.dev/testing#hdr-Main" target="_blank" rel="noreferrer">TestMain</a> -<a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/test/it/controller/etcd/reconciler_test.go#L34" target="_blank" rel="noreferrer">example</a>.</li><li>If you have to wait for resources to be provisioned or reach a specific state, then it is recommended that you create smaller assertion functions and use Gomega&#39;s <a href="https://pkg.go.dev/github.com/onsi/gomega#AsyncAssertion" target="_blank" rel="noreferrer">AsyncAssertion</a> functions - <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/test/it/controller/etcd/assertions.go#L117-L140" target="_blank" rel="noreferrer">example</a>. <ul><li>Beware of the default <code>Eventually</code> / <code>Consistently</code> timeouts / poll intervals: <a href="https://onsi.github.io/gomega/#eventually" target="_blank" rel="noreferrer">docs</a>.</li><li>Don&#39;t forget to call <code>{Eventually,Consistently}.Should()</code>, otherwise the assertions always silently succeeds without errors: <a href="https://github.com/onsi/gomega/issues/561" target="_blank" rel="noreferrer">onsi/gomega#561</a></li></ul></li></ul><h3 id="running-integration-tests" tabindex="-1">Running Integration Tests <a class="header-anchor" href="#running-integration-tests" aria-label="Permalink to &quot;Running Integration Tests&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-integration</span></span></code></pre></div><h3 id="debugging-integration-tests" tabindex="-1">Debugging Integration Tests <a class="header-anchor" href="#debugging-integration-tests" aria-label="Permalink to &quot;Debugging Integration Tests&quot;">​</a></h3><p>There are two ways in which you can debug Integration Tests:</p><h4 id="using-ide" tabindex="-1">Using IDE <a class="header-anchor" href="#using-ide" aria-label="Permalink to &quot;Using IDE&quot;">​</a></h4><p>All commonly used IDE&#39;s provide in-built or easy integration with <a href="https://pkg.go.dev/github.com/go-delve/delve" target="_blank" rel="noreferrer">delve</a> debugger. For debugging integration tests the only additional requirement is to set <code>KUBEBUILDER_ASSETS</code> environment variable. You can get the value of this environment variable by executing the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ENVTEST_K8S_VERSION is the k8s version that you wish to use for testing.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setup-envtest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --os</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GOOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--arch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GOARCH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ENVTEST_K8S_VERSION </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path</span></span></code></pre></div><p>!!! tip All integration tests usually have a timeout. If you wish to debug a failing integration-test then increase the timeouts.</p><h4 id="use-standalone-envtest" tabindex="-1">Use standalone envtest <a class="header-anchor" href="#use-standalone-envtest" aria-label="Permalink to &quot;Use standalone envtest&quot;">​</a></h4><p>We also provide a capability to setup a stand-alone <code>envtest</code> and leverage the cluster to run individual integration-test. This allows you more control over when this k8s control plane is destroyed and allows you to inspect the resources at the end of the integration-test run using <code>kubectl</code>.</p><blockquote><p>While you can use an existing cluster (e.g., <code>kind</code>), some test suites expect that no controllers and no nodes are running in the test environment (as it is the case in <code>envtest</code> test environments). Hence, using a full-blown cluster with controllers and nodes might sometimes be impractical, as you would need to stop cluster components for the tests to work.</p></blockquote><p>To setup a standalone <code>envtest</code> and run an integration test against it, do the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In a terminal session use the following make target to setup a standalone envtest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start-envtest</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># As part of output path to kubeconfig will be also be printed on the console.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In another terminal session setup resource(s) watch:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> po</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # alternatively you can also use \`watch -d &lt;command&gt;\` utility.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In another terminal session:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KUBECONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">envtest-kubeconfig-path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USE_EXISTING_K8S_CLUSTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run the test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -run=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;regex-for-test&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># example: go test -run=&quot;^TestEtcdDeletion/test deletion of all*&quot; ./test/it/controller/etcd</span></span></code></pre></div><p>Once you are done the testing you can press <code>Ctrl+C</code> in the terminal session where you started <code>envtest</code>. This will shutdown the kubernetes control plane.</p><h2 id="end-to-end-e2e-tests" tabindex="-1">End-To-End (e2e) Tests <a class="header-anchor" href="#end-to-end-e2e-tests" aria-label="Permalink to &quot;End-To-End (e2e) Tests&quot;">​</a></h2><p>End-To-End tests are run using <a href="https://kind.sigs.k8s.io/" target="_blank" rel="noreferrer">Kind</a> cluster and <a href="https://skaffold.dev/" target="_blank" rel="noreferrer">Skaffold</a>. These tests provide a high level of confidence that the code runs as expected by users when deployed to production.</p><ul><li><p>Purpose of running these tests is to be able to catch bugs which result from interaction amongst different components within etcd-druid.</p></li><li><p>In CI pipelines e2e tests are run with S3 compatible <a href="https://www.localstack.cloud/" target="_blank" rel="noreferrer">LocalStack</a> (in cases where backup functionality has been enabled for an etcd cluster).</p><blockquote><p>In future we will only be using a file-system based local provider to reduce the run times for the e2e tests when run in a CI pipeline.</p></blockquote></li><li><p>e2e tests can be triggered either with other cloud provider object-store emulators or they can also be run against actual/remove cloud provider object-store services.</p></li><li><p>In contrast to integration tests, in e2e tests, it might make sense to specify higher timeouts for Gomega&#39;s <a href="https://pkg.go.dev/github.com/onsi/gomega#AsyncAssertion" target="_blank" rel="noreferrer">AsyncAssertion</a> calls.</p></li></ul><h3 id="running-e2e-tests-locally" tabindex="-1">Running e2e tests locally <a class="header-anchor" href="#running-e2e-tests-locally" aria-label="Permalink to &quot;Running e2e tests locally&quot;">​</a></h3><p>Detailed instructions on how to run e2e tests can be found <a href="https://github.com/gardener/etcd-druid/blob/4e9971aba3c3880a4cb6583d05843eabb8ca1409/docs/development/local-e2e-tests.md" target="_blank" rel="noreferrer">here</a>.</p>`,44)]))}const k=t(n,[["render",r]]);export{g as __pageData,k as default};
