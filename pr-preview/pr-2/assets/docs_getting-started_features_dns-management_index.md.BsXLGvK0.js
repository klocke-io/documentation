import{_ as t,c as a,o as n,a2 as r}from"./chunks/framework.B8WFj13S.js";const o="/documentation/pr-preview/pr-2/assets/automate-dns-management.BYho5aiA.png",s="/documentation/pr-preview/pr-2/assets/dns-provider.CJ6vf_O_.png",h=JSON.parse('{"title":"External DNS Management","description":"","frontmatter":{"github_repo":"https://github.com/gardener/documentation","github_subdir":"website/documentation/getting-started/features","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/getting-started/features/dns-management.md","to":"dns-management.md"},"title":"External DNS Management","weight":4,"prev":false,"next":false},"headers":[],"relativePath":"docs/getting-started/features/dns-management/index.md","filePath":"docs/getting-started/features/dns-management.md","lastUpdated":null}'),i={name:"docs/getting-started/features/dns-management/index.md"};function d(l,e,m,c,u,p){return n(),a("div",null,e[0]||(e[0]=[r('<h1 id="external-dns-management" tabindex="-1">External DNS Management <a class="header-anchor" href="#external-dns-management" aria-label="Permalink to &quot;External DNS Management&quot;">​</a></h1><p>When you deploy to Kubernetes, there is no native management of external DNS. Instead, the cloud-controller-manager requests (mostly IPv4) addresses for every service of type LoadBalancer. Of course, the Ingress resource helps here, but how is the external DNS entry for the ingress controller managed?</p><p>Essentially, some sort of automation for DNS management is missing.</p><h2 id="automating-dns-management" tabindex="-1">Automating DNS Management <a class="header-anchor" href="#automating-dns-management" aria-label="Permalink to &quot;Automating DNS Management&quot;">​</a></h2><p><img src="'+o+'" alt="automate-dns-management"></p><p>From a user&#39;s perspective, it is desirable to work with already known resources and concepts. Hence, the DNS management offered by Gardener plugs seamlessly into Kubernetes resources and you do not need to &quot;leave&quot; the context of the shoot cluster.</p><p>To request a DNS record creation / update, a Service or Ingress resource is annotated accordingly. The shoot-dns-service extension will (if configured) will pick up the request and create a DNSEntry resource + reconcile it to have an actual DNS record created at a configured DNS provider. Gardener supports the following providers:</p><ul><li>aws-route53</li><li>azure-dns</li><li>azure-private-dns</li><li>google-clouddns</li><li>openstack-designate</li><li>alicloud-dns</li><li>cloudflare-dns</li></ul><p>For more information, see <a href="documentation/pr-preview/pr-2/docs/guides/networking/dns-extension/">DNS Names</a>.</p><h2 id="dns-provider" tabindex="-1">DNS Provider <a class="header-anchor" href="#dns-provider" aria-label="Permalink to &quot;DNS Provider&quot;">​</a></h2><p>For the above to work, we need some ingredients. Primarily, this is implemented via a so-called DNSProvider. Every shoot has a default provider that is used to set up the API server&#39;s public DNS record. It can be used to request sub-domains as well.</p><p><img src="'+s+'" alt=""></p><p>In addition, a shoot can reference credentials to a DNS provider. Those can be used to manage custom domains.</p><p>Please have a look at the <a href="https://gardener.cloud/docs/guides/networking/dns-extension/" target="_blank" rel="noreferrer">documentation</a> for further details.</p>',14)]))}const f=t(i,[["render",d]]);export{h as __pageData,f as default};
