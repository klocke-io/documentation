import{_ as a,c as t,o as s,a2 as o}from"./chunks/framework.B8WFj13S.js";const i="/documentation/pr-preview/pr-2/assets/blog-service-common-stack.DJ8pCB6e.png",n="/documentation/pr-preview/pr-2/assets/blog-service-service-stack.BUVD2IMw.png",u=JSON.parse('{"title":"Big Things Come in Small Packages","description":"","frontmatter":{"archivedate":"2018-07-11","authors":[{"avatar":"https://avatars1.githubusercontent.com/u/1155039?v=4","email":"andreas.herz@sap.com","name":"Andreas Herz"}],"github_repo":"https://github.com/gardener/documentation","github_subdir":"website/blog/2018","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/blog/2018/06.11-Big-things-come-in-small-packages.md","to":"06.11-Big-things-come-in-small-packages.md"},"publishdate":"2018-06-11","title":"Big Things Come in Small Packages"},"headers":[],"relativePath":"blog/2018/06.11-Big-things-come-in-small-packages/index.md","filePath":"blog/2018/06.11-Big-things-come-in-small-packages.md","lastUpdated":null}'),r={name:"blog/2018/06.11-Big-things-come-in-small-packages/index.md"};function c(l,e,h,g,m,p){return s(),t("div",null,e[0]||(e[0]=[o('<h1 id="big-things-come-in-small-packages" tabindex="-1">Big Things Come in Small Packages <a class="header-anchor" href="#big-things-come-in-small-packages" aria-label="Permalink to &quot;Big Things Come in Small Packages&quot;">​</a></h1><p>Microservices tend to use smaller runtimes but you can <strong>use what you have</strong> today - and this can be a <strong>problem in Kubernetes</strong>.</p><p>Switching your architecture from a monolith to microservices has many advantages, both in the way you write software and the way it is used throughout its lifecycle. In this post, my attempt is to cover one problem which does not get as much attention and discussion - <strong>size of the technology stack</strong>.</p><h2 id="general-purpose-technology-stack" tabindex="-1">General Purpose Technology Stack <a class="header-anchor" href="#general-purpose-technology-stack" aria-label="Permalink to &quot;General Purpose Technology Stack&quot;">​</a></h2><p><img src="'+i+'" alt="service-common-stack"></p><p>There is a tendency to be more generalized in development and to apply this pattern to all services. One feels that a homogeneous image of the technology stack is good if it is the same for all services.</p><p>One forgets, however, that a large percentage of the integrated infrastructure is not used by all services in the same way, and is therefore only a burden. Thus, resources are wasted and the entire application becomes expensive in operation and scales very badly.</p><h2 id="light-technology-stack" tabindex="-1">Light Technology Stack <a class="header-anchor" href="#light-technology-stack" aria-label="Permalink to &quot;Light Technology Stack&quot;">​</a></h2><p>Due to the lightweight nature of your service, you can run more containers on a physical server and virtual machines. The result is higher resource utilization.</p><p><img src="'+n+'" alt="service-service-stack"></p><p>Additionally, microservices are developed and deployed as containers independently of each another. This means that a development team can develop, optimize, and deploy a microservice without impacting other subsystems.</p>',11)]))}const b=a(r,[["render",c]]);export{u as __pageData,b as default};
