import{_ as t,c as a,o as s,a2 as n}from"./chunks/framework.Bfq10Vlj.js";const g=JSON.parse('{"title":"Dependencies","description":"","frontmatter":{"github_repo":"https://github.com/gardener/documentation","github_subdir":"website/documentation/contribute/code","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/contribute/code/dependencies.md","to":"dependencies.md"},"remote":"https://github.com/gardener/gardener/blob/master/docs/development/testing_and_dependencies.md","title":"Dependencies","prev":false,"next":false},"headers":[],"relativePath":"docs/contribute/code/dependencies/index.md","filePath":"docs/contribute/code/dependencies.md","lastUpdated":null}'),i={name:"docs/contribute/code/dependencies/index.md"};function o(d,e,r,c,l,h){return s(),a("div",null,e[0]||(e[0]=[n(`<h1 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h1><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><p>We follow the BDD-style testing principles and are leveraging the <a href="https://onsi.github.io/ginkgo/" target="_blank" rel="noreferrer">Ginkgo</a> framework along with <a href="http://onsi.github.io/gomega/" target="_blank" rel="noreferrer">Gomega</a> as matcher library. In order to execute the existing tests, you can use</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # runs tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verify</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # runs static code checks and test</span></span></code></pre></div><p>There is an additional command for analyzing the code coverage of the tests. Ginkgo will generate standard Golang cover profiles which will be translated into a HTML file by the <a href="https://blog.golang.org/cover" target="_blank" rel="noreferrer">Go Cover Tool</a>. Another command helps you to clean up the filesystem from the temporary cover profile files and the HTML report:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-cov</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gardener.coverage.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-cov-clean</span></span></code></pre></div><h3 id="sigs-k8s-io-controller-runtime-env-test" tabindex="-1">sigs.k8s.io/controller-runtime env test <a class="header-anchor" href="#sigs-k8s-io-controller-runtime-env-test" aria-label="Permalink to &quot;sigs.k8s.io/controller-runtime env test&quot;">​</a></h3><p>Some of the integration tests in Gardener are using the <code>sigs.k8s.io/controller-runtime/pkg/envtest</code> package. It sets up a temporary control plane (etcd + kube-apiserver) against the integration tests can run. The <code>test</code> and <code>test-cov</code> rules in the <code>Makefile</code> prepare this env test automatically by downloading the respective binaries (if not yet present) and set the necessary environment variables.</p><p>You can also run <code>go test</code> or <code>ginkgo</code> without the <code>test</code>/<code>test-cov</code> rules. In this case you have to set the <code>KUBEBUILDER_ASSETS</code> environment variable to the path that contains the etcd + kube-apiserver binaries or you need to have the binaries pre-installed under <code>/usr/local/kubebuilder/bin</code>.</p><h2 id="dependency-management" tabindex="-1">Dependency Management <a class="header-anchor" href="#dependency-management" aria-label="Permalink to &quot;Dependency Management&quot;">​</a></h2><p>We are using <a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noreferrer">go modules</a> for depedency management. In order to add a new package dependency to the project, you can perform <code>go get &lt;PACKAGE&gt;@&lt;VERSION&gt;</code> or edit the <code>go.mod</code> file and append the package along with the version you want to use.</p><h3 id="updating-dependencies" tabindex="-1">Updating Dependencies <a class="header-anchor" href="#updating-dependencies" aria-label="Permalink to &quot;Updating Dependencies&quot;">​</a></h3><p>The <code>Makefile</code> contains a rule called <code>revendor</code> which performs <code>go mod vendor</code> and <code>go mod tidy</code>. <code>go mod vendor</code> resets the main module&#39;s vendor directory to include all packages needed to build and test all the main module&#39;s packages. It does not include test code for vendored packages. <code>go mod tidy</code> makes sure <code>go.mod</code> matches the source code in the module. It adds any missing modules necessary to build the current module&#39;s packages and dependencies, and it removes unused modules that don&#39;t provide any relevant packages.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revendor</span></span></code></pre></div><p>The dependencies are installed into the <code>vendor</code> folder which <strong>should be added</strong> to the VCS.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>Make sure that you test the code after you have updated the dependencies!</p></div>`,16)]))}const u=t(i,[["render",o]]);export{g as __pageData,u as default};
