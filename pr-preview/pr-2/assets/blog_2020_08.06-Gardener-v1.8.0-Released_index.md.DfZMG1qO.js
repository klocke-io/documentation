import{_ as r,c as a,o as t,a2 as n}from"./chunks/framework.Bfq10Vlj.js";const u=JSON.parse('{"title":"Gardener v1.8.0 Released","description":"","frontmatter":{"aliases":["/blog/2020/08/06/00"],"archivedate":"2020-10-31","authors":[{"avatar":"https://avatars2.githubusercontent.com/u/19169361?s=460&v=4","email":"rafael.franzke@sap.com","name":"Rafael Franzke"}],"github_repo":"https://github.com/gardener/documentation","github_subdir":"website/blog/2020","linkTitle":"Gardener v1.8.0","newsSubtitle":"August 06, 2020","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/blog/2020/08.06-Gardener-v1.8.0-Released.md","to":"08.06-Gardener-v1.8.0-Released.md"},"publishdate":"2020-08-06","title":"Gardener v1.8.0 Released"},"headers":[],"relativePath":"blog/2020/08.06-Gardener-v1.8.0-Released/index.md","filePath":"blog/2020/08.06-Gardener-v1.8.0-Released.md","lastUpdated":null}'),o={name:"blog/2020/08.06-Gardener-v1.8.0-Released/index.md"};function s(i,e,d,l,h,g){return t(),a("div",null,e[0]||(e[0]=[n('<h1 id="gardener-v1-8-0-released" tabindex="-1">Gardener v1.8.0 Released <a class="header-anchor" href="#gardener-v1-8-0-released" aria-label="Permalink to &quot;Gardener v1.8.0 Released&quot;">​</a></h1><p>Even if we are in the midst of the summer holidays, a new Gardener release came out yesterday: v1.8.0! It&#39;s main themes are the large change of our logging stack to Loki (which was already explained in detail on a <a href="https://grafana.com/blog/2020/07/15/gardener-saps-kubernetes-as-a-service-open-source-project-is-moving-its-logging-stack-to-loki/" target="_blank" rel="noreferrer">blog post on grafana.com</a>), more configuration options to optimize the utilization of a shoot, node-local DNS, new project roles, and significant improvements for the Kubernetes client that Gardener uses to interact with the many different clusters.</p><h2 id="notable-changes" tabindex="-1">Notable Changes <a class="header-anchor" href="#notable-changes" aria-label="Permalink to &quot;Notable Changes&quot;">​</a></h2><h3 id="logging-2-0-efk-stack-replaced-by-loki-gardener-gardener-2515" tabindex="-1">Logging 2.0: EFK Stack Replaced by Loki (<a href="https://github.com/gardener/gardener/pull/2515" target="_blank" rel="noreferrer">gardener/gardener#2515</a>) <a class="header-anchor" href="#logging-2-0-efk-stack-replaced-by-loki-gardener-gardener-2515" aria-label="Permalink to &quot;Logging 2.0: EFK Stack Replaced by Loki ([gardener/gardener#2515](https://github.com/gardener/gardener/pull/2515))&quot;">​</a></h3><p>Since two years or so, Gardener could optionally provision a dedicated logging stack per seed and per shoot which was based on fluent-bit, fluentd, ElasticSearch and Kibana. This feature was still hidden behind an alpha-level feature gate and never got promoted to beta so far. Due to various limitations of this solution, we decided to replace the EFK stack with Loki. As we already have Prometheus and Grafana deployments for both users and operators by default for all clusters, the choice was just natural. Please find out more on this topic at <a href="https://grafana.com/blog/2020/07/15/gardener-saps-kubernetes-as-a-service-open-source-project-is-moving-its-logging-stack-to-loki/" target="_blank" rel="noreferrer">this dedicated blog post</a>.</p><h3 id="cluster-identities-and-dnsowner-objects-gardener-gardener-2471-gardener-gardener-2576" tabindex="-1">Cluster Identities and <code>DNSOwner</code> Objects (<a href="https://github.com/gardener/gardener/pull/2471" target="_blank" rel="noreferrer">gardener/gardener#2471</a>, <a href="https://github.com/gardener/gardener/pull/2576" target="_blank" rel="noreferrer">gardener/gardener#2576</a>) <a class="header-anchor" href="#cluster-identities-and-dnsowner-objects-gardener-gardener-2471-gardener-gardener-2576" aria-label="Permalink to &quot;Cluster Identities and `DNSOwner` Objects ([gardener/gardener#2471](https://github.com/gardener/gardener/pull/2471), [gardener/gardener#2576](https://github.com/gardener/gardener/pull/2576))&quot;">​</a></h3><p>The shoot control plane migration topic is ongoing since a few months already, and we are very much progressing with it. A first alpha version will probably make it out soon. As part of these endeavors, we introduced cluster identities and the usage of <code>DNSOwner</code> objects in this release. Both are needed to gracefully migrate the <code>DNSEntry</code> extension objects from the old seed to the new seed as part of the control plane migration process. Please find out more on this topic at <a href="https://kubernetes.io/blog/2019/12/02/gardener-project-update/#control-plane-migration-between-seed-clusters" target="_blank" rel="noreferrer">this blog post</a>.</p><h3 id="new-uam-role-for-project-members-to-limit-user-access-management-privileges-gardener-gardener-2611" tabindex="-1">New <code>uam</code> Role for <code>Project</code> Members to Limit User Access Management Privileges (<a href="https://github.com/gardener/gardener/pull/2611" target="_blank" rel="noreferrer">gardener/gardener#2611</a>) <a class="header-anchor" href="#new-uam-role-for-project-members-to-limit-user-access-management-privileges-gardener-gardener-2611" aria-label="Permalink to &quot;New `uam` Role for `Project` Members to Limit User Access Management Privileges ([gardener/gardener#2611](https://github.com/gardener/gardener/pull/2611))&quot;">​</a></h3><p>In order to allow external user access management system to integrate with Gardener and to fulfil certain compliance aspects, we have introduced a new role called <code>uam</code> for <code>Project</code> members (next to <code>admin</code> and <code>viewer</code>). Only if a user has this role, then he/she is allowed to add/remove other human users to the respective <code>Project</code>. By default, all newly created <code>Project</code>s assign this role only to the owner while, for backwards-compatibility reasons, it will be assigned for all members for existing projects. Project owners can steadily revoke this access as desired. Interestingly, the <code>uam</code> role is backed by a custom RBAC verb called <code>manage-members</code>, i.e., the Gardener API server is only admitting changes to the human <code>Project</code> members if the respective user is bound to this RBAC verb.</p><h3 id="new-node-local-dns-feature-for-shoots-gardener-gardener-2528" tabindex="-1">New Node-Local DNS Feature for Shoots (<a href="https://github.com/gardener/gardener/pull/2528" target="_blank" rel="noreferrer">gardener/gardener#2528</a>) <a class="header-anchor" href="#new-node-local-dns-feature-for-shoots-gardener-gardener-2528" aria-label="Permalink to &quot;New Node-Local DNS Feature for Shoots ([gardener/gardener#2528](https://github.com/gardener/gardener/pull/2528))&quot;">​</a></h3><p>By default, we are using CoreDNS as DNS plugin in shoot clusters which we auto-scale horizontally using HPA. However, in some situations we are discovering certain bottlenecks with it, e.g., unreliable UDP connections, unnecessary node hopping, inefficient load balancing, etc. To further optimize the DNS performance for shoot clusters, it is now possible to enable a new alpha-level feature gate in the gardenlet&#39;s componentconfig: <code>NodeLocalDNS</code>. If enabled, all shoots will get a new <code>DaemonSet</code> to run a DNS server on each node.</p><h3 id="more-kubelet-and-api-server-configurability-gardener-gardener-2574-gardener-gardener-2668" tabindex="-1">More kubelet and API Server Configurability (<a href="https://github.com/gardener/gardener/pull/2574" target="_blank" rel="noreferrer">gardener/gardener#2574</a>, <a href="https://github.com/gardener/gardener/pull/2668" target="_blank" rel="noreferrer">gardener/gardener#2668</a>) <a class="header-anchor" href="#more-kubelet-and-api-server-configurability-gardener-gardener-2574-gardener-gardener-2668" aria-label="Permalink to &quot;More kubelet and API Server Configurability ([gardener/gardener#2574](https://github.com/gardener/gardener/pull/2574), [gardener/gardener#2668](https://github.com/gardener/gardener/pull/2668))&quot;">​</a></h3><p>One large benefit of Gardener is that it allows you to optimize the usage of your control plane as well as worker nodes by exposing relevant configuration parameters in the <code>Shoot</code> API. In this version, we are adding support to configure kubelet&#39;s values for <code>systemReserved</code> and <code>kubeReserved</code> resources as well as the kube-apiserver&#39;s watch cache sizes. This allows end-users to get to better node utilization and/or performance for their shoot clusters.</p><h3 id="configurable-timeout-settings-for-machine-controller-manager-gardener-gardener-2563" tabindex="-1">Configurable Timeout Settings for machine-controller-manager (<a href="https://github.com/gardener/gardener/pull/2563" target="_blank" rel="noreferrer">gardener/gardener#2563</a>) <a class="header-anchor" href="#configurable-timeout-settings-for-machine-controller-manager-gardener-gardener-2563" aria-label="Permalink to &quot;Configurable Timeout Settings for machine-controller-manager ([gardener/gardener#2563](https://github.com/gardener/gardener/pull/2563))&quot;">​</a></h3><p>One very central component in Project Gardener is the <a href="https://github.com/gardener/machine-controller-manager" target="_blank" rel="noreferrer">machine-controller-manager</a> for managing the worker nodes of shoot clusters. It has extensive qualities with respect to node lifecycle management and rolling updates. As such, it uses certain timeout values, e.g. when creating or draining nodes, or when checking their health. Earlier, those were not customizable by end-users, but we are adding this possibility now. You can fine-grain these settings per worker pool in the <code>Shoot</code> API such that you can optimize the lifecycle management of your worker nodes even more!</p><h3 id="improved-usage-of-cached-client-to-reduce-network-i-o-gardener-gardener-2635-gardener-gardener-2637" tabindex="-1">Improved Usage of Cached Client to Reduce Network I/O (<a href="https://github.com/gardener/gardener/pull/2635" target="_blank" rel="noreferrer">gardener/gardener#2635</a>, <a href="https://github.com/gardener/gardener/pull/2637" target="_blank" rel="noreferrer">gardener/gardener#2637</a>) <a class="header-anchor" href="#improved-usage-of-cached-client-to-reduce-network-i-o-gardener-gardener-2635-gardener-gardener-2637" aria-label="Permalink to &quot;Improved Usage of Cached Client to Reduce Network I/O ([gardener/gardener#2635](https://github.com/gardener/gardener/pull/2635), [gardener/gardener#2637](https://github.com/gardener/gardener/pull/2637))&quot;">​</a></h3><p>In the last Gardener release v1.7 we have introduced a huge refactoring the clients that we use to interact with the many different Kubernetes clusters. This is to further optimize the network I/O performed by leveraging watches and caches as good as possible. It&#39;s still an alpha-level feature that must be explicitly enabled in the Gardenlet&#39;s component configuration, though, with this release we have improved certain things in order to pave the way for beta promotion. For example, we were initially also using a cached client when interacting with shoots. However, as the gardenlet runs in the seed as well (and thus can communicate cluster-internally with the kube-apiservers of the respective shoots) this cache is not necessary and just memory overhead. We have removed it again and saw the memory usage getting lower again. More to come!</p><h3 id="aws-ebs-volume-encryption-by-default-gardener-gardener-extension-provider-aws-147" tabindex="-1">AWS EBS Volume Encryption by Default (<a href="https://github.com/gardener/gardener-extension-provider-aws/pull/147" target="_blank" rel="noreferrer">gardener/gardener-extension-provider-aws#147</a>) <a class="header-anchor" href="#aws-ebs-volume-encryption-by-default-gardener-gardener-extension-provider-aws-147" aria-label="Permalink to &quot;AWS EBS Volume Encryption by Default ([gardener/gardener-extension-provider-aws#147](https://github.com/gardener/gardener-extension-provider-aws/pull/147))&quot;">​</a></h3><p>The <code>Shoot</code> API already exposed the possibility to encrypt the root disks of worker nodes since quite a while, but it was disabled by default (for backwards-compatibility reasons). With this release we have change this default, so new shoot worker nodes will be provisioned with encrypted root disks out-of-the-box. However, the <code>g4dn</code> instance types of AWS don&#39;t support this encryption, so when you use them you have to explicitly disable the encryption in the worker pool configuration.</p><h3 id="liveness-probe-for-gardener-api-server-deployment-gardener-gardener-2647" tabindex="-1">Liveness Probe for Gardener API Server Deployment (<a href="https://github.com/gardener/gardener/pull/2647" target="_blank" rel="noreferrer">gardener/gardener#2647</a>) <a class="header-anchor" href="#liveness-probe-for-gardener-api-server-deployment-gardener-gardener-2647" aria-label="Permalink to &quot;Liveness Probe for Gardener API Server Deployment ([gardener/gardener#2647](https://github.com/gardener/gardener/pull/2647))&quot;">​</a></h3><p>A small, but very valuable improvement is the introduction of a liveness probe for our Gardener API server. As it&#39;s built with the same library like the Kubernetes API server, it exposes two endpoints at <code>/livez</code> and <code>/readyz</code> which were created exactly for the purpose of live- and readiness probes. With Gardener v1.8, the Helm chart contains a liveness probe configuration by default, and we are awaiting an upstream fix (<a href="https://github.com/kubernetes/kubernetes/issues/93599" target="_blank" rel="noreferrer">kubernetes/kubernetes#93599</a>) to also enable the readiness probe. This will help in a smoother rolling update of the Gardener API server pods, i.e., preventing clients from talking to a not yet initialized or already terminating API server instance.</p><h3 id="webhook-ports-changed-to-enable-openshift-gardener-gardener-2660" tabindex="-1">Webhook Ports Changed to Enable OpenShift (<a href="https://github.com/gardener/gardener/pull/2660" target="_blank" rel="noreferrer">gardener/gardener#2660</a>) <a class="header-anchor" href="#webhook-ports-changed-to-enable-openshift-gardener-gardener-2660" aria-label="Permalink to &quot;Webhook Ports Changed to Enable OpenShift ([gardener/gardener#2660](https://github.com/gardener/gardener/pull/2660))&quot;">​</a></h3><p>In order to make it possible to run Gardener on OpenShift clusters as well, we had to make a change in the port configuration for the webhooks we are using in both Gardener and the extension controllers. Earlier, all the webhook servers directly exposed port <code>443</code>, i.e., a system port which is a security concern and disallowed in OpenShift. We have changed this port now across all places and also adapted our network policies accordingly. This is most likely not the last necessary change to enable this scenario, however, it&#39;s a great improvement to push the project forward.</p><p>If you&#39;re interested in more details and even more improvements, you can read all the <a href="https://github.com/gardener/gardener/releases/tag/v1.8.0" target="_blank" rel="noreferrer">release notes for Gardener v1.8.0</a>.</p>',24)]))}const p=r(o,[["render",s]]);export{u as __pageData,p as default};
