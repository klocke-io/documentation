import{_ as a,c as s,o as t,a2 as o}from"./chunks/framework.B8WFj13S.js";const u=JSON.parse('{"title":"DNS Search Path Optimization","description":"","frontmatter":{"aliases":["/docs/gardener/dns-search-path-optimization/"],"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/usage/networking","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/networking/dns-search-path-optimization.md","to":"dns-search-path-optimization.md"},"persona":"Users","title":"DNS Search Path Optimization","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/networking/dns-search-path-optimization/index.md","filePath":"docs/gardener/networking/dns-search-path-optimization.md","lastUpdated":null}'),n={name:"docs/gardener/networking/dns-search-path-optimization/index.md"};function i(r,e,l,c,d,h){return t(),s("div",null,e[0]||(e[0]=[o(`<h1 id="dns-search-path-optimization" tabindex="-1">DNS Search Path Optimization <a class="header-anchor" href="#dns-search-path-optimization" aria-label="Permalink to &quot;DNS Search Path Optimization&quot;">​</a></h1><h2 id="dns-search-path" tabindex="-1">DNS Search Path <a class="header-anchor" href="#dns-search-path" aria-label="Permalink to &quot;DNS Search Path&quot;">​</a></h2><p>Using fully qualified names has some downsides, e.g., it may become harder to move deployments from one landscape to the next. It is far easier and simple to rely on short/local names, which may have different meaning depending on the context they are used in.</p><p>The DNS search path allows for the usage of short/local names. It is an ordered list of DNS suffixes to append to short/local names to create a fully qualified name.</p><p>If a short/local name should be resolved, each entry is appended to it one by one to check whether it can be resolved. The process stops when either the name could be resolved or the DNS search path ends. As the last step after trying the search path, the short/local name is attempted to be resolved on it own.</p><h2 id="dns-option-ndots" tabindex="-1">DNS Option <code>ndots</code> <a class="header-anchor" href="#dns-option-ndots" aria-label="Permalink to &quot;DNS Option \`ndots\`&quot;">​</a></h2><p>As explained in the <a href="documentation/pr-preview/pr-2/docs/gardener/networking/dns-search-path-optimization/#dns-search-path">section above</a>, the DNS search path is used for short/local names to create fully qualified names. The DNS option <code>ndots</code> specifies how many dots (<code>.</code>) a name needs to have to be considered fully qualified. For names with less than <code>ndots</code> dots (<code>.</code>), the <a href="documentation/pr-preview/pr-2/docs/gardener/networking/dns-search-path-optimization/#dns-search-path">DNS search path</a> will be applied.</p><h2 id="dns-search-path-ndots-and-kubernetes" tabindex="-1">DNS Search Path, <code>ndots</code>, and Kubernetes <a class="header-anchor" href="#dns-search-path-ndots-and-kubernetes" aria-label="Permalink to &quot;DNS Search Path, \`ndots\`, and Kubernetes&quot;">​</a></h2><p>Kubernetes tries to make it easy/convenient for developers to use name resolution. It provides several means to address a service, most notably by its name directly, using the namespace as suffix, utilizing <code>&lt;namespace&gt;.svc</code> as suffix or as a fully qualified name as <code>&lt;service&gt;.&lt;namespace&gt;.svc.cluster.local</code> (assuming <code>cluster.local</code> to be the cluster domain).</p><p>This is why the DNS search path is fairly long in Kubernetes, usually consisting of <code>&lt;namespace&gt;.svc.cluster.local</code>, <code>svc.cluster.local</code>, <code>cluster.local</code>, and potentially some additional entries coming from the local network of the cluster. For various reasons, the default <code>ndots</code> value in the context of Kubernetes is with <code>5</code>, also fairly large. See <a href="https://github.com/kubernetes/kubernetes/issues/33554#issuecomment-266251056" target="_blank" rel="noreferrer">this comment</a> for a more detailed description.</p><h2 id="dns-search-path-ndots-problem-in-kubernetes" tabindex="-1">DNS Search Path/<code>ndots</code> Problem in Kubernetes <a class="header-anchor" href="#dns-search-path-ndots-problem-in-kubernetes" aria-label="Permalink to &quot;DNS Search Path/\`ndots\` Problem in Kubernetes&quot;">​</a></h2><p>As the DNS search path is long and <code>ndots</code> is large, a lot of DNS queries might traverse the DNS search path. This results in an explosion of DNS requests.</p><p>For example, consider the name resolution of the default kubernetes service <code>kubernetes.default.svc.cluster.local</code>. As this name has only four dots, it is not considered a fully qualified name according to the default <code>ndots=5</code> setting. Therefore, the DNS search path is applied, resulting in the following queries being created</p><ul><li><code>kubernetes.default.svc.cluster.local.some-namespace.svc.cluster.local</code></li><li><code>kubernetes.default.svc.cluster.local.svc.cluster.local</code></li><li><code>kubernetes.default.svc.cluster.local.cluster.local</code></li><li><code>kubernetes.default.svc.cluster.local.network-domain</code></li><li>...</li></ul><p>In IPv4/IPv6 dual stack systems, the amount of DNS requests may even double as each name is resolved for IPv4 and IPv6.</p><h2 id="general-workarounds-mitigations" tabindex="-1">General Workarounds/Mitigations <a class="header-anchor" href="#general-workarounds-mitigations" aria-label="Permalink to &quot;General Workarounds/Mitigations&quot;">​</a></h2><p>Kubernetes provides the capability to set the DNS options for each pod (see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config" target="_blank" rel="noreferrer">Pod DNS config</a> for details). However, this has to be applied for every pod (doing name resolution) to resolve the problem. A mutating webhook may be useful in this regard. Unfortunately, the DNS requirements may be different depending on the workload. Therefore, a general solution may difficult to impossible.</p><p>Another approach is to use always fully qualified names and append a dot (<code>.</code>) to the name to prevent the name resolution system from using the DNS search path. This might be somewhat counterintuitive as most developers are not used to the trailing dot (<code>.</code>). Furthermore, it makes moving to different landscapes more difficult/error-prone.</p><h2 id="gardener-specific-workarounds-mitigations" tabindex="-1">Gardener Specific Workarounds/Mitigations <a class="header-anchor" href="#gardener-specific-workarounds-mitigations" aria-label="Permalink to &quot;Gardener Specific Workarounds/Mitigations&quot;">​</a></h2><p>Gardener allows users to <a href="documentation/pr-preview/pr-2/docs/gardener/networking/custom-dns-config/">customize their DNS configuration</a>. CoreDNS allows several approaches to deal with the requests generated by the DNS search path. <a href="https://coredns.io/plugins/cache/" target="_blank" rel="noreferrer">Caching</a> is possible as well as <a href="https://coredns.io/plugins/rewrite/" target="_blank" rel="noreferrer">query rewriting</a>. There are also several other <a href="https://coredns.io/plugins/" target="_blank" rel="noreferrer">plugins</a> available, which may mitigate the situation.</p><h2 id="gardener-dns-query-rewriting" tabindex="-1">Gardener DNS Query Rewriting <a class="header-anchor" href="#gardener-dns-query-rewriting" aria-label="Permalink to &quot;Gardener DNS Query Rewriting&quot;">​</a></h2><p>As explained <a href="documentation/pr-preview/pr-2/docs/gardener/networking/dns-search-path-optimization/#dns-search-path-ndots-and-kubernetes">above</a>, the application of the DNS search path may lead to the undesired creation of DNS requests. Especially with the default setting of <code>ndots=5</code>, seemingly fully qualified names pointing to services in the cluster may trigger the DNS search path application.</p><p>Gardener allows to automatically rewrite some obviously incorrect DNS names, which stem from an application of the DNS search path to the most likely desired name. This will automatically rewrite requests like <code>service.namespace.svc.cluster.local.svc.cluster.local</code> to <code>service.namespace.svc.cluster.local</code>.</p><p>In case the applications also target services for name resolution, which are outside of the cluster and have less than <code>ndots</code> dots, it might be helpful to prevent search path application for them as well. One way to achieve it is by adding them to the <code>commonSuffixes</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  systemComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    coreDNS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      rewriting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        commonSuffixes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gardener.cloud</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span></code></pre></div><p>DNS requests containing a common suffix and ending in <code>.svc.cluster.local</code> are assumed to be incorrect application of the DNS search path. Therefore, they are rewritten to everything ending in the common suffix. For example, <code>www.gardener.cloud.svc.cluster.local</code> would be rewritten to <code>www.gardener.cloud</code>.</p><p>Please note that the common suffixes should be long enough and include enough dots (<code>.</code>) to prevent random overlap with other DNS queries. For example, it would be a bad idea to simply put <code>com</code> on the list of common suffixes, as there may be services/namespaces which have <code>com</code> as part of their name. The effect would be seemingly random DNS requests. Gardener requires that common suffixes contain at least one dot (.) and adds a second dot at the beginning. For instance, a common suffix of <code>example.com</code> in the configuration would match <code>*.example.com</code>.</p><p>Since some clients verify the host in the response of a DNS query, the host must also be rewritten. For that reason, we can&#39;t rewrite a query for <code>service.dst-namespace.svc.cluster.local.src-namespace.svc.cluster.local</code> or <code>www.example.com.src-namespace.svc.cluster.local</code>, as for an answer rewrite <code>src-namespace</code> would not be known.</p>`,28)]))}const m=a(n,[["render",i]]);export{u as __pageData,m as default};
