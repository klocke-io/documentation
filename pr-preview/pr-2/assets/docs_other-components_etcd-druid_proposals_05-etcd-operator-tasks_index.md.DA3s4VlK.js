import{_ as i,c as t,o as n,a2 as o,j as s,a}from"./chunks/framework.B8WFj13S.js";const g=JSON.parse(`{"title":"operator out-of-band tasks","description":"","frontmatter":{"authors":["@ishan16696","@unmarshall","@seshachalam-yv"],"creation-date":"6th Dec'2023","dep-number":5,"github_repo":"https://github.com/gardener/etcd-druid","github_subdir":"docs/proposals","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks.md","to":"05-etcd-operator-tasks.md"},"reviewers":["etcd-druid-maintainers"],"status":"implementable","title":"operator out-of-band tasks","prev":false,"next":false},"headers":[],"relativePath":"docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/index.md","filePath":"docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks.md","lastUpdated":null}`),l={name:"docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/index.md"};function r(p,e,h,d,c,k){return n(),t("div",null,e[0]||(e[0]=[o(`<h1 id="dep-05-operator-out-of-band-tasks" tabindex="-1">DEP-05: Operator Out-of-band Tasks <a class="header-anchor" href="#dep-05-operator-out-of-band-tasks" aria-label="Permalink to &quot;DEP-05: Operator Out-of-band Tasks&quot;">​</a></h1><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>This DEP proposes an enhancement to <code>etcd-druid</code>&#39;s capabilities to handle <a href="/documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#terminology">out-of-band</a> tasks, which are presently performed manually or invoked programmatically via suboptimal APIs. The document proposes the establishment of a unified interface by defining a well-structured API to harmonize the initiation of any <code>out-of-band</code> task, monitor its status, and simplify the process of adding new tasks and managing their lifecycles.</p><h2 id="terminology" tabindex="-1">Terminology <a class="header-anchor" href="#terminology" aria-label="Permalink to &quot;Terminology&quot;">​</a></h2><ul><li><p><strong>etcd-druid:</strong> <a href="https://github.com/gardener/etcd-druid" target="_blank" rel="noreferrer">etcd-druid</a> is an operator to manage the etcd clusters.</p></li><li><p><strong>backup-sidecar:</strong> It is the etcd-backup-restore sidecar container running in each etcd-member pod of etcd cluster.</p></li><li><p><strong>leading-backup-sidecar:</strong> A backup-sidecar that is associated to an etcd leader of an etcd cluster.</p></li><li><p><strong>out-of-band task:</strong> Any on-demand tasks/operations that can be executed on an etcd cluster without modifying the <a href="https://github.com/gardener/etcd-druid/blob/9c5f8254e3aeb24c1e3e88d17d8d1de336ce981b/api/v1alpha1/types_etcd.go#L272-L273" target="_blank" rel="noreferrer">Etcd custom resource spec</a> (desired state).</p></li></ul><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-label="Permalink to &quot;Motivation&quot;">​</a></h2><p>Today, <a href="https://github.com/gardener/etcd-druid" target="_blank" rel="noreferrer">etcd-druid</a> mainly acts as an etcd cluster provisioner (creation, maintenance and deletion). In future, capabilities of etcd-druid will be enhanced via <a href="https://github.com/gardener/etcd-druid/blob/8ac70d512969c2e12e666d923d7d35fdab1e0f8e/docs/proposals/04-etcd-member-custom-resource.md" target="_blank" rel="noreferrer">etcd-member</a> proposal by providing it access to much more detailed information about each etcd cluster member. While we enhance the reconciliation and monitoring capabilities of etcd-druid, it still lacks the ability to allow users to invoke <code>out-of-band</code> tasks on an existing etcd cluster.</p><p>There are new learnings while operating etcd clusters at scale. It has been observed that we regularly need capabilities to trigger <code>out-of-band</code> tasks which are outside of the purview of a regular etcd reconciliation run. Many of these tasks are multi-step processes, and performing them manually is error-prone, even if an operator follows a well-written step-by-step guide. Thus, there is a need to automate these tasks. Some examples of an <code>on-demand/out-of-band</code> tasks:</p><ul><li>Recover from a permanent quorum loss of etcd cluster.</li><li>Trigger an on-demand full/delta snapshot.</li><li>Trigger an on-demand snapshot compaction.</li><li>Trigger an on-demand maintenance of etcd cluster.</li><li>Copy the backups from one object store to another object store.</li></ul><h2 id="goals" tabindex="-1">Goals <a class="header-anchor" href="#goals" aria-label="Permalink to &quot;Goals&quot;">​</a></h2><ul><li>Establish a unified interface for operator tasks by defining a single dedicated custom resource for <code>out-of-band</code> tasks.</li><li>Define a contract (in terms of prerequisites) which needs to be adhered to by any task implementation.</li><li>Facilitate the easy addition of new <code>out-of-band</code> task(s) through this custom resource.</li><li>Provide CLI capabilities to operators, making it easy to invoke supported <code>out-of-band</code> tasks.</li></ul><h2 id="non-goals" tabindex="-1">Non-Goals <a class="header-anchor" href="#non-goals" aria-label="Permalink to &quot;Non-Goals&quot;">​</a></h2><ul><li>In the current scope, capability to abort/suspend an <code>out-of-band</code> task is not going to be provided. This could be considered as an enhancement based on pull.</li><li>Ordering (by establishing dependency) of <code>out-of-band</code> tasks submitted for the same etcd cluster has not been considered in the first increment. In a future version based on how operator tasks are used, we will enhance this proposal and the implementation.</li></ul><h2 id="proposal" tabindex="-1">Proposal <a class="header-anchor" href="#proposal" aria-label="Permalink to &quot;Proposal&quot;">​</a></h2><p>Authors propose creation of a new single dedicated custom resource to represent an <code>out-of-band</code> task. Etcd-druid will be enhanced to process the task requests and update its status which can then be tracked/observed.</p><h3 id="custom-resource-golang-api" tabindex="-1">Custom Resource Golang API <a class="header-anchor" href="#custom-resource-golang-api" aria-label="Permalink to &quot;Custom Resource Golang API&quot;">​</a></h3><p><code>EtcdOperatorTask</code> is the new custom resource that will be introduced. This API will be in <code>v1alpha1</code> version and will be subject to change. We will be respecting <a href="https://kubernetes.io/docs/reference/using-api/deprecation-policy/" target="_blank" rel="noreferrer">Kubernetes Deprecation Policy</a>.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EtcdOperatorTask represents an out-of-band operator task resource.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EtcdOperatorTask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TypeMeta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObjectMeta</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Spec is the specification of the EtcdOperatorTask resource.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Spec </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EtcdOperatorTaskSpec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;spec&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Status is most recently observed status of the EtcdOperatorTask resource.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EtcdOperatorTaskStatus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;status,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="spec" tabindex="-1">Spec <a class="header-anchor" href="#spec" aria-label="Permalink to &quot;Spec&quot;">​</a></h4><p>The authors propose that the following fields should be specified in the spec (desired state) of the <code>EtcdOperatorTask</code> custom resource.</p><ul><li>To capture the type of <code>out-of-band</code> operator task to be performed, <code>.spec.type</code> field should be defined. It can have values from all supported <code>out-of-band</code> tasks eg. &quot;OnDemandSnaphotTask&quot;, &quot;QuorumLossRecoveryTask&quot; etc.</li><li>To capture the configuration specific to each task, a <code>.spec.config</code> field should be defined of type <code>string</code> as each task can have different input configuration.</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EtcdOperatorTaskSpec is the spec for a EtcdOperatorTask resource.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EtcdOperatorTaskSpec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Type specifies the type of out-of-band operator task to be performed. </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;type&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Config is a task specific configuration.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;config,omitempty&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // TTLSecondsAfterFinished is the time-to-live to garbage collect the </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // related resource(s) of task once it has been completed.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +optional</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TTLSecondsAfterFinished </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*int32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;ttlSecondsAfterFinished,omitempty&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // OwnerEtcdReference refers to the name and namespace of the corresponding </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Etcd owner for which the task has been invoked.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  OwnerEtcdRefrence </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NamespacedName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;ownerEtcdRefrence&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h4><p>The authors propose the following fields for the Status (current state) of the <code>EtcdOperatorTask</code> custom resource to monitor the progress of the task.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EtcdOperatorTaskStatus is the status for a EtcdOperatorTask resource.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EtcdOperatorTaskStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ObservedGeneration is the most recent generation observed for the resource.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ObservedGeneration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;observedGeneration,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // State is the last known state of the task.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  State </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TaskState</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;state&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Time at which the task has moved from &quot;pending&quot; state to any other state.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  InitiatedAt </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;initiatedAt&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // LastError represents the errors when processing the task.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +optional</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LastErrors []</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LastError</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;lastErrors,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Captures the last operation status if task involves many stages.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +optional</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LastOperation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LastOperation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;lastOperation,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LastOperation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Name of the LastOperation.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Name </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opsName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;name&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Status of the last operation, one of pending, progress, completed, failed.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  State </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OperationState</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;state&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // LastTransitionTime is the time at which the operation state last transitioned from one state to another.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LastTransitionTime </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;lastTransitionTime&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // A human readable message indicating details about the last operation.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Reason </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;reason&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// LastError stores details of the most recent error encountered for the task.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LastError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Code is an error code that uniquely identifies an error.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Code </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ErrorCode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;code&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Description is a human-readable message indicating details of the error.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;description&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ObservedAt is the time at which the error was observed.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ObservedAt </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;observedAt&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TaskState represents the state of the task.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  TaskStateFailed</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Failed&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  TaskStatePending</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Pending&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  TaskStateRejected</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Rejected&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  TaskStateSucceeded</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Succeeded&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  TaskStateInProgress</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;InProgress&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OperationState represents the state of last operation.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OperationState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  OperationStateFailed</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OperationState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Failed&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  OperationStatePending</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OperationState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Pending&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  OperationStateCompleted</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OperationState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Completed&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  OperationStateInProgress</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OperationState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;InProgress&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="custom-resource-yaml-api" tabindex="-1">Custom Resource YAML API <a class="header-anchor" href="#custom-resource-yaml-api" aria-label="Permalink to &quot;Custom Resource YAML API&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">druid.gardener.cloud/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EtcdOperatorTask</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;name of operator task resource&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;cluster namespace&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    generation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;specific generation of the desired state&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;type/category of supported out-of-band task&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ttlSecondsAfterFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;time-to-live to garbage collect the custom resource after it has been completed&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;task specific configuration&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ownerEtcdRefrence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;refer to corresponding etcd owner name and namespace for which task has been invoked&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    observedGeneration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;specific observedGeneration of the resource&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;last known current state of the out-of-band task&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    initiatedAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;time at which task move to any other state from &quot;pending&quot; state&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    lastErrors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;error-code&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;description of the error&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      observedAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;time the error was observed&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    lastOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;operation-name&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;task state as seen at the completion of last operation&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      lastTransitionTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;time of transition to this state&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;reason/message if any&gt;</span></span></code></pre></div><h3 id="lifecycle" tabindex="-1">Lifecycle <a class="header-anchor" href="#lifecycle" aria-label="Permalink to &quot;Lifecycle&quot;">​</a></h3><h4 id="creation" tabindex="-1">Creation <a class="header-anchor" href="#creation" aria-label="Permalink to &quot;Creation&quot;">​</a></h4><p>Task(s) can be created by creating an instance of the <code>EtcdOperatorTask</code> custom resource specific to a task.</p><blockquote><p>Note: In future, either a <code>kubectl</code> extension plugin or a <code>druidctl</code> tool will be introduced. Dedicated sub-commands will be created for each <code>out-of-band</code> task. This will drastically increase the usability for an operator for performing such tasks, as the CLI extension will automatically create relevant instance(s) of <code>EtcdOperatorTask</code> with the provided configuration.</p></blockquote><h4 id="execution" tabindex="-1">Execution <a class="header-anchor" href="#execution" aria-label="Permalink to &quot;Execution&quot;">​</a></h4><ul><li>Authors propose to introduce a new controller which watches for <code>EtcdOperatorTask</code> custom resource.</li><li>Each <code>out-of-band</code> task may have some task specific configuration defined in <a href="/documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#spec">.spec.config</a>.</li><li>The controller needs to parse this task specific config, which comes as a <a href="/documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#spec">string</a>, according to the schema defined for each task.</li><li>For every <code>out-of-band</code> task, a set of <code>pre-conditions</code> can be defined. These pre-conditions are evaluated against the current state of the target etcd cluster. Based on the evaluation result (boolean), the task is permitted or denied execution.</li><li>If multiple tasks are invoked simultaneously or in <code>pending</code> state, then they will be executed in a First-In-First-Out (FIFO) manner.</li></ul><blockquote><p>Note: Dependent ordering among tasks will be addressed later which will enable concurrent execution of tasks when possible.</p></blockquote><h4 id="deletion" tabindex="-1">Deletion <a class="header-anchor" href="#deletion" aria-label="Permalink to &quot;Deletion&quot;">​</a></h4><p>Upon completion of the task, irrespective of its final state, <code>Etcd-druid</code> will ensure the garbage collection of the task custom resource and any other Kubernetes resources created to execute the task. This will be done according to the <code>.spec.ttlSecondsAfterFinished</code> if defined in the <a href="/documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#spec">spec</a>, or a default expiry time will be assumed.</p><h3 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-label="Permalink to &quot;Use Cases&quot;">​</a></h3><h4 id="recovery-from-permanent-quorum-loss" tabindex="-1">Recovery from permanent quorum loss <a class="header-anchor" href="#recovery-from-permanent-quorum-loss" aria-label="Permalink to &quot;Recovery from permanent quorum loss&quot;">​</a></h4><p>Recovery from permanent quorum loss involves two phases - identification and recovery - both of which are done manually today. This proposal intends to automate the latter. Recovery today is a <a href="/documentation/pr-preview/pr-2/docs/other-components/etcd-druid/recovering-etcd-clusters/">multi-step process</a> and needs to be performed carefully by a human operator. Automating these steps would be prudent, to make it quicker and error-free. The identification of the permanent quorum loss would remain a manual process, requiring a human operator to investigate and confirm that there is indeed a permanent quorum loss with no possibility of auto-healing.</p><h5 id="task-config" tabindex="-1">Task Config <a class="header-anchor" href="#task-config" aria-label="Permalink to &quot;Task Config&quot;">​</a></h5><p>We do not need any config for this task. When creating an instance of <code>EtcdOperatorTask</code> for this scenario, <code>.spec.config</code> will be set to nil (unset).</p><h5 id="pre-conditions" tabindex="-1">Pre-Conditions <a class="header-anchor" href="#pre-conditions" aria-label="Permalink to &quot;Pre-Conditions&quot;">​</a></h5><ul><li>There should be a quorum loss in a multi-member etcd cluster. For a single-member etcd cluster, invoking this task is unnecessary as the restoration of the single member is automatically handled by the backup-restore process.</li><li>There should not already be a permanent-quorum-loss-recovery-task running for the same etcd cluster.</li></ul><h4 id="trigger-on-demand-snapshot-compaction" tabindex="-1">Trigger on-demand snapshot compaction <a class="header-anchor" href="#trigger-on-demand-snapshot-compaction" aria-label="Permalink to &quot;Trigger on-demand snapshot compaction&quot;">​</a></h4><p><code>Etcd-druid</code> provides a configurable <a href="/documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/#druid-flags">etcd-events-threshold</a> flag. When this threshold is breached, then a <a href="/documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot compaction</a> is triggered for the etcd cluster. However, there are scenarios where an ad-hoc snapshot compaction may be required.</p><h5 id="possible-scenarios" tabindex="-1">Possible Scenarios <a class="header-anchor" href="#possible-scenarios" aria-label="Permalink to &quot;Possible Scenarios&quot;">​</a></h5><ul><li>If an operator anticipates a scenario of permanent quorum loss, they can trigger an <code>on-demand snapshot compaction</code> to create a compacted full-snapshot. This can potentially reduce the recovery time from a permanent quorum loss.</li><li>As an additional benefit, a human operator can leverage the current implementation of <a href="/documentation/pr-preview/pr-2/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot compaction</a>, which internally triggers <code>restoration</code>. Hence, by initiating an <code>on-demand snapshot compaction</code> task, the operator can verify the integrity of etcd cluster backups, particularly in cases of potential backup corruption or re-encryption. The success or failure of this snapshot compaction can offer valuable insights into these scenarios.</li></ul><h5 id="task-config-1" tabindex="-1">Task Config <a class="header-anchor" href="#task-config-1" aria-label="Permalink to &quot;Task Config&quot;">​</a></h5><p>We do not need any config for this task. When creating an instance of <code>EtcdOperatorTask</code> for this scenario, <code>.spec.config</code> will be set to nil (unset).</p><h5 id="pre-conditions-1" tabindex="-1">Pre-Conditions <a class="header-anchor" href="#pre-conditions-1" aria-label="Permalink to &quot;Pre-Conditions&quot;">​</a></h5><ul><li>There should not be a <code>on-demand snapshot compaction</code> task already running for the same etcd cluster.</li></ul><blockquote><p>Note: <code>on-demand snapshot compaction</code> runs as a separate job in a separate pod, which interacts with the backup bucket and not the etcd cluster itself, hence it doesn&#39;t depend on the health of etcd cluster members.</p></blockquote><h4 id="trigger-on-demand-full-delta-snapshot" tabindex="-1">Trigger on-demand full/delta snapshot <a class="header-anchor" href="#trigger-on-demand-full-delta-snapshot" aria-label="Permalink to &quot;Trigger on-demand full/delta snapshot&quot;">​</a></h4><p><code>Etcd</code> custom resource provides an ability to set <a href="https://github.com/gardener/etcd-druid/blob/master/api/core/v1alpha1/etcd.go#L156" target="_blank" rel="noreferrer">FullSnapshotSchedule</a> which currently defaults to run once in 24 hrs. <a href="https://github.com/gardener/etcd-druid/blob/master/api/core/v1alpha1/etcd.go#L173" target="_blank" rel="noreferrer">DeltaSnapshotPeriod</a> is also made configurable which defines the duration after which a delta snapshot will be taken. If a human operator does not wish to wait for the scheduled full/delta snapshot, they can trigger an on-demand (out-of-schedule) full/delta snapshot on the etcd cluster, which will be taken by the <code>leading-backup-restore</code>.</p><h5 id="possible-scenarios-1" tabindex="-1">Possible Scenarios <a class="header-anchor" href="#possible-scenarios-1" aria-label="Permalink to &quot;Possible Scenarios&quot;">​</a></h5><ul><li>An on-demand full snapshot can be triggered if scheduled snapshot fails due to any reason.</li><li><a href="/documentation/pr-preview/pr-2/docs/gardener/shoot/shoot_hibernate/">Gardener Shoot Hibernation</a>: Every etcd cluster incurs an inherent cost of preserving the volumes even when a gardener shoot control plane is scaled down, i.e the shoot is in a hibernated state. However, it is possible to save on hyperscaler costs by invoking this task to take a full snapshot before scaling down the etcd cluster, and deleting the etcd data volumes afterwards.</li><li><a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md" target="_blank" rel="noreferrer">Gardener Control Plane Migration</a>: In <a href="https://github.com/gardener/gardener" target="_blank" rel="noreferrer">gardener</a>, a cluster control plane can be moved from one seed cluster to another. This process currently requires the etcd data to be replicated on the target cluster, so a full snapshot of the etcd cluster in the source seed before the migration would allow for faster restoration of the etcd cluster in the target seed.</li></ul><h5 id="task-config-2" tabindex="-1">Task Config <a class="header-anchor" href="#task-config-2" aria-label="Permalink to &quot;Task Config&quot;">​</a></h5><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SnapshotType can be full or delta snapshot.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SnapshotType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  SnapshotTypeFull</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SnapshotType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;full&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  SnapshotTypeDelta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SnapshotType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;delta&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnDemandSnapshotTaskConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Type of on-demand snapshot.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Type </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SnapshotType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;type&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    type: &lt;type of on-demand snapshot&gt;</span></span></code></pre></div><h5 id="pre-conditions-2" tabindex="-1">Pre-Conditions <a class="header-anchor" href="#pre-conditions-2" aria-label="Permalink to &quot;Pre-Conditions&quot;">​</a></h5><ul><li>Etcd cluster should have a quorum.</li><li>There should not already be a <code>on-demand snapshot</code> task running with the same <code>SnapshotType</code> for the same etcd cluster.</li></ul><h4 id="trigger-on-demand-maintenance-of-etcd-cluster" tabindex="-1">Trigger on-demand maintenance of etcd cluster <a class="header-anchor" href="#trigger-on-demand-maintenance-of-etcd-cluster" aria-label="Permalink to &quot;Trigger on-demand maintenance of etcd cluster&quot;">​</a></h4><p>Operator can trigger on-demand <a href="https://etcd.io/docs/v3.5/op-guide/maintenance" target="_blank" rel="noreferrer">maintenance of etcd cluster</a> which includes operations like <a href="https://etcd.io/docs/v3.5/op-guide/maintenance/#history-compaction-v3-api-key-value-database" target="_blank" rel="noreferrer">etcd compaction</a>, <a href="https://etcd.io/docs/v3.5/op-guide/maintenance/#defragmentation" target="_blank" rel="noreferrer">etcd defragmentation</a> etc.</p><h5 id="possible-scenarios-2" tabindex="-1">Possible Scenarios <a class="header-anchor" href="#possible-scenarios-2" aria-label="Permalink to &quot;Possible Scenarios&quot;">​</a></h5><ul><li>If an etcd cluster is heavily loaded, which is causing performance degradation of an etcd cluster, and the operator does not want to wait for the scheduled maintenance window then an <code>on-demand maintenance</code> task can be triggered which will invoke etcd-compaction, etcd-defragmentation etc. on the target etcd cluster. This will make the etcd cluster lean and clean, thus improving cluster performance.</li></ul><h5 id="task-config-3" tabindex="-1">Task Config <a class="header-anchor" href="#task-config-3" aria-label="Permalink to &quot;Task Config&quot;">​</a></h5><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnDemandMaintenanceTaskConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // MaintenanceType defines the maintenance operations need to be performed on etcd cluster.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MaintenanceType </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maintenanceOps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;maintenanceType\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maintenanceOps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // EtcdCompaction if set to true will trigger an etcd compaction on the target etcd.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +optional</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EtcdCompaction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;etcdCompaction,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // EtcdDefragmentation if set to true will trigger a etcd defragmentation on the target etcd.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +optional</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EtcdDefragmentation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;etcdDefragmentation,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    maintenanceType:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      etcdCompaction: &lt;true/false&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      etcdDefragmentation: &lt;true/false&gt;</span></span></code></pre></div><h5 id="pre-conditions-3" tabindex="-1">Pre-Conditions <a class="header-anchor" href="#pre-conditions-3" aria-label="Permalink to &quot;Pre-Conditions&quot;">​</a></h5><ul><li>Etcd cluster should have a quorum.</li><li>There should not already be a duplicate task running with same <code>maintenanceType</code>.</li></ul><h4 id="copy-backups-task" tabindex="-1">Copy Backups Task <a class="header-anchor" href="#copy-backups-task" aria-label="Permalink to &quot;Copy Backups Task&quot;">​</a></h4><p>Copy the backups(full and delta snapshots) of etcd cluster from one object store(source) to another object store(target).</p><h5 id="possible-scenarios-3" tabindex="-1">Possible Scenarios <a class="header-anchor" href="#possible-scenarios-3" aria-label="Permalink to &quot;Possible Scenarios&quot;">​</a></h5><ul><li>In <a href="https://github.com/gardener/gardener" target="_blank" rel="noreferrer">Gardener</a>, the <a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md" target="_blank" rel="noreferrer">Control Plane Migration</a> process utilizes the copy-backups task. This task is responsible for copying backups from one object store to another, typically located in different regions.</li></ul><h5 id="task-config-4" tabindex="-1">Task Config <a class="header-anchor" href="#task-config-4" aria-label="Permalink to &quot;Task Config&quot;">​</a></h5><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EtcdCopyBackupsTaskConfig defines the parameters for the copy backups task.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EtcdCopyBackupsTaskConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // SourceStore defines the specification of the source object store provider.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SourceStore </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StoreSpec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;sourceStore&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // TargetStore defines the specification of the target object store provider for storing backups.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TargetStore </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StoreSpec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;targetStore&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // MaxBackupAge is the maximum age in days that a backup must have in order to be copied.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // By default all backups will be copied.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +optional</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MaxBackupAge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*uint32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;maxBackupAge,omitempty&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // MaxBackups is the maximum number of backups that will be copied starting with the most recent ones.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +optional</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MaxBackups </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*uint32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;maxBackups,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    sourceStore: &lt;source object store specification&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    targetStore: &lt;target object store specification&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    maxBackupAge: &lt;maximum age in days that a backup must have in order to be copied&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    maxBackups: &lt;maximum no. of backups that will be copied&gt;</span></span></code></pre></div><blockquote><p>Note: For detailed object store specification please refer <a href="https://github.com/gardener/etcd-druid/blob/9c5f8254e3aeb24c1e3e88d17d8d1de336ce981b/api/v1alpha1/types_common.go#L15-L29" target="_blank" rel="noreferrer">here</a></p></blockquote><h5 id="pre-conditions-4" tabindex="-1">Pre-Conditions <a class="header-anchor" href="#pre-conditions-4" aria-label="Permalink to &quot;Pre-Conditions&quot;">​</a></h5><ul><li>There should not already be a <code>copy-backups</code> task running.</li></ul><blockquote><p>Note: <code>copy-backups-task</code> runs as a separate job, and it operates only on the backup bucket, hence it doesn&#39;t depend on health of etcd cluster members.</p></blockquote><blockquote><p>Note: <code>copy-backups-task</code> has already been implemented and it&#39;s currently being used in <a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md" target="_blank" rel="noreferrer">Control Plane Migration</a> but <code>copy-backups-task</code> will be harmonized with <code>EtcdOperatorTask</code> custom resource.</p></blockquote><h2 id="metrics" tabindex="-1">Metrics <a class="header-anchor" href="#metrics" aria-label="Permalink to &quot;Metrics&quot;">​</a></h2><p>Authors proposed to introduce the following metrics:</p>`,84),s("ul",null,[s("li",null,[s("p",null,[s("code",null,"etcddruid_operator_task_duration_seconds"),a(" : Histogram which captures the runtime for each etcd operator task. Labels:")]),s("ul",null,[s("li",null,[a("Key: "),s("code",null,"type"),a(", Value: all supported tasks")]),s("li",{"failed,":"","succeeded,":"",rejected:""},[a("Key: "),s("code",null,"state"),a(", Value: One-Of")]),s("li",null,[a("Key: "),s("code",null,"etcd"),a(", Value: name of the target etcd resource")]),s("li",null,[a("Key: "),s("code",null,"etcd_namespace"),a(", Value: namespace of the target etcd resource")])])]),s("li",null,[s("p",null,[s("code",null,"etcddruid_operator_tasks_total"),a(": Counter which counts the number of etcd operator tasks. Labels:")]),s("ul",null,[s("li",null,[a("Key: "),s("code",null,"type"),a(", Value: all supported tasks")]),s("li",{"failed,":"","succeeded,":"",rejected:""},[a("Key: "),s("code",null,"state"),a(", Value: One-Of")]),s("li",null,[a("Key: "),s("code",null,"etcd"),a(", Value: name of the target etcd resource")]),s("li",null,[a("Key: "),s("code",null,"etcd_namespace"),a(", Value: namespace of the target etcd resource")])])])],-1)]))}const y=i(l,[["render",r]]);export{g as __pageData,y as default};
