import{_ as t,c as i,o as s,a2 as a}from"./chunks/framework.Bfq10Vlj.js";const g=JSON.parse('{"title":"Remove Committed Secrets in Github ðŸ’€","description":"Never ever commit a kubeconfig.yaml into github","frontmatter":{"category":"Fails","description":"Never ever commit a kubeconfig.yaml into github","github_repo":"https://github.com/gardener/documentation","github_subdir":"website/documentation/guides/applications","level":"intermediate","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/guides/applications/commit-secret-fail.md","to":"commit-secret-fail.md"},"scope":"app-developer","title":"Remove Committed Secrets in Github ðŸ’€","prev":false,"next":false},"headers":[],"relativePath":"docs/guides/applications/commit-secret-fail/index.md","filePath":"docs/guides/applications/commit-secret-fail.md","lastUpdated":null}'),o={name:"docs/guides/applications/commit-secret-fail/index.md"};function r(n,e,l,h,p,c){return s(),i("div",null,e[0]||(e[0]=[a(`<h1 id="remove-committed-secrets-in-github-u0001f480" tabindex="-1">Remove Committed Secrets in Github \\U0001F480 <a class="header-anchor" href="#remove-committed-secrets-in-github-u0001f480" aria-label="Permalink to &quot;Remove Committed Secrets in Github \\U0001F480&quot;">â€‹</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h2><p>If you commit sensitive data, such as a <code>kubeconfig.yaml</code> or <code>SSH key</code> into a Git repository, you can remove it from the history. To entirely remove unwanted files from a repository&#39;s history you can use the git <code>filter-branch</code> command.</p><p>The git <code>filter-branch</code> command rewrites your repository&#39;s history, which changes the SHAs for existing commits that you alter and any dependent commits. Changed commit SHAs may affect open pull requests in your repository. <strong>Merging or closing all open pull requests before removing files from your repository is recommended.</strong></p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>If someone has already checked out the repository, then of course they have the secret on their computer. So ALWAYS revoke the OAuthToken/Password or whatever it was immediately.</p></div><h2 id="purging-a-file-from-your-repository-s-history" tabindex="-1">Purging a File from Your Repository&#39;s History <a class="header-anchor" href="#purging-a-file-from-your-repository-s-history" aria-label="Permalink to &quot;Purging a File from Your Repository&#39;s History&quot;">â€‹</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>If you run <code>git filter-branch</code> after stashing changes, you won&#39;t be able to retrieve your changes with other stash commands. Before running <code>git filter-branch</code>, we recommend unstashing any changes you&#39;ve made. To unstash the last set of changes you&#39;ve stashed, run <code>git stash show -p | git apply -R</code>. For more information, see <a href="https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning" target="_blank" rel="noreferrer">Git Tools - Stashing and Cleaning</a>.</p></div><p>To illustrate how <code>git filter-branch</code> works, we&#39;ll show you how to remove your file with sensitive data from the history of your repository and add it to .gitignore to ensure that it is not accidentally re-committed.</p><p><strong>1. Navigate into the repository&#39;s working directory:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> YOUR-REPOSITORY</span></span></code></pre></div><p><strong>2. Run the following command, replacing <code>PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA</code> with the path to the file you want to remove, not just its filename.</strong></p><p>These arguments will:</p><ul><li>Force Git to process, but not check out, the entire history of every branch and tag</li><li>Remove the specified file, as well as any empty commits generated as a result</li><li>Overwrite your existing tags</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filter-branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --index-filter</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--prune-empty </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--tag-name-filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span></code></pre></div><p><strong>3. Add your file with sensitive data to <code>.gitignore</code> to ensure that you don&#39;t accidentally commit it again:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR-FILE-WITH-SENSITIVE-DATA&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span></span></code></pre></div><p>Double-check that you&#39;ve removed everything you wanted to from your repository&#39;s history, and that all of your branches are checked out. Once you&#39;re happy with the state of your repository, continue to the next step.</p><p><strong>4. Force-push your local changes to overwrite your GitHub repository, as well as all the branches you&#39;ve pushed up:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span></code></pre></div><p><strong>4. In order to remove the sensitive file from your tagged releases, you&#39;ll also need to force-push against your Git tags:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tags</span></span></code></pre></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>Tell your collaborators to <strong>rebase, not merge</strong>, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging.</p></div><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">â€‹</a></h2><ul><li><a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/" target="_blank" rel="noreferrer">Removing Sensitive Data from a Repository</a></li></ul>`,24)]))}const u=t(o,[["render",r]]);export{g as __pageData,u as default};
