import{_ as t,c as o,o as a,a2 as s}from"./chunks/framework.B8WFj13S.js";const u=JSON.parse('{"title":"Control Plane Migration","description":"","frontmatter":{"github_repo":"https://github.com/gardener/gardener","github_subdir":"docs/operations","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/gardener/control_plane_migration.md","to":"control_plane_migration.md"},"persona":"Operators","title":"Control Plane Migration","prev":false,"next":false},"headers":[],"relativePath":"docs/gardener/control_plane_migration/index.md","filePath":"docs/gardener/control_plane_migration.md","lastUpdated":null}'),i={name:"docs/gardener/control_plane_migration/index.md"};function n(r,e,c,d,l,h){return a(),o("div",null,e[0]||(e[0]=[s('<h1 id="control-plane-migration" tabindex="-1">Control Plane Migration <a class="header-anchor" href="#control-plane-migration" aria-label="Permalink to &quot;Control Plane Migration&quot;">​</a></h1><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>The <code>Seed</code>s involved in the control plane migration must have backups enabled - their <code>.spec.backup</code> fields cannot be nil.</p><h2 id="shootstate" tabindex="-1">ShootState <a class="header-anchor" href="#shootstate" aria-label="Permalink to &quot;ShootState&quot;">​</a></h2><p><code>ShootState</code> is an API resource which stores non-reconstructible state and data required to completely recreate a <code>Shoot</code>&#39;s control plane on a new <code>Seed</code>. The <code>ShootState</code> resource is created on <code>Shoot</code> creation in its <code>Project</code> namespace and the required state/data is persisted during <code>Shoot</code> creation or reconciliation.</p><h2 id="shoot-control-plane-migration" tabindex="-1">Shoot Control Plane Migration <a class="header-anchor" href="#shoot-control-plane-migration" aria-label="Permalink to &quot;Shoot Control Plane Migration&quot;">​</a></h2><p>Triggering the migration is done by changing the <code>Shoot</code>&#39;s <code>.spec.seedName</code> to a <code>Seed</code> that differs from the <code>.status.seedName</code>, we call this <code>Seed</code> a <code>&quot;Destination Seed&quot;</code>. This action can only be performed by an operator (see <a href="documentation/pr-preview/pr-2/docs/gardener/control_plane_migration/#triggering-the-migration">Triggering the Migration</a>). If the <code>Destination Seed</code> does not have a backup and restore configuration or has an internal domain that differs from the internal domain of the original <code>Seed</code>, the change to <code>spec.seedName</code> is rejected. Additionally, this Seed must not be set for deletion and must be healthy.</p><p>If the <code>Shoot</code> has different <code>.spec.seedName</code> and <code>.status.seedName</code>, a process is started to prepare the Control Plane for migration:</p><ol><li><code>.status.lastOperation</code> is changed to <code>Migrate</code>.</li><li>Kubernetes API Server is stopped and the extension resources are annotated with <code>gardener.cloud/operation=migrate</code>.</li><li>Full snapshot of the ETCD is created and terminating of the Control Plane in the <code>Source Seed</code> is initiated.</li></ol><p>If the process is successful, we update the status of the <code>Shoot</code> by setting the <code>.status.seedName</code> to the null value. That way, a restoration is triggered in the <code>Destination Seed</code> and <code>.status.lastOperation</code> is changed to <code>Restore</code>. The control plane migration is completed when the <code>Restore</code> operation has completed successfully.</p><p>The etcd backups will be copied over to the <code>BackupBucket</code> of the <code>Destination Seed</code> during control plane migration and any future backups will be uploaded there.</p><h2 id="triggering-the-migration" tabindex="-1">Triggering the Migration <a class="header-anchor" href="#triggering-the-migration" aria-label="Permalink to &quot;Triggering the Migration&quot;">​</a></h2><p>For control plane migration, operators with the necessary RBAC can use the <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/scheduler/#shootsbinding-subresource"><code>shoots/binding</code></a> subresource to change the <code>.spec.seedName</code>, with the following commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAMESPACE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-namespace</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOOT_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my-shoot</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DEST_SEED_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">destination-seed</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --raw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /apis/core.gardener.cloud/v1beta1/namespaces/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">${NAMESPACE}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/shoots/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">${SHOOT_NAME} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.spec.seedName = &quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">${DEST_SEED_NAME}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> replace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --raw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /apis/core.gardener.cloud/v1beta1/namespaces/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">${NAMESPACE}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/shoots/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">${SHOOT_NAME}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/binding</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.spec.seedName&#39;</span></span></code></pre></div><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>When migrating <code>Shoot</code>s to a <code>Destination Seed</code> with different provider type from the <code>Source Seed</code>, make sure of the following:</p><p>Pods running in the <code>Destination Seed</code> must have network connectivity to the backup storage provider of the <code>Source Seed</code> so that etcd backups can be copied successfully. Otherwise, the <code>Restore</code> operation will get stuck at the <code>Waiting until etcd backups are copied</code> step. However, if you do end up in this case, you can still finish the control plane migration by following the <a href="documentation/pr-preview/pr-2/docs/gardener/control_plane_migration/#copying-etcd-backups-manually-during-the-restore-operation">guide to manually copy etcd backups</a>.</p><p>The nodes of your <code>Shoot</code> cluster must have network connectivity to the <code>Shoot</code>&#39;s <code>kube-apiserver</code> and the <code>vpn-seed-server</code> once they are migrated to the <code>Destination Seed</code>. Otherwise, the <code>Restore</code> operation will get stuck at the <code>Waiting until the Kubernetes API server can connect to the Shoot workers</code> step. However, if you do end up in this case and cannot allow network traffic from the nodes to the <code>Shoot</code>&#39;s control plane, you can annotate the <code>Shoot</code> with the <code>shoot.gardener.cloud/skip-readiness</code> annotation so that the <code>Restore</code> operation finishes, and then use the <a href="documentation/pr-preview/pr-2/docs/gardener/concepts/scheduler/#shootsbinding-subresource"><code>shoots/binding</code></a> subresource to migrate the control plane back to the <code>Source Seed</code>.</p></div><h2 id="copying-etcd-backups-manually-during-the-restore-operation" tabindex="-1">Copying ETCD Backups Manually During the <code>Restore</code> Operation <a class="header-anchor" href="#copying-etcd-backups-manually-during-the-restore-operation" aria-label="Permalink to &quot;Copying ETCD Backups Manually During the `Restore` Operation&quot;">​</a></h2><p>Following is a workaround that can be used to copy etcd backups manually in situations where a <code>Shoot</code>&#39;s control plane has been moved to a <code>Destination Seed</code> and the pods running in it lack network connectivity to the <code>Source Seed</code>&#39;s storage provider:</p><ol><li>Follow the instructions in the <a href="https://github.com/gardener/etcd-backup-restore/blob/master/docs/deployment/getting_started.md#getting-started" target="_blank" rel="noreferrer"><code>etcd-backup-restore</code> getting started documentation</a> on how to run the <code>etcdbrctl</code> command locally or in a container.</li><li>Follow the instructions in the <a href="https://github.com/gardener/etcd-backup-restore/blob/master/docs/deployment/getting_started.md#passing-credentials" target="_blank" rel="noreferrer">passing-credentials guide</a> on how to set up the required credentials for the copy operation depending on the storage providers for which you want to perform it.</li><li>Use the <code>etcdbrctl copy</code> command to copy the backups by following the instructions in the <a href="https://github.com/gardener/etcd-backup-restore/blob/master/docs/deployment/getting_started.md#etcdbrctl-copy" target="_blank" rel="noreferrer"><code>etcdbrctl copy</code> guide</a></li><li>After you have successfully copied the etcd backups, wait for the <code>EtcdCopyBackupsTask</code> custom resource to be created in the <code>Shoot</code>&#39;s control plane on the <code>Destination Seed</code>, if it does not already exist. Afterwards, mark it as successful by patching it using the following command:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOOT_NAME=my-shoot</span></span>\n<span class="line"><span>PROJECT_NAME=my-project</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>kubectl patch -n shoot--${PROJECT_NAME}--${SHOOT_NAME} etcdcopybackupstask ${SHOOT_NAME} --subresource status --type merge -p &quot;{\\&quot;status\\&quot;:{\\&quot;conditions\\&quot;:[{\\&quot;type\\&quot;:\\&quot;Succeeded\\&quot;,\\&quot;status\\&quot;:\\&quot;True\\&quot;,\\&quot;reason\\&quot;:\\&quot;manual copy successful\\&quot;,\\&quot;message\\&quot;:\\&quot;manual copy successful\\&quot;,\\&quot;lastTransitionTime\\&quot;:\\&quot;$(date -Iseconds)\\&quot;,\\&quot;lastUpdateTime\\&quot;:\\&quot;$(date -Iseconds)\\&quot;}]}}&quot;</span></span></code></pre></div></li><li>After the <code>main-etcd</code> becomes <code>Ready</code>, and the <code>source-etcd-backup</code> secret is deleted from the <code>Shoot</code>&#39;s control plane, remove the finalizer on the source <code>extensions.gardener.cloud/v1alpha1.BackupEntry</code> in the <code>Destination Seed</code> so that it can be deleted successfully (the resource name uses the following format: <code>source-shoot--&lt;project-name&gt;--&lt;shoot-name&gt;--&lt;uid&gt;</code>). This is necessary as the <code>Destination Seed</code> will not have network connectivity to the <code>Source Seed</code>&#39;s storage provider and the deletion will fail.</li><li>Once the control plane migration has finished successfully, make sure to manually clean up the source backup directory in the <code>Source Seed</code>&#39;s storage provider.</li></ol>',18)]))}const g=t(i,[["render",n]]);export{u as __pageData,g as default};
