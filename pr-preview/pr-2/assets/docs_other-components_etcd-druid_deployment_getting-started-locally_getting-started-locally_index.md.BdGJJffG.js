import{_ as a,c as t,o as s,a2 as i}from"./chunks/framework.B8WFj13S.js";const k=JSON.parse('{"title":"Getting Started Locally","description":"","frontmatter":{"github_repo":"https://github.com/gardener/etcd-druid","github_subdir":"docs/deployment/getting-started-locally","params":{"github_branch":"master"},"path_base_for_github_subdir":{"from":"content/docs/other-components/etcd-druid/deployment/getting-started-locally/getting-started-locally.md","to":"getting-started-locally.md"},"title":"Getting Started Locally","prev":false,"next":false},"headers":[],"relativePath":"docs/other-components/etcd-druid/deployment/getting-started-locally/getting-started-locally/index.md","filePath":"docs/other-components/etcd-druid/deployment/getting-started-locally/getting-started-locally.md","lastUpdated":null}'),n={name:"docs/other-components/etcd-druid/deployment/getting-started-locally/getting-started-locally/index.md"};function o(l,e,d,r,h,p){return s(),t("div",null,e[0]||(e[0]=[i(`<h1 id="setup-etcd-druid-locally" tabindex="-1">Setup Etcd-Druid Locally <a class="header-anchor" href="#setup-etcd-druid-locally" aria-label="Permalink to &quot;Setup Etcd-Druid Locally&quot;">​</a></h1><p>This document will guide you on how to setup <code>etcd-druid</code> on your local machine and how to provision and manage <code>Etcd</code> cluster(s).</p><h2 id="_00-prerequisites" tabindex="-1">00-Prerequisites <a class="header-anchor" href="#_00-prerequisites" aria-label="Permalink to &quot;00-Prerequisites&quot;">​</a></h2><p>Before we can setup <code>etcd-druid</code> and use it to provision <code>Etcd</code> clusters, we need to prepare the development environment. Follow the <a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/prepare-dev-environment/">Prepare Dev Environment Guide</a> for detailed instructions.</p><h2 id="_01-setting-up-kind-cluster" tabindex="-1">01-Setting up KIND cluster <a class="header-anchor" href="#_01-setting-up-kind-cluster" aria-label="Permalink to &quot;01-Setting up KIND cluster&quot;">​</a></h2><p><code>etcd-druid</code> uses <a href="https://kind.sigs.k8s.io/" target="_blank" rel="noreferrer">kind</a> as it&#39;s local Kubernetes engine. The local setup is configured for kind due to its convenience only. Any other Kubernetes setup would also work.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kind-up</span></span></code></pre></div><p>This command sets up a new Kind cluster and stores the kubeconfig at <code>./hack/kind/kubeconfig</code>. Additionally, this command also deploys a local container registry as a docker container. This ensures faster image push/pull times. The local registry can be accessed as <code>localhost:5001</code> for pushing and pulling images.</p><p>To target this newly created cluster, set the <code>KUBECONFIG</code> environment variable to the kubeconfig file.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KUBECONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PWD/hack/kind/kubeconfig</span></span></code></pre></div><blockquote><p><strong>Note:</strong> If you wish to configure kind cluster differently then you can directly invoke the script and check its help to know about all configuration options.</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hack/kind-up.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  usage:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kind-up.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [Options]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Options:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    --cluster-name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cluster-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kind</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cluster</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;etcd-druid-e2e&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    --skip-registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  Skip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> creating</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    --feature-gates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">feature-gate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Comma</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> separated</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gates</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cluster.</span></span></code></pre></div><h2 id="_02-setting-up-etcd-druid" tabindex="-1">02-Setting up etcd-druid <a class="header-anchor" href="#_02-setting-up-etcd-druid" aria-label="Permalink to &quot;02-Setting up etcd-druid&quot;">​</a></h2><h3 id="configuring-etcd-druid" tabindex="-1">Configuring etcd-druid <a class="header-anchor" href="#configuring-etcd-druid" aria-label="Permalink to &quot;Configuring etcd-druid&quot;">​</a></h3><p>Prior to deploying <code>etcd-druid</code>, it can be configured via CLI-args and environment variables.</p><ul><li>To configure CLI args you can modify <a href="https://github.com/gardener/etcd-druid/blob/master/charts/values.yaml" target="_blank" rel="noreferrer"><code>charts/druid/values.yaml</code></a>. For example, if you wish to <code>auto-reconcile</code> any change done to <code>Etcd</code> CR, then you should set <code>enableEtcdSpecAutoReconcile</code> to true. By default this will be switched off.</li><li><code>DRUID_E2E_TEST=true</code>: sets specific configuration for etcd-druid for optimal e2e test runs, like a lower sync period for the etcd controller.</li></ul><h3 id="deploying-etcd-druid" tabindex="-1">Deploying etcd-druid <a class="header-anchor" href="#deploying-etcd-druid" aria-label="Permalink to &quot;Deploying etcd-druid&quot;">​</a></h3><p>Any variant of <code>make deploy-*</code> command uses <a href="https://helm.sh/" target="_blank" rel="noreferrer">helm</a> and <a href="https://skaffold.dev/" target="_blank" rel="noreferrer">skaffold</a> to build and deploy <code>etcd-druid</code> to the target Kubernetes cluster. In addition to deploying <code>etcd-druid</code> it will also install the <a href="https://github.com/gardener/etcd-druid/blob/master/api/core/v1alpha1/crds/druid.gardener.cloud_etcds.yaml" target="_blank" rel="noreferrer">Etcd CRD</a> and <a href="https://github.com/gardener/etcd-druid/blob/master/api/core/v1alpha1/crds/druid.gardener.cloud_etcdcopybackupstasks.yaml" target="_blank" rel="noreferrer">EtcdCopyBackupTask CRD</a>.</p><h4 id="regular-mode" tabindex="-1">Regular mode <a class="header-anchor" href="#regular-mode" aria-label="Permalink to &quot;Regular mode&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span></span></code></pre></div><p>The above command will use <a href="https://skaffold.dev/" target="_blank" rel="noreferrer">skaffold</a> to build and deploy <code>etcd-druid</code> to the k8s kind cluster pointed to by <code>KUBECONFIG</code> environment variable.</p><h4 id="dev-mode" tabindex="-1">Dev mode <a class="header-anchor" href="#dev-mode" aria-label="Permalink to &quot;Dev mode&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy-dev</span></span></code></pre></div><p>This is similar to <code>make deploy</code> but additionally starts a <a href="https://skaffold.dev/docs/workflows/dev/" target="_blank" rel="noreferrer">skaffold dev loop</a>. After the initial deployment, skaffold starts watching source files. Once it has detected changes, you can press any key to update the <code>etcd-druid</code> deployment.</p><h4 id="debug-mode" tabindex="-1">Debug mode <a class="header-anchor" href="#debug-mode" aria-label="Permalink to &quot;Debug mode&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy-debug</span></span></code></pre></div><p>This is similar to <code>make deploy-dev</code> but additionally configures containers in pods for debugging as required for each container&#39;s runtime technology. The associated debugging ports are exposed and labelled so that they can be port-forwarded to the local machine. Skaffold disables automatic image rebuilding and syncing when using the <code>debug</code> mode as compared to <code>dev</code> mode.</p><p>Go debugging uses <a href="https://github.com/go-delve/delve" target="_blank" rel="noreferrer">Delve</a>. Please see the <a href="https://skaffold.dev/docs/workflows/debug/" target="_blank" rel="noreferrer">skaffold debugging documentation</a> how to setup your IDE accordingly.</p><p>!!! note Resuming or stopping only a single goroutine (Go Issue <a href="https://github.com/golang/go/issues/25578" target="_blank" rel="noreferrer">25578</a>, <a href="https://github.com/golang/go/issues/31132" target="_blank" rel="noreferrer">31132</a>) is currently not supported, so the action will cause all the goroutines to get activated or paused.</p><p>This means that when a goroutine is paused on a breakpoint, then all the other goroutines are also paused. This should be kept in mind when using <code>skaffold debug</code>.</p><h2 id="_03-configure-backup-optional" tabindex="-1">03-Configure Backup [<em>Optional</em>] <a class="header-anchor" href="#_03-configure-backup-optional" aria-label="Permalink to &quot;03-Configure Backup [*Optional*]&quot;">​</a></h2><h3 id="deploying-a-local-backup-store-emulator" tabindex="-1">Deploying a Local Backup Store Emulator <a class="header-anchor" href="#deploying-a-local-backup-store-emulator" aria-label="Permalink to &quot;Deploying a Local Backup Store Emulator&quot;">​</a></h3><p>!!! info This section is <em><strong>Optional</strong></em> and is only meant to describe steps to deploy a local object store which can be used for testing and development. If you either do not wish to enable backups or you wish to use remote (infra-provider-specific) object store then this section can be skipped.</p><p>An <code>Etcd</code> cluster provisioned via etcd-druid provides a capability to take regular delta and full snapshots which are stored in an object store. You can enable this functionality by ensuring that you fill in <a href="https://github.com/gardener/etcd-druid/blob/master/examples/etcd/druid_v1alpha1_etcd.yaml#L49-L54" target="_blank" rel="noreferrer">spec.backup.store</a> section of the <code>Etcd</code> CR.</p><table tabindex="0"><thead><tr><th>Backup Store Variant</th><th>Setup Guide</th></tr></thead><tbody><tr><td>Azure Object Storage Emulator</td><td><a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/deployment/getting-started-locally/manage-azurite-emulator/">Manage Azurite</a> (Steps 00-03)</td></tr><tr><td>S3 Object Store Emulator</td><td><a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/deployment/getting-started-locally/manage-s3-emulator/">Manage LocalStack</a> (Steps 00-03)</td></tr><tr><td>GCS Object Store Emulator</td><td><a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/deployment/getting-started-locally/manage-gcs-emulator/">Manage GCS Emulator</a> (Steps 00-03)</td></tr></tbody></table><h3 id="setting-up-cloud-provider-object-store-secret" tabindex="-1">Setting up Cloud Provider Object Store Secret <a class="header-anchor" href="#setting-up-cloud-provider-object-store-secret" aria-label="Permalink to &quot;Setting up Cloud Provider Object Store Secret&quot;">​</a></h3><p>!!! info This section is <em><strong>Optional</strong></em>. If you have disabled backup functionality or if you are using local storage or one of the supported object store emulators then you can skip this section.</p><p>A Kubernetes <a href="https://kubernetes.io/docs/concepts/configuration/secret/" target="_blank" rel="noreferrer">Secret</a> needs to be created for cloud provider Object Store access. You can refer to the Secret YAML templates <a href="https://github.com/gardener/etcd-backup-restore/tree/master/example/storage-provider-secrets" target="_blank" rel="noreferrer">here</a>. Replace the dummy values with the actual configuration and ensure that you have added the <code>metadata.name</code> and <code>metadata.namespace</code> to the secret.</p><p>!!! tip * Secret should be deployed in the same namespace as the <code>Etcd</code> resource. * All the values in the data field of the secret YAML should in <code>base64</code> encoded format.</p><p>To apply the secret run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path/to/secre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="_04-preparing-etcd-cr" tabindex="-1">04-Preparing Etcd CR <a class="header-anchor" href="#_04-preparing-etcd-cr" aria-label="Permalink to &quot;04-Preparing Etcd CR&quot;">​</a></h2><p>Choose an appropriate variant of <code>Etcd</code> CR from <a href="https://github.com/gardener/etcd-druid/tree/master/examples" target="_blank" rel="noreferrer">examples directory</a>.</p><p>If you wish to enable functionality to backup delta &amp; full snapshots then uncomment <code>spec.backup.store</code> section.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Configuration for storage provider</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  secretRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">etcd-backup-secret-name</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">object-storage-container-name</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aws</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # options: aws,azure,gcp,openstack,alicloud,dell,openshift,local</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">etcd-test</span></span></code></pre></div><p>Brief explanation of the keys:</p><ul><li><code>secretRef.name</code> is the name of the secret that was applied as mentioned above.</li><li><code>store.container</code> is the object storage bucket name.</li><li><code>store.provider</code> is the bucket provider. Pick from the options mentioned in comment.</li><li><code>store.prefix</code> is the folder name that you want to use for your snapshots inside the bucket.</li></ul><p>!!! tip For developer convenience we have provided object store emulator specific etcd CR variants which can be used as if as well.</p><h2 id="_05-applying-etcd-cr" tabindex="-1">05-Applying Etcd CR <a class="header-anchor" href="#_05-applying-etcd-cr" aria-label="Permalink to &quot;05-Applying Etcd CR&quot;">​</a></h2><p>Create the Etcd CR (Custom Resource) by applying the Etcd yaml to the cluster</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path-to-etcd-cr-yam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="_06-verify-the-etcd-cluster" tabindex="-1">06-Verify the Etcd Cluster <a class="header-anchor" href="#_06-verify-the-etcd-cluster" aria-label="Permalink to &quot;06-Verify the Etcd Cluster&quot;">​</a></h2><p>To obtain information on the etcd cluster you can invoke the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> etcd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o=wide</span></span></code></pre></div><p>We adhere to a naming convention for all resources that are provisioned for an <code>Etcd</code> cluster. Refer to <a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/concepts/etcd-cluster-components/">etcd-cluster-components</a> document to get details of all resources that are provisioned.</p><h3 id="verify-etcd-pods-functionality" tabindex="-1">Verify Etcd Pods&#39; Functionality <a class="header-anchor" href="#verify-etcd-pods-functionality" aria-label="Permalink to &quot;Verify Etcd Pods&#39; Functionality&quot;">​</a></h3><p><code>etcd-wrapper</code> uses a <a href="https://github.com/GoogleContainerTools/distroless" target="_blank" rel="noreferrer">distroless</a> image, which lacks a shell. To interact with etcd, use an <a href="https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/" target="_blank" rel="noreferrer">Ephemeral container</a> as a debug container. Refer to this <a href="https://github.com/gardener/etcd-wrapper/blob/master/docs/deployment/ops.md#operations--debugging" target="_blank" rel="noreferrer">documentation</a> for building and using an ephemeral container which gets attached to the <code>etcd-wrapper</code> pod.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Put a key-value pair into the etcd </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">etcdctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> put</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">1&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">1&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Retrieve all key-value pairs from the etcd db</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">etcdctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span></code></pre></div><p>For a multi-node etcd cluster, insert the key-value pair using the <code>etcd</code> container of one etcd member and retrieve it from the <code>etcd</code> container of another member to verify consensus among the multiple etcd members.</p><h2 id="_07-updating-etcd-cr" tabindex="-1">07-Updating Etcd CR <a class="header-anchor" href="#_07-updating-etcd-cr" aria-label="Permalink to &quot;07-Updating Etcd CR&quot;">​</a></h2><p><code>Etcd</code> CR can be updated with new changes. To ensure that <code>etcd-druid</code> reconciles the changes you can refer to options that etcd-druid provides <a href="documentation/pr-preview/pr-2/docs/other-components/etcd-druid/managing-etcd-clusters/#update-&amp;-reconcile-an-etcd-cluster">here</a>.</p><h2 id="_08-cleaning-up-the-setup" tabindex="-1">08-Cleaning up the setup <a class="header-anchor" href="#_08-cleaning-up-the-setup" aria-label="Permalink to &quot;08-Cleaning up the setup&quot;">​</a></h2><p>If you wish to only delete the <code>Etcd</code> cluster then you can use the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> etcd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">etcd-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>This will add the <code>deletionTimestamp</code> to the <code>Etcd</code> resource. At the time the creation of the <code>Etcd</code> cluster, etcd-druid will add a finalizer to ensure that it cleans up all <code>Etcd</code> cluster resources before the CR is removed.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  finalizers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">druid.gardener.cloud/etcd-druid</span></span></code></pre></div><p>etcd-druid will automatically pick up the deletion event and attempt clean up <code>Etcd</code> cluster resources. It will only remove the finalizer once all resources have been cleaned up.</p><p>If you only wish to remove <code>etcd-druid</code> but retain the kind cluster then you can use the following make target:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> undeploy</span></span></code></pre></div><p>If you wish to delete the kind cluster then you can use the following make target:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kind-down</span></span></code></pre></div><p>This cleans up the entire setup as the kind cluster gets deleted.</p>`,72)]))}const u=a(n,[["render",o]]);export{k as __pageData,u as default};
